[{"title":"恢复更新","url":"http://code4fun.me/2025/05/25/recover_update/","content":"<p>断更多年之后，准备更新，先试一下是否还能正常发布。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)</p>\n</blockquote>\n"},{"title":"Profile-guided optimizations[10/15]","url":"http://code4fun.me/2020/06/30/Profile_guided_optimizations/","content":"<p>不知道是没有人在用还是怎么回事, 当用最懂中文的百度去搜索 “Profile-guided optimizations” 的时候, 只有两篇来自 CSDN 的文章, 一篇是直接复制加部分翻译的官方文档, 另一篇干脆就是直接把缩写都给颠倒了.</p>\n<p><img src=\"/images/20200630220036926_1155.png\" alt=\"baidu results\"></p>\n<p>这个技术说起来, 看文章的话从1998年就有了, 距今都已经二十多年了, 说起来算是一个比较旧的技术了, 但也许是使用场景比较有限导致了使用并不是很多吧. 说使用场景有限, 主要还是在大部分使用场景下, 我们用不到比较麻烦的去节省那点CPU, 对于客户端来说多占一点CPU其实用户也并没有特别大的感知, 而当不是服务人数足够多的时候, 我们没必要节省那点CPU.</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>对于编译类型的语言, 我们都知道会经过编译把我们之前的C++或者Java等的代码编成机器码, 然后才能让 CPU来执行. 而 CPU 在摩尔定律不在起作用的今天, 一个方案是提高 CPU 的核数来提升运算效率, 譬如8核 16核层出不穷. 核数多了, 当然只有提高并行效率来提升我们程序的运行效率.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-30 21:52:03</p>\n</blockquote>\n"},{"title":"六月 Flag 总结","url":"http://code4fun.me/2020/06/30/6flag_summary/","content":"<p>六月马上就结束了, 果然 Flag 都是完成不了的, 但是也不能说这个过程完全没有意义吧. 去掉最开始的flag, 一共写了9篇文章, 还有一篇写了一半的.</p>\n<ul>\n<li><a href=\"http://code4fun.me/2020/06/30/Vietnam_travel/\">越南游记[9/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/23/xperf_diskio/\">Xperf diskio action[8/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/24/windows_disk_tool/\">Widnows 硬盘配置查询工具/命令[7/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/23/disk_allocation_size/\">硬盘 Allocation Unit Size 设置[6/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/23/china_internet/\">我看中国互联网发展[5/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/16/xperf/\">xperf 入门[4/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/15/2020summary/\">十年回首[3/15]</a></li>\n<li><a href=\"http://code4fun.me/2020/06/10/search_engine/\">我理解的搜索引擎[2/15]</a></li>\n</ul>\n<p>虽然这里面第 7 篇是纯灌水, 是复制了常用的几个命令的官方文档, 这里是计划后面在根据自己的使用场景替换一部分例子和加上一部分说明等. 一篇游记(9), 两篇瞎胡说(3, 5), 且这两篇瞎胡说感觉还没有写完, 其余的几篇还是比较偏技术的, 对于 xperf 的两篇(4, 8)个人感觉还是比较满意, 可能是对 performance tuning 的需求不是特别高, 所以文章并不是很多, 还算比较原创类型的文章, 后面应该会进一步把我的一些使用经验写出来.</p>\n<p>这个过程确实让我通过记录梳理了一些思路, 同时也通过在闲暇时间利用手机码一些字, 算充分利用了时间.</p>\n<p>另外就是我一直很鄙视微信公众号这种闭塞的平台, 但是后来想通了, 一种使得生活更加美丽的方法, 不是不管不顾, 而是加入其中去努力呼唤, 所以又把之前注销的公众号重新启用, 搬一些文章过去.</p>\n<p><img src=\"/images/20200630225937167_25109.jpg\" alt=\"公众号\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-30 21:50:55</p>\n</blockquote>\n"},{"title":"越南游记[9/15]","url":"http://code4fun.me/2020/06/30/Vietnam_travel/","content":"<p>其实是毕业的时候去的, 距今其实有两年了,要不是为了凑文章数目, 估计是不值得为他专门写一篇文章. 越南或者说整个东南亚地区, 似乎感觉上都差不多, 闷热潮湿的天气, 从城市穿过的河流, 严重依赖旅游业的海滨, 能讲两句中国话的小贩以及比较便宜的打车费用. 去之前本来还打算看一下<a href=\"https://m.douban.com/movie/subject/1291868/\" target=\"_blank\" rel=\"external\">情人</a>来感受一下胡志明(西贡)的样子, 不过看了一半就不了了之了.</p>\n<p>越南给我留下印象最深的就是河粉, 且恰逢之前听过味之道那期关于河粉的节目, <a href=\"https://wzd.pan.icu/88\" target=\"_blank\" rel=\"external\">去越南吃河粉</a>, 不得不说河粉还是很不错的, 尤其是添加了柠檬和薄荷之后, 当然还有也出镜的很普遍的椰子水和冰咖啡, 确实是每隔一段路就有一个饮品店, 卖冰咖啡. 总有一种, 全世界除了国内大家都特别喜欢和咖啡的错觉. 不知道如果不是这次出行, 后面会不会注意到越南餐馆, 但似乎除了河粉, 别的当地吃的像炸春卷之类的就没啥意思了, 导致后面在芽庄的时候, 吃了两顿印度菜. 虽然做菜的水平不是很好, 但是在欧洲的时候还是有挺多中餐馆是越南人开的, 还是可以吸引一些老外前去.</p>\n<p><img src=\"/images/20200630211449329_14770.png\" alt=\"河粉\"></p>\n<p>去越南差不多两个必去的地方就是首都,胡志明和海边芽庄,芽庄的海应该是只能用普通来形容, 当然海边难免会有一顿海鲜烧烤, 样式挺多的, 但似乎也没有什么特别出彩的地方, 或者说是并不会比我去盒马或者哪里做的好.</p>\n<p><img src=\"/images/20200630212740668_1724.png\" alt=\"海鲜\"></p>\n<p>海边的另一个常规操作就是租个机车/电动车兜风, 然后还尴尬的遇到了车坏了的情况, 以及多加了不少油的情形. 另一方面似乎就是南边的区域的交通会在很大程度上依赖摩托车, 譬如之前去过国内的潮州,台湾,泰国或者越南这边,甚至在泰国的时候都能通过 Grub(东南亚滴滴) 打摩的.</p>\n<p><img src=\"/images/20200630213303894_17.png\" alt=\"摩托大军\"></p>\n<p>作为陆地接壤的国家, 所以也就做了一次跨国火车, 也就会经过一个中间在火车上需要下来去过海关, 再上火车进入中国的过程. 坐车前就看到网上说陆上海关出关的时候, 工作人员可能会找中国人要小费的情况, 果然遇到了, 本着我有理的原则, 还是让我言辞决绝了, 然后也是让通过了. 这个后面就是进入国内的入关手续, 两边的工作场景和着重一比较, 有一种从7,80年代穿越过来的错觉.</p>\n<p><img src=\"/images/20200630213846900_23080.png\" alt=\"火车\"></p>\n<p>总体上来说, 越南这个国家从公职人员的气质和着装给人一种我国之前的感觉, 并且当地较低的消费水平和人民工资, 使得当地人会坑骗中国人, 不过那一碗河粉确实是不虚此行.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-30 19:14:49</p>\n</blockquote>\n"},{"title":"Widnows 硬盘配置查询工具/命令[7/15]","url":"http://code4fun.me/2020/06/24/windows_disk_tool/","content":"<h2 id=\"fsutil-fsinfo\"><a href=\"#fsutil-fsinfo\" class=\"headerlink\" title=\"fsutil fsinfo\"></a>fsutil fsinfo</h2><p>该命令主要是可以列出当前电脑上所包含的各个盘的信息, 类型, 以及一些文件系统相关的信息, 对于Windows主要是 NTFS的信息.</p>\n<h3 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsutil fsinfo [drives]</div><div class=\"line\">fsutil fsinfo [drivetype] &lt;volumepath&gt;</div><div class=\"line\">fsutil fsinfo [ntfsinfo] &lt;rootpath&gt;</div><div class=\"line\">fsutil fsinfo [statistics] &lt;volumepath&gt;</div><div class=\"line\">fsutil fsinfo [volumeinfo] &lt;rootpath&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h3><table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>drives</td>\n<td>Lists all drives in the computer.</td>\n</tr>\n<tr>\n<td>drivetype</td>\n<td>Queries a drive and lists its type, for example CD-ROM drive.</td>\n</tr>\n<tr>\n<td>ntfsinfo</td>\n<td>Lists NTFS specific volume information for the specified volume, such as the number of sectors, total clusters, free clusters, and the start and end of the MFT Zone.</td>\n</tr>\n<tr>\n<td>sectorinfo</td>\n<td>Lists information about the hardware’s sector size and alignment.</td>\n</tr>\n<tr>\n<td>statistics</td>\n<td>Lists file system statistics for the specified volume, such as metadata, log file, and MFT reads and writes.</td>\n</tr>\n<tr>\n<td>volumeinfo</td>\n<td>Lists information for the specified volume, such as the file system, and whether the volume supports case-sensitive file names, unicode in file names, disk quotas, or is a DirectAccess (DAX) volume.</td>\n</tr>\n<tr>\n<td><code>&lt;volumepath&gt;:</code></td>\n<td>Specifies the drive letter (followed by a colon).</td>\n</tr>\n<tr>\n<td><code>&lt;rootpath&gt;:</code></td>\n<td>Specifies the drive letter (followed by a colon) of the root drive.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><p>To list all of the drives in the computer, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsutil fsinfo drives</div></pre></td></tr></table></figure>\n<p>Output similar to the following displays:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Drives: A:\\ C:\\ D:\\ E:\\</div></pre></td></tr></table></figure>\n<p>To query the drive type of drive C, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsutil fsinfo drivetype c:</div><div class=\"line\"></div><div class=\"line\">C:\\&gt;fsutil fsinfo drivetype D:</div><div class=\"line\">D: - Fixed Drive</div><div class=\"line\"></div><div class=\"line\">C:\\&gt;fsutil fsinfo drivetype Z:</div><div class=\"line\">Z: - Remote/Network Drive</div></pre></td></tr></table></figure>\n<p>Possible results of the query include:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Unknown Drive</div><div class=\"line\">No such Root Directory</div><div class=\"line\">Removable Drive, for example floppy</div><div class=\"line\">Fixed Drive</div><div class=\"line\">Remote/Network Drive</div><div class=\"line\">CD-ROM Drive</div><div class=\"line\">Ram Disk</div></pre></td></tr></table></figure>\n<p>To query the volume information for volume E, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsinfo volumeinfo e:\\</div></pre></td></tr></table></figure>\n<p>Output similar to the following displays:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Volume Name : Volume</div><div class=\"line\">Serial Number : 0xd0b634d9</div><div class=\"line\">Max Component Length : 255</div><div class=\"line\">File System Name : NTFS</div><div class=\"line\">Supports Named Streams</div><div class=\"line\">Is DAX Volume</div></pre></td></tr></table></figure>\n<p>To query drive F for NTFS-specific volume information, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsutil fsinfo ntfsinfo f:</div></pre></td></tr></table></figure>\n<p>Output similar to the following displays:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NTFS Volume Serial Number : 0xe660d46a60d442cb</div><div class=\"line\">Number Sectors : 0x00000000010ea04f</div><div class=\"line\">Total Clusters : 0x000000000021d409</div><div class=\"line\">Mft Zone End : 0x0000000000004700</div></pre></td></tr></table></figure>\n<p>To query the file system’s underlying hardware for sector information, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsinfo sectorinfo d:</div></pre></td></tr></table></figure>\n<p>Output similar to the following displays:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:\\&gt;fsutil fsinfo sectorinfo d:</div><div class=\"line\">LogicalBytesPerSector : 4096</div><div class=\"line\">PhysicalBytesPerSectorForAtomicity : 4096</div><div class=\"line\">Trim Not Supported</div><div class=\"line\">DAX capable</div></pre></td></tr></table></figure>\n<p>To query the file system statistics for drive E, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsinfo statistics e:</div></pre></td></tr></table></figure>\n<p>Output similar to the following displays:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">File System Type : NTFS</div><div class=\"line\">Version : 1</div><div class=\"line\">UserFileReads : 75021</div><div class=\"line\">UserFileReadBytes : 1305244512</div><div class=\"line\">LogFileWriteBytes : 180936704</div></pre></td></tr></table></figure>\n<h2 id=\"Get-PhysicalDisk\"><a href=\"#Get-PhysicalDisk\" class=\"headerlink\" title=\"Get-PhysicalDisk\"></a>Get-PhysicalDisk</h2><p>The <code>Get-PhysicalDisk</code> cmdlet gets a list of all PhysicalDisk objects visible across any available Storage Management Providers, or optionally a filtered list of disks.</p>\n<p>Gets a list of all PhysicalDisk objects visible across any available Storage Management Providers, or optionally a filtered list.</p>\n<h3 id=\"SYNTAX\"><a href=\"#SYNTAX\" class=\"headerlink\" title=\"SYNTAX\"></a>SYNTAX</h3><h4 id=\"ByUniqueId-Default\"><a href=\"#ByUniqueId-Default\" class=\"headerlink\" title=\"ByUniqueId (Default)\"></a>ByUniqueId (Default)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk [-UniqueId &lt;String&gt;] [-Usage &lt;PhysicalDiskUsage&gt;] [-Description &lt;String&gt;]</div><div class=\"line\"> [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;] [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;]</div><div class=\"line\"> [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByObjectId\"><a href=\"#ByObjectId\" class=\"headerlink\" title=\"ByObjectId\"></a>ByObjectId</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk [-ObjectId &lt;String&gt;] [-Usage &lt;PhysicalDiskUsage&gt;] [-Description &lt;String&gt;]</div><div class=\"line\"> [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;] [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;]</div><div class=\"line\"> [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByName\"><a href=\"#ByName\" class=\"headerlink\" title=\"ByName\"></a>ByName</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk [[-FriendlyName] &lt;String&gt;] [[-SerialNumber] &lt;String&gt;] [-Usage &lt;PhysicalDiskUsage&gt;]</div><div class=\"line\"> [-Description &lt;String&gt;] [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;]</div><div class=\"line\"> [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;] [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByInputObject\"><a href=\"#ByInputObject\" class=\"headerlink\" title=\"ByInputObject\"></a>ByInputObject</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -InputObject &lt;CimInstance&gt; [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageSubsystem\"><a href=\"#ByStorageSubsystem\" class=\"headerlink\" title=\"ByStorageSubsystem\"></a>ByStorageSubsystem</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -StorageSubsystem &lt;CimInstance&gt; [-Usage &lt;PhysicalDiskUsage&gt;] [-Description &lt;String&gt;]</div><div class=\"line\"> [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;] [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;]</div><div class=\"line\"> [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageEnclosure\"><a href=\"#ByStorageEnclosure\" class=\"headerlink\" title=\"ByStorageEnclosure\"></a>ByStorageEnclosure</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -StorageEnclosure &lt;CimInstance&gt; [-Usage &lt;PhysicalDiskUsage&gt;] [-Description &lt;String&gt;]</div><div class=\"line\"> [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;] [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;]</div><div class=\"line\"> [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageNode\"><a href=\"#ByStorageNode\" class=\"headerlink\" title=\"ByStorageNode\"></a>ByStorageNode</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -StorageNode &lt;CimInstance&gt; [-PhysicallyConnected] [-Usage &lt;PhysicalDiskUsage&gt;]</div><div class=\"line\"> [-Description &lt;String&gt;] [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;]</div><div class=\"line\"> [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;] [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStoragePool\"><a href=\"#ByStoragePool\" class=\"headerlink\" title=\"ByStoragePool\"></a>ByStoragePool</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -StoragePool &lt;CimInstance&gt; [-Usage &lt;PhysicalDiskUsage&gt;] [-Description &lt;String&gt;]</div><div class=\"line\"> [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;] [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;]</div><div class=\"line\"> [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByVirtualDisk\"><a href=\"#ByVirtualDisk\" class=\"headerlink\" title=\"ByVirtualDisk\"></a>ByVirtualDisk</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-PhysicalDisk -VirtualDisk &lt;CimInstance&gt; [-VirtualRangeMin &lt;UInt64&gt;] [-VirtualRangeMax &lt;UInt64&gt;]</div><div class=\"line\"> [-HasAllocations &lt;Boolean&gt;] [-SelectedForUse &lt;Boolean&gt;] [-NoRedundancy] [-Usage &lt;PhysicalDiskUsage&gt;]</div><div class=\"line\"> [-Description &lt;String&gt;] [-Manufacturer &lt;String&gt;] [-Model &lt;String&gt;] [-CanPool &lt;Boolean&gt;]</div><div class=\"line\"> [-HealthStatus &lt;PhysicalDiskHealthStatus&gt;] [-CimSession &lt;CimSession&gt;] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h3 id=\"EXAMPLES\"><a href=\"#EXAMPLES\" class=\"headerlink\" title=\"EXAMPLES\"></a>EXAMPLES</h3><h4 id=\"Example-1-Getting-all-physical-disks\"><a href=\"#Example-1-Getting-all-physical-disks\" class=\"headerlink\" title=\"Example 1: Getting all physical disks\"></a>Example 1: Getting all physical disks</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt; Get-PhysicalDisk</div><div class=\"line\">FriendlyName        CanPool            OperationalStatus   HealthStatus        Usage                              Size </div><div class=\"line\">------------        --------            -----------------   ------------        -----                              ---- </div><div class=\"line\">PhysicalDisk4       False               OK                  Healthy             Data Store                        25 GB</div></pre></td></tr></table></figure>\n<p>This example returns an array of all PhysicalDisk objects present in the computer. A storage management provider is required to manage physical disks.</p>\n<h4 id=\"Example-2-Getting-all-physical-disks-eligible-for-adding-to-a-storage-pool\"><a href=\"#Example-2-Getting-all-physical-disks-eligible-for-adding-to-a-storage-pool\" class=\"headerlink\" title=\"Example 2: Getting all physical disks eligible for adding to a storage pool\"></a>Example 2: Getting all physical disks eligible for adding to a storage pool</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt;Get-PhysicalDisk -CanPool $True</div></pre></td></tr></table></figure>\n<p>This example returns an array of PhysicalDisk objects that are available for adding to a storage pool (they are in a primordial pool).</p>\n<h3 id=\"PARAMETERS\"><a href=\"#PARAMETERS\" class=\"headerlink\" title=\"PARAMETERS\"></a>PARAMETERS</h3><h4 id=\"CanPool\"><a href=\"#CanPool\" class=\"headerlink\" title=\"-CanPool\"></a>-CanPool</h4><p>Gets physical disks that are available for use in a storage pool.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> Boolean</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"CimSession\"><a href=\"#CimSession\" class=\"headerlink\" title=\"-CimSession\"></a>-CimSession</h4><p>Runs the cmdlet in a remote session or on a remote computer.<br>Enter a computer name or a session object, such as the output of a <a href=\"https://docs.microsoft.com/powershell/module/cimcmdlets/new-cimsession\" target=\"_blank\" rel=\"external\">New-CimSession</a> or <a href=\"https://go.microsoft.com/fwlink/p/?LinkId=227966\" target=\"_blank\" rel=\"external\">Get-CimSession</a> cmdlet.<br>The default is the current session on the local computer.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimSession</div><div class=\"line\">Parameter Sets: (All)</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"-Description\"></a>-Description</h4><p>Gets the physical disks that contain the specified description.<br>Enter a description or use wildcard characters to enter a description pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"FriendlyName\"><a href=\"#FriendlyName\" class=\"headerlink\" title=\"-FriendlyName\"></a>-FriendlyName</h4><p>Gets the physical disk with the specified friendly name.<br>Enter a friendly name or use wildcard characters to enter a name pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByName</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> <span class=\"number\">0</span></div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"HasAllocations\"><a href=\"#HasAllocations\" class=\"headerlink\" title=\"-HasAllocations\"></a>-HasAllocations</h4><p>Indicates whether the cmdlet gets a list of physical disks that host the extents of the virtual disk that you specify by using the <em>VirtualDisk</em> parameter.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> Boolean</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"HealthStatus\"><a href=\"#HealthStatus\" class=\"headerlink\" title=\"-HealthStatus\"></a>-HealthStatus</h4><p>Specifies the <strong>health status</strong> of physical disks.<br>The acceptable values for this parameter are:</p>\n<ul>\n<li>Healthy </li>\n<li>Unhealthy </li>\n<li>Unknown </li>\n<li>Warning</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> PhysicalDiskHealthStatus</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\">Accepted values: Healthy, Warning, Unhealthy, Unknown</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"InputObject\"><a href=\"#InputObject\" class=\"headerlink\" title=\"-InputObject\"></a>-InputObject</h4><p>Specifies the input object that is used in a pipeline command.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByInputObject</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Manufacturer\"><a href=\"#Manufacturer\" class=\"headerlink\" title=\"-Manufacturer\"></a>-Manufacturer</h4><p>Gets the physical disks with the specified manufacturer.<br>Enter a manufacturer string or use wildcard characters to enter a pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"-Model\"></a>-Model</h4><p>Gets the physical disks of the specified model.<br>Enter a model string or use wildcard characters to enter a pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"NoRedundancy\"><a href=\"#NoRedundancy\" class=\"headerlink\" title=\"-NoRedundancy\"></a>-NoRedundancy</h4><p>Indicates that this cmdlet gets physical disks that contain the last remaining copy of the data of a virtual disk.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> SwitchParameter</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"ObjectId\"><a href=\"#ObjectId\" class=\"headerlink\" title=\"-ObjectId\"></a>-ObjectId</h4><p>Specifies the ID of the physical disk to get.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByObjectId</div><div class=\"line\"><span class=\"attr\">Aliases:</span> PhysicalDiskObjectId</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"PhysicallyConnected\"><a href=\"#PhysicallyConnected\" class=\"headerlink\" title=\"-PhysicallyConnected\"></a>-PhysicallyConnected</h4><p>Indicates that this cmdlet gets physical disks that are physically connected to the specified storage node.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> SwitchParameter</div><div class=\"line\">Parameter Sets: ByStorageNode</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"SelectedForUse\"><a href=\"#SelectedForUse\" class=\"headerlink\" title=\"-SelectedForUse\"></a>-SelectedForUse</h4><p>Indicates whether the cmdlet gets a list of physical disks to host the extents that belong to the virtual disk specified by the <em>VirtualDisk</em> parameter.<br>Specify the physical disks to host the extents of a virtual disk by using the <em>PhysicalDisksToUse</em> parameter of the <strong>New-VirtualDisk</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> Boolean</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"SerialNumber\"><a href=\"#SerialNumber\" class=\"headerlink\" title=\"-SerialNumber\"></a>-SerialNumber</h4><p>Specifies the serial number of the physical disk to get.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByName</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> <span class=\"number\">1</span></div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageEnclosure\"><a href=\"#StorageEnclosure\" class=\"headerlink\" title=\"-StorageEnclosure\"></a>-StorageEnclosure</h4><p>Specifies a storage enclosure associated with the physical disk that this cmdlet gets.<br>To obtain a <strong>StorageEnclosure</strong> object, use the <strong>Get-StorageEnclosure</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageEnclosure</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageNode\"><a href=\"#StorageNode\" class=\"headerlink\" title=\"-StorageNode\"></a>-StorageNode</h4><p>Specifies a storage node as a <strong>CimInstance</strong> object.<br>The cmdlet gets the physical disk connected to the node that you specify.<br>To obtain a storage node object, use the <strong>Get-StorageNode</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageNode</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StoragePool\"><a href=\"#StoragePool\" class=\"headerlink\" title=\"-StoragePool\"></a>-StoragePool</h4><p>Accepts a StoragePool object as input and gets the physical disks that belong to the pool.<br>The Storage Pool CIM object is exposed by the <strong>Get-StoragePool</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStoragePool</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageSubsystem\"><a href=\"#StorageSubsystem\" class=\"headerlink\" title=\"-StorageSubsystem\"></a>-StorageSubsystem</h4><p>Specifies a storage subsystem.<br>This cmdlet gets physical disks attached to the storage subsystem that you specify.<br>To obtain a <strong>StorageSubsystem</strong> object, use the <strong>Get-StorageSubSystem</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageSubsystem</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"UniqueId\"><a href=\"#UniqueId\" class=\"headerlink\" title=\"-UniqueId\"></a>-UniqueId</h4><p>Gets only the physical disks with the specified IDs.<br>Type one or more IDs (separated by commas), or use wildcard characters to enter a pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String</div><div class=\"line\">Parameter Sets: ByUniqueId</div><div class=\"line\"><span class=\"attr\">Aliases:</span> Id</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"-Usage\"></a>-Usage</h4><p>Specifies an allocation method or usage.<br>This cmdlet gets the physical disks that have the specified allocation method.<br>The acceptable values for this parameter are:</p>\n<ul>\n<li>AutoSelect </li>\n<li>HotSpare </li>\n<li>Journal </li>\n<li>ManualSelect </li>\n<li>Retired </li>\n<li>Unknown</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> PhysicalDiskUsage</div><div class=\"line\">Parameter Sets: ByUniqueId, ByObjectId, ByName, ByStorageSubsystem, ByStorageEnclosure, ByStorageNode, ByStoragePool, ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\">Accepted values: Unknown, AutoSelect, ManualSelect, HotSpare, Retired, Journal</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"VirtualDisk\"><a href=\"#VirtualDisk\" class=\"headerlink\" title=\"-VirtualDisk\"></a>-VirtualDisk</h4><p>Accepts a VirtualDisk object as input and gets the physical disks used by the virtual disk.<br>The VirtualDisk object is exposed by the <strong>Get-VirtualDisk</strong> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">True</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"VirtualRangeMax\"><a href=\"#VirtualRangeMax\" class=\"headerlink\" title=\"-VirtualRangeMax\"></a>-VirtualRangeMax</h4><p>This parameter is reserved for future use.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> UInt64</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"VirtualRangeMin\"><a href=\"#VirtualRangeMin\" class=\"headerlink\" title=\"-VirtualRangeMin\"></a>-VirtualRangeMin</h4><p>This parameter is reserved for future use.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> UInt64</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h2 id=\"Get-Disk\"><a href=\"#Get-Disk\" class=\"headerlink\" title=\"Get-Disk\"></a>Get-Disk</h2><p>The <strong>Get-Disk</strong> cmdlet gets one or more Disk objects visible to the operating system, or optionally a filtered list.</p>\n<p>Gets one or more disks visible to the operating system.</p>\n<blockquote>\n<p>[!NOTE]<br>This cmdlet returns physical disk objects like basic disks and partitioned drive partitions.  Dynamic disks can span multiple pieces of physical media, so they will not be returned by Get-Disk. For more information, see <a href=\"https://docs.microsoft.com/windows/desktop/FileIO/basic-and-dynamic-disks\" target=\"_blank\" rel=\"external\">Basic and Dynamic Disks</a>.</p>\n</blockquote>\n<h3 id=\"SYNTAX-1\"><a href=\"#SYNTAX-1\" class=\"headerlink\" title=\"SYNTAX\"></a>SYNTAX</h3><h4 id=\"ByNumber-Default\"><a href=\"#ByNumber-Default\" class=\"headerlink\" title=\"ByNumber (Default)\"></a>ByNumber (Default)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [[-Number] &lt;UInt32[]&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByUniqueId\"><a href=\"#ByUniqueId\" class=\"headerlink\" title=\"ByUniqueId\"></a>ByUniqueId</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-UniqueId &lt;String[]&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByName-1\"><a href=\"#ByName-1\" class=\"headerlink\" title=\"ByName\"></a>ByName</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-FriendlyName &lt;String[]&gt;] [-SerialNumber &lt;String[]&gt;] [-CimSession &lt;CimSession[]&gt;]</div><div class=\"line\"> [-ThrottleLimit &lt;Int32&gt;] [-AsJob] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByPath\"><a href=\"#ByPath\" class=\"headerlink\" title=\"ByPath\"></a>ByPath</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-Path &lt;String[]&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob] [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByPartition\"><a href=\"#ByPartition\" class=\"headerlink\" title=\"ByPartition\"></a>ByPartition</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-Partition &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByVirtualDisk-1\"><a href=\"#ByVirtualDisk-1\" class=\"headerlink\" title=\"ByVirtualDisk\"></a>ByVirtualDisk</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-VirtualDisk &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByiSCSISession\"><a href=\"#ByiSCSISession\" class=\"headerlink\" title=\"ByiSCSISession\"></a>ByiSCSISession</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-iSCSISession &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByiSCSIConnection\"><a href=\"#ByiSCSIConnection\" class=\"headerlink\" title=\"ByiSCSIConnection\"></a>ByiSCSIConnection</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-iSCSIConnection &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageSubSystem\"><a href=\"#ByStorageSubSystem\" class=\"headerlink\" title=\"ByStorageSubSystem\"></a>ByStorageSubSystem</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-StorageSubSystem &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageNode-1\"><a href=\"#ByStorageNode-1\" class=\"headerlink\" title=\"ByStorageNode\"></a>ByStorageNode</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-StorageNode &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h4 id=\"ByStorageJob\"><a href=\"#ByStorageJob\" class=\"headerlink\" title=\"ByStorageJob\"></a>ByStorageJob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Get-Disk [-StorageJob &lt;CimInstance&gt;] [-CimSession &lt;CimSession[]&gt;] [-ThrottleLimit &lt;Int32&gt;] [-AsJob]</div><div class=\"line\"> [&lt;CommonParameters&gt;]</div></pre></td></tr></table></figure>\n<h3 id=\"EXAMPLES-1\"><a href=\"#EXAMPLES-1\" class=\"headerlink\" title=\"EXAMPLES\"></a>EXAMPLES</h3><h4 id=\"Example-1-Get-all-disks\"><a href=\"#Example-1-Get-all-disks\" class=\"headerlink\" title=\"Example 1: Get all disks\"></a>Example 1: Get all disks</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt;Get-Disk</div></pre></td></tr></table></figure>\n<p>This example gets all disks visible to the operating system.</p>\n<h4 id=\"Example-2-Get-a-disk-by-disk-number\"><a href=\"#Example-2-Get-a-disk-by-disk-number\" class=\"headerlink\" title=\"Example 2: Get a disk by disk number\"></a>Example 2: Get a disk by disk number</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt;Get-Disk -Number 6</div></pre></td></tr></table></figure>\n<p>This example gets disk 6.</p>\n<h4 id=\"Example-3-Get-all-USB-disks\"><a href=\"#Example-3-Get-all-USB-disks\" class=\"headerlink\" title=\"Example 3: Get all USB disks\"></a>Example 3: Get all USB disks</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt;Get-Disk | Where-Object -FilterScript &#123;$_.Bustype -Eq &quot;USB&quot;&#125;</div></pre></td></tr></table></figure>\n<p>This example gets all disks attached via the USB bus by piping the output of Get-Disk to the <strong>Where-Object</strong> cmdlet, and filtering by the USB value of the Bustype property.</p>\n<h4 id=\"Example-4-Get-the-iSCSI-sessions-for-all-iSCSI-disks\"><a href=\"#Example-4-Get-the-iSCSI-sessions-for-all-iSCSI-disks\" class=\"headerlink\" title=\"Example 4: Get the iSCSI sessions for all iSCSI disks\"></a>Example 4: Get the iSCSI sessions for all iSCSI disks</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\&gt;Get-Disk | Where-Object -FilterScript &#123;$_.BusType -Eq &quot;iSCSI&quot;&#125; |</div><div class=\"line\">Get-IscsiSession | Format-Table</div></pre></td></tr></table></figure>\n<p>This example gets all disks attached via the iSCSI bus by piping the output of Get-Disk to the <strong>Where-Object</strong> cmdlet, and filtering by the iSCSI value of the Bustype property.<br>It then passes the Disk objects in the pipeline to the <strong>Get-IscsiSession</strong> cmdlet, which gets the associated iSCSI sessions, and then pipes the output to the <strong>Format-Table</strong> cmdlet for simplified display.</p>\n<h3 id=\"PARAMETERS-1\"><a href=\"#PARAMETERS-1\" class=\"headerlink\" title=\"PARAMETERS\"></a>PARAMETERS</h3><h4 id=\"AsJob\"><a href=\"#AsJob\" class=\"headerlink\" title=\"-AsJob\"></a>-AsJob</h4><p>Runs the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> SwitchParameter</div><div class=\"line\">Parameter Sets: (All)</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"CimSession-1\"><a href=\"#CimSession-1\" class=\"headerlink\" title=\"-CimSession\"></a>-CimSession</h4><p>Runs the cmdlet in a remote session or on a remote computer.<br>Enter a computer name or a session object, such as the output of a <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=227967\" target=\"_blank\" rel=\"external\">New-CimSession</a> or <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=227966\" target=\"_blank\" rel=\"external\">Get-CimSession</a> cmdlet.<br>The default is the current session on the local computer.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimSession[]</div><div class=\"line\">Parameter Sets: (All)</div><div class=\"line\"><span class=\"attr\">Aliases:</span> Session</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"FriendlyName-1\"><a href=\"#FriendlyName-1\" class=\"headerlink\" title=\"-FriendlyName\"></a>-FriendlyName</h4><p>Gets the disk with the specified friendly name.<br>Enter a friendly name, or use wildcard characters to enter a name pattern.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String[]</div><div class=\"line\">Parameter Sets: ByName</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"-Number\"></a>-Number</h4><p>Specifies the disk number for which to get the associated Disk object.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> UInt32[]</div><div class=\"line\">Parameter Sets: ByNumber</div><div class=\"line\"><span class=\"attr\">Aliases:</span> DeviceId</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> <span class=\"number\">0</span></div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByPropertyName)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Partition\"><a href=\"#Partition\" class=\"headerlink\" title=\"-Partition\"></a>-Partition</h4><p>Accepts a Partition object as input.<br>The Partition CIM object is exposed by the <a href=\"http://technet.microsoft.com/library/85bb3c53-536e-408f-b159-28e91afeb1a1\" target=\"_blank\" rel=\"external\">Get-Partition</a> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByPartition</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"-Path\"></a>-Path</h4><p>Contains valid path information.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String[]</div><div class=\"line\">Parameter Sets: ByPath</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByPropertyName)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"SerialNumber-1\"><a href=\"#SerialNumber-1\" class=\"headerlink\" title=\"-SerialNumber\"></a>-SerialNumber</h4><p>Specifies an array of serial numbers associated with disks that this cmdlet gets.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String[]</div><div class=\"line\">Parameter Sets: ByName</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageJob\"><a href=\"#StorageJob\" class=\"headerlink\" title=\"-StorageJob\"></a>-StorageJob</h4><p>Specifies a storage job object that is associated with disks that this cmdlet gets.<br>To obtain a storage job, use the Get-StorageJob cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageJob</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageNode-1\"><a href=\"#StorageNode-1\" class=\"headerlink\" title=\"-StorageNode\"></a>-StorageNode</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageNode</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"StorageSubSystem\"><a href=\"#StorageSubSystem\" class=\"headerlink\" title=\"-StorageSubSystem\"></a>-StorageSubSystem</h4><p>Specifies the storage subsystem from which this cmdlet gets disks.<br>To obtain a <strong>StorageSubsystem</strong> object, use the Get-StorageSubSystem cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByStorageSubSystem</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"ThrottleLimit\"><a href=\"#ThrottleLimit\" class=\"headerlink\" title=\"-ThrottleLimit\"></a>-ThrottleLimit</h4><p>Specifies the maximum number of concurrent operations that can be established to run the cmdlet.<br>If this parameter is omitted or a value of <code>0</code> is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.<br>The throttle limit applies only to the current cmdlet, not to the session or to the computer.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> Int32</div><div class=\"line\">Parameter Sets: (All)</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"UniqueId-1\"><a href=\"#UniqueId-1\" class=\"headerlink\" title=\"-UniqueId\"></a>-UniqueId</h4><p>Gets only the disks with the specified IDs.<br>Type one or more IDs (separated by commas).</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> String[]</div><div class=\"line\">Parameter Sets: ByUniqueId</div><div class=\"line\"><span class=\"attr\">Aliases:</span> Id</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">False</span></div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"VirtualDisk-1\"><a href=\"#VirtualDisk-1\" class=\"headerlink\" title=\"-VirtualDisk\"></a>-VirtualDisk</h4><p>Accepts a VirtualDisk object as input.<br>The Virtual Disk CIM object is exposed by the <a href=\"http://technet.microsoft.com/library/0eeba53f-6468-485f-a680-49260b4c83f0\" target=\"_blank\" rel=\"external\">Get-VirtualDisk</a> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByVirtualDisk</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"iSCSIConnection\"><a href=\"#iSCSIConnection\" class=\"headerlink\" title=\"-iSCSIConnection\"></a>-iSCSIConnection</h4><p>Accepts an iSCSIConnection object as input.<br>The iSCSI Connection CIM object is exposed by the <a href=\"http://technet.microsoft.com/library/e566d297-76ad-48d0-b5af-11674f23b080\" target=\"_blank\" rel=\"external\">Get-IscsiConnection</a> cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByiSCSIConnection</div><div class=\"line\"><span class=\"attr\">Aliases:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<h4 id=\"iSCSISession\"><a href=\"#iSCSISession\" class=\"headerlink\" title=\"-iSCSISession\"></a>-iSCSISession</h4><p>Accepts an iSCSISession object as input.<br>The iSCSI Session CIM object is exposed by the Get-IscsiSession cmdlet.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Type:</span> CimInstance</div><div class=\"line\">Parameter Sets: ByiSCSISession</div><div class=\"line\"><span class=\"attr\">Aliases:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">Required:</span> <span class=\"literal\">False</span></div><div class=\"line\"><span class=\"attr\">Position:</span> Named</div><div class=\"line\">Default value: None</div><div class=\"line\">Accept pipeline input: <span class=\"literal\">True</span> (ByValue)</div><div class=\"line\">Accept wildcard characters: <span class=\"literal\">False</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-24 18:44:39</p>\n</blockquote>\n"},{"title":"我看中国互联网发展[5/15]","url":"http://code4fun.me/2020/06/23/china_internet/","content":"<p>互联网的发展总是依赖于基础建设的。<br>互联网的发展十分讲究讲究时机, 不超前抓不住机会，但是太超前又会死掉。</p>\n<h2 id=\"审查\"><a href=\"#审查\" class=\"headerlink\" title=\"审查\"></a>审查</h2><p>审查是中文互联网内容领域一直绕不过去的话题，不同的时期，不同的平台的审查标准也是千奇百怪，可能一个平台热传的内容到另一个平台就发不出去，可能你多年前发的一条状态今天被删除了。当然这种问题的标准，也不会有一个公开的。这种现状在一定程度上导致了用户的自我审查，就是在发东西之前，先思考一下这个话题能不能发，发出去会不会被删。对于自我审查，我是觉得这是一件十分要不得的事情。严格的自我审查一方面会束缚住人的表达，另一方面可能会使得平台的审查机制变得更加严苛。很怕最终变成某篇小说里写的那样，各种社交媒体账号都上交给国家，发一条微博需要提前向有关部门申请，然后说脏话要按量和级别来购买。虽然我讨厌说脏话，但更讨厌说不出话。另一方面，为了躲避机器的自动审查，各种关键字的替换，缩写以及更有甚者用一些隐藏的字符放在文字中间。这也是很讨厌的一种行为，作为一个老派的互联网开放论人士，反感一切破坏搜索与公开的行为。<br>国内目前很多资讯类产品前期想吸引用户，尤其是男性用户，很简单的做法就是激发人类原始的欲望，譬如小密圈（现在的知识星球）主要靠的是各种擦边球乃至十分直白的色情内容，以及即刻开始的随处可见的任务，然后随着用户量的增加，再去除这些。去掉之后的风险就是可能会带来大量的用户流失，例如 Tumblr。</p>\n<h2 id=\"视频版权\"><a href=\"#视频版权\" class=\"headerlink\" title=\"视频版权\"></a>视频版权</h2><p>近几年国内的版权意识越来越强了，当然也得益于比较低廉的会员费，做活动购买的话，各大网站基本上都是一年在100元以内，基本上也就是国外 Netflix 等一个月的费用。作为一个国内的大的视频平台的会员基本都有（腾讯，优酷，爱奇艺，芒果，哔哩哔哩）的人应该还是可以稍微说一下自己对各大平台的情况的。这里面最讨厌的平台应该就是爱奇艺了，开会员的初衷应该就是去广告了，然而该平台却搞出来会员专属广告，然后超前点播应该也是起于此吧。B站的会员的话其实用处不算特别大，因为本身就不加广告，而会员主要就是追番可以多看一集或者看一些会员专属救番，所以基本上属于发电行为。而腾讯应该确实是厉害，好多很火的国创动漫B站都没有版权，而腾讯却有，譬如一人之下和狐妖小红娘等。优酷的没落其实还是挺令人奇怪的，应该算是国内做的很早的视频网站，并且当初也产生了很多现象级的网剧，例如万合天宜的，以及有很多知名的个人创造者，像老湿，敖厂长等，但不知道为何变到现在这样，即使有会员一年也看不几次，只是偶尔要搜一些很老的剧的时候才会去看一下。芒果的话只能说综艺强无敌，单一个存在了二十多年的快乐大本营应该就是大部分电视台做不到的事情了，以及各种可能是买的韩国版权但是做出来就霸占各种热搜的综艺。</p>\n<h2 id=\"Bad-Thing\"><a href=\"#Bad-Thing\" class=\"headerlink\" title=\"Bad-Thing\"></a>Bad-Thing</h2><p>国内的互联网发展似乎是往 Evil 和 Bad 方向发展. 不说我心中的罪恶头子， 找工作都没有投他家简历的公司 – 百度。其余的似乎也没有好到哪里去，巨头都是一步步往封闭里发展，为了让用户都装上自己的 APP 从而可以更方便的盗取用户隐私，无处不在的提醒你要用 APP 打开。之前以资讯抓取聚合起家的即刻，不知道为何在整改一年之后，只保留了社交部分，资讯方面完全删除了。另一方面就是随着互联网的能力越来越大，管控也越来越严，以至于都要类似区分 Android 和安卓一样，把互联网分成互联网和中国互联网。另一方面是头条系的壮大以及由此产生的影响，利用算法的强大，把每个人装到一个 Bubble 里面，你训练了算法，而算法进一步吞没了你。</p>\n<p>万物之中，希望最美。愿互联网可以向更好的方向发展。</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-23 20:05:04</p>\n</blockquote>\n"},{"title":"Xperf diskio action[8/15]","url":"http://code4fun.me/2020/06/23/xperf_diskio/","content":"<p>可以使用的命令在<a href=\"https://docs.microsoft.com/en-us/windows-hardware/test/wpt/diskio\" target=\"_blank\" rel=\"external\">官方文档</a>里面都包含了,很简单的一条命令, <code>-a diskio [-util &lt;n&gt;] [-summary] [-counts] [-detail] [-overlap] [-range T1 T2]</code>, 参数也就五个:</p>\n<ul>\n<li><code>-util [n]</code> disk utilization report, 其中 n 为这个 report 的时间间隔, 默认是 1s.</li>\n<li><code>-summary</code> 输出 I/O summary report</li>\n<li><code>-detail</code> 输出每个 I/O event</li>\n<li><code>-overlap</code> 输出 I/O events 的 overlapping 关系, 也即当多线程执行的时候, 各个 IO 的开始与结束周期.</li>\n<li><code>-range</code> T1 T2 把输出限制到 [T1, T2) 这个时间范围里面, 单位是微秒.</li>\n</ul>\n<p>默认的 report 就是  disk utilization report.</p>\n<p>这个就是官方的所有文档了, 但是 report 是什么样子, 以及其中每个column的含义并没有详细的介绍. 下面通过一些例子来说明这个的使用.</p>\n<h2 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h2><h3 id=\"util\"><a href=\"#util\" class=\"headerlink\" title=\"-util\"></a>-util</h3><p>我们可以在默认的不加任何参数的情况下使用, <code>-util</code> 获得所有disk分时间的使用率.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i D:\\xperflog\\xperf_trace_log.etl -tle -o d:\\disk_usage.txt -a diskio -util</div></pre></td></tr></table></figure>\n<p>如下图, 时间的单位是微秒, 所以也就是每 1s 各个硬盘的读写和使用率的统计信息, 下图有四组 Read, Write, Usage 对应着四块硬盘.</p>\n<p><img src=\"/images/20200628140316905_1946.png\" alt=\"disk util\"></p>\n<p>根据这些信息, 我们可以方便的统计在一段时间内, 硬盘使用率变化情况, 以及不同硬盘间的区别.</p>\n<p><img src=\"/images/20200628141230255_20839.png\" alt=\"disk usage\"></p>\n<p>上图就反应了两块硬盘以RAID0形式组成一个 volume 在一个时间段内进行大规模的读的时候的 disk usage 变化图. 我们可以发现随时间变化, disk usage越来越少, 而且下降频率越来越慢, 同时两块盘的 usage 基本保持一致, 也即两边负载相同. 这时候我们其实是可以去探究一下,为什么disk usage会在负载不变的情况下逐渐降低.</p>\n<h3 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"-summary\"></a>-summary</h3><p>summary 是按照文件来做的统计信息. 在一个给定或者全部的时间内, 每一个文件进行的读写的次数, 以及总共的 IO time.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i D:\\xperf_trace_log.etl -tle -o diskio_summary.txt -a diskio -summary -range 368000000 866000000</div></pre></td></tr></table></figure>\n<p><img src=\"/images/20200628142002577_12105.png\" alt=\"summary\"></p>\n<p>一个典型的<code>-summary</code> 的output 如上图所示, 前三列对应总的 IO 次数(Count), IO 大小(Size, 单位是 bytes), IO 硬盘服务的时间 (SrvT, 单位是微秒), 后面紧跟着的是读(R)操作和写(W)操作各自的信息, 然后就是总的IO 所用的时间 (IOTime). 根据这个, 我们可以进一步分析每个文件的读写 IO 占比是多少, 是否符合预期, 以及其平均的 IO 时间是多少, 是否和硬盘所能提供的性能差不多, 平均一次 IO 处理多少数据, 是否过多或者过少.</p>\n<h3 id=\"detail\"><a href=\"#detail\" class=\"headerlink\" title=\"-detail\"></a>-detail</h3><p>detail  包含所有单次 IO 的信息, 把所有 IO 发生的时候的情况按照时间顺序排列下来.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i D:\\xperf_trace_log.etl  -tle -o diskio_detail.txt  -a diskio -detail -range 368000000 370000000</div></pre></td></tr></table></figure></p>\n<p>一个输出结果如下图所示, 第一列就是 IO Type 有可能是 DiskWrite 也有可能是 DiskRead. 然后就是这次 IO 的开始时间和结束时间, 以及两种之差, 也就是这次 IO 的时间, 接下来是硬盘服务的时间, 以及该次 IO 的大小, 然后就是这次 IO 作用于硬盘上位置偏移量. Pri 指的是 IO 的优先级, 后面几个在报告里给出了解释.</p>\n<ul>\n<li>QD/I - Number of outstanding IOs at IO start time. IO 开始的时候的 queuelength</li>\n<li>QD/C - Number of outstanding IOs at IO Completion time. IO 结束的时候的 queuelength</li>\n<li>IBCB - Number of IOs that initialized before start time and completed before end time. 当前IO 开始前初始化且在当前IO结束之前结束的IO数量.</li>\n<li>IBCA - Number of IOs that initialized before start time and completed after end time. 当前IO 开始前初始化且在当前IO结束之后才结束的IO数量.</li>\n<li>IACB - Number of IOs that initialized after start time and completed before end time. 当前IO 开始后才初始化且在当前IO结束之前就结束的IO数量.</li>\n</ul>\n<p>然后就是 issue 该IO的 process 的名字及PID, 以及该IO 对应的硬盘和文件名.</p>\n<p><img src=\"/images/20200628142949777_32343.png\" alt=\"disk detail\"></p>\n<p>这里的信息是更进一步细节化的, 我们可以从中发现一些IO 的野值情况, 也可以发现单次IO是否稳定之类的信息, 如下图蓝色的线和橘色的线分别对应着不同 IO event中 IOTime 和 Disk SrvT的变化曲线.</p>\n<p><img src=\"/images/20200628143602516_2846.png\" alt=\"diskiotime\"></p>\n<h3 id=\"overlap\"><a href=\"#overlap\" class=\"headerlink\" title=\"-overlap\"></a>-overlap</h3><p>overlap 顾名思义是表示着不同的 IO 之间的交叠关系, 其大部分信息和detail 中的是相同的, 主要是把 IBCB等参数给具象化了, 你不但可以知道有几个这样的IO 还可以知道是哪些IO.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i D:\\xperf_trace_log.etl -tle -o diskio_overlap.txt  -a diskio -overlap -range 368000000 370000000</div></pre></td></tr></table></figure>\n<p>结果类似于下图这样, 他会对每个disk产生单独的数据,会在最开始标明是针对于哪个disk的, 在最左侧就是该IO 的event, <code>+</code> 表示 IO 的开始 <code>-</code> 表示结束, 而 <code>|</code> 表示仍在继续进行. 别的都可以根据文件名自行理解到, 其中 <code>IrpFlags</code> 是当前IO产生的时候我们给的一些 flag的组合, 其中 <code>Irp</code> 是 <code>IO request packet</code>的缩写, 其基本内容定义在 <code>wdm.h</code> 中, </p>\n<p><img src=\"/images/20200628144519909_19384.png\" alt=\"disk overlap\"></p>\n<p>其各个flag 的含义如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_NOCACHE                     0x00000001</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_PAGING_IO                   0x00000002</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_MOUNT_COMPLETION            0x00000002</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_SYNCHRONOUS_API             0x00000004</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_ASSOCIATED_IRP              0x00000008</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_BUFFERED_IO                 0x00000010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_DEALLOCATE_BUFFER           0x00000020</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_INPUT_OPERATION             0x00000040</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_SYNCHRONOUS_PAGING_IO       0x00000040</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_CREATE_OPERATION            0x00000080</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_READ_OPERATION              0x00000100</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_WRITE_OPERATION             0x00000200</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_CLOSE_OPERATION             0x00000400</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_DEFER_IO_COMPLETION         0x00000800</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_OB_QUERY_NAME               0x00001000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_HOLD_DEVICE_QUEUE           0x00002000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_RETRY_IO_COMPLETION         0x00004000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_CLASS_CACHE_OPERATION       0x00008000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_QUOTA_CHARGED                 0x01</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_ALLOCATED_MUST_SUCCEED        0x02</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_ALLOCATED_FIXED_SIZE          0x04</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IRP_LOOKASIDE_ALLOCATION          0x08</span></div></pre></td></tr></table></figure>\n<p>那么这里的 <code>0x062901</code> 也就很容易发现是由 <code>IRP_NOCACHE, IRP_DEFER_IO_COMPLETION, IRP_READ_OPERATION, IRP_HOLD_DEVICE_QUEUE</code> 这些 flag组合起来的, 说明这是一个不使用 cache, 直接读取内容的 raw io.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-23 14:03:19</p>\n</blockquote>\n"},{"title":"硬盘 Allocation Unit Size 设置[6/15]","url":"http://code4fun.me/2020/06/23/disk_allocation_size/","content":"<p>Disk allocation unit size, 故名思议, 是硬盘里面的分配单元. 也就是说当我们对硬盘进行划分的时候,是以多大的单元把数据均匀分配的. 这个概念并不是硬盘上的概念, 虽然对于硬盘也有最小的处理单元, 例如对于一个普通的机械硬盘, 由于扇区的划分, 可能一个最小的单位就是 4KB, 即使你只想读 1Byte的数据, 他还是要读取 4KB 的数据, 只是并没有把你不需要的那部分返回给你. 对于文件系统, 文件系统里的 Allocation 是一个类似于内存分配的概念, 为了可以更方便的索引, 我们不能把整个硬盘按照 Byte 或者 Bit 来拆分, 但是如果拆分单元过大的话, 那么就会造成很多空间的浪费, 对于一个 64KB 分配单元, 即使是一个只有一个字节的文件, 其占据的硬盘空间也是64KB. </p>\n<p><img src=\"/images/20200624152254402_14086.png\" alt=\"format allocation unit size choose\"></p>\n<p>分配单元的大小一般会没有什么影响, 但是当我们要用多快数据盘来保存数据的时候, 情况就变得比较重要了, 对于随机读写支持最好的 RAID0. 由于我们要把两块硬盘以条带方式组合(Striped volume)起来, 那么当如果我们以 4K 来作为 allocation unit size, 那么整个文件就会按照 4K 这种单元随机的分布到两块盘上, 此部分在 NTFS 文件系统中是完全不可控的, 那么一个文件会以什么方式分布到两块盘上就完全听天由命了. 这时候如果我们发起 16KB 大小的 IO, 就有可能把这个 16KB 分成 0 + 4, 1 + 3, 2 + 2 这三种情况. 等于也就是我们一个从应用程序方发出来的单个 IO 请求, 到了硬盘上就变成了两个 IO 请求, 而这种请求在操作系统层面上统计还是只视作一个 IO event, 只能单独查看每一个 IO event 才能确定这种情况. 同时另一方面, 当分配单元过大的时候, 我们又可能造成 IO event 的分配不均匀, 导致某一块盘的 IO 更多, 从而更早的达到 bottleneck.</p>\n<p>综合起来说就是, 对于 allocation unit size 的确定要根据实际场景里面的 IO event 的主要的 size, 尽量的保证该 allocation size 要大于 IO size, 在此基础上再尽量小, 从而可以让数据可以尽可能的平均分配到多块盘上.</p>\n<p>那么如何确定当前硬盘的 allocation unit size 是多少呢? 一种方式是就是尝试格式化, 会显示当前的 unit size. 另一种是用命令, 可以使用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fsutil fsinfo ntfsinfo [your drive]</div></pre></td></tr></table></figure>\n<p>其中的 Bytes Per Cluster 就是当前的 allocation size.</p>\n<p><img src=\"/images/20200624162918982_22823.png\" alt=\"fsutil\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-23 13:55:05</p>\n</blockquote>\n"},{"title":"xperf 入门[4/15]","url":"http://code4fun.me/2020/06/16/xperf/","content":"<p>在做性能优化的时候， 由于服务器是 Windows, 而看到的好多工具， 像 DTrace 等都是只支持 Linux 的， 虽然 DTrace 微软官方有一个 <a href=\"https://github.com/microsoft/DTrace-on-Windows\" target=\"_blank\" rel=\"external\">port</a>, 但是使用体验并不好. 然后, 花了挺多时间去网上搜一些 performance profiling tools的, 后来, 突然意识到自己简直是守着金山要饭. Xperf 就是一个十分好用的工具, 之前由于一次采样的时间过久(20多分钟), 导致文件很大 (10多G), 然后每次打开一个 View 的时间过长, 所以后来就不了了之了.</p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Xperf 的官方文档可以参考<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/xperf/detailed-walkthrough\" target=\"_blank\" rel=\"external\">这里</a>, 它是 Windows Performance Analyzer (WPA) 里面的一个重要组件, 另一个比较好用的组件是 F1 Profiler, 利用 F1Profiler 可以很方便地看到每一部分的 CPU usage,  inclusive 和 exclusive 的, 可以很具体到是哪一个函数,甚至是哪一行用了比较多的CPU.</p>\n<p><img src=\"/images/20200616192136939_14753.png\" alt=\"f1profiler\"></p>\n<p>但是 F1Profiler 的一个缺点是由于其是基于统计的信息,所以不能很好的了解一些具体的某些时段发生的事情,另外就是其主要信息是关于 CPU 的采样, 所以对于其余的例如IO方面,内存方面的问题就有些力不从心了.  而基于 event 信息的 xperf,就没有这些问题了.</p>\n<p>首先当然是安装, 其包含在Widnows SDK 里面, 只需要在<a href=\"https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/\" target=\"_blank\" rel=\"external\">官方SDK网站</a>, 这里下载最新的, 然后安装就可以了.</p>\n<h2 id=\"Start-amp-amp-Stop\"><a href=\"#Start-amp-amp-Stop\" class=\"headerlink\" title=\"Start &amp;&amp; Stop\"></a>Start &amp;&amp; Stop</h2><p>用 xperf 来记录信息也十分方便, 只需要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -on FileIO+FILENAME+PROFILE -maxbuffers 1024</div></pre></td></tr></table></figure></p>\n<p>这里其中<code>-on</code>后面的参数是可以根据自己的情况修改的, 具体包含哪些可以通过 <code>xperf -providers KF KG</code> 命令得到. 其中 <code>KF</code> 是所有的 kernal flags, 而 <code>KG</code> 则是一些组合, 例如 <code>Latency</code> 就等价于 <code>PROC_THREAD+LOADER+DISK_IO+HARD_FAULTS+DPC+INTERRUPT+CSWITCH+PROFILE</code>, 一些典型的 Flag.</p>\n<p><img src=\"/images/20200617200954656_15520.png\" alt=\"providers flag\"></p>\n<p>在 <code>xperf</code> 开始工作之后, 我们就可以启动我们想要 profiling 的应用程序, 由于 xperf 的设计问题, 目前我们不能单独的指定只profile 和某个 process 相关的信息, 所以会得到的相当于那个时间段之内全量的信息. 在采集一段时间后, 我们可以简单的通过 <code>xperf -d D:\\xperf_trace_log.etl</code> 来把output 输出到指定路径指定文件.</p>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><h3 id=\"GUI\"><a href=\"#GUI\" class=\"headerlink\" title=\"GUI\"></a>GUI</h3><p>最简单查看的方式就是直接双击打开， 就会在左侧列出一些小图，你也可以选择一些指定的细节到新建的view里面去。主界面大概是这样子的:</p>\n<p><img src=\"/images/20200617203633264_30648.png\" alt=\"main window WPA\"></p>\n<p>但是这种方式有一些缺点,首先第一个是当数据量很大的时候, 每个图都要等很长一段时间, 尤其是很多图的信息其实并不是你想要的. 另外一个,虽然从他生成的一些图里面可以很明显地看到一些问题, 但是有很多时候, 我们需要自己对这些单条的 event log 做一些分析统计和处理, 显然在 GUI 里面就不是很方便了.</p>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><p>CLI 命令可以很方便的把我们需要的信息输出出来, 其基本命令格式也很简单,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i input.etl -o output.txt -a &lt;action_name&gt; [action_parameters]</div></pre></td></tr></table></figure></p>\n<p>这种形式的命令来获得指定的输出, 例如如果我想得到我们 process1 在时间 [368000000, 866000000], 这里的时间为距离开始的微秒数,这也就是运行了368s到866s之间的信息, 内的CPU disk的信息就可以用下面的命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i input.etl  -tle -o cpudisk.txt  -a cpudisk -exes process1 -times 368000000 866000000</div></pre></td></tr></table></figure></p>\n<p>这里我们加了 <code>-tle</code> 的参数, 是因为当长时间的运行的时候, 有的时候会漏掉一些event, 这时候会有下面类似的提示且不实际去执行我们的 action.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">2 Events were lost in this trace.  Data may be unreliable.</div><div class=\"line\">This is usually caused by insufficient disk bandwidth for ETW logging.</div><div class=\"line\">Please try increasing the minimum and maximum number of buffers and/or</div><div class=\"line\">the buffer size.  Doubling these values would be a good first attempt.</div><div class=\"line\">Please note, though, that this action increases the amount of memory</div><div class=\"line\">reserved for ETW buffers, increasing memory pressure on your scenario.</div><div class=\"line\">See &quot;xperf -help start&quot; for the associated command line options.</div></pre></td></tr></table></figure></p>\n<p>而加了参数之后就可以正常执行了.<br>我们也可以通过下面的命令看到很具体的哪些文件被哪些service 访问了, 这个访问的 offset 和 IO的很详细的信息.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xperf -i input.etl  -tle -o diskio_detail.txt  -a diskio -summary -detail -range 368000000 370000000</div></pre></td></tr></table></figure></p>\n<p>这样来自<code>-summary</code>这个参数的统计信息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Count,     Size,     SrvT,  R-Count,   R-Size,   R-SrvT,  W-Count,   W-Size,   W-SrvT,   IOTime, Filename</div><div class=\"line\">   3,        0,    95410,        0,        0,        0,        0,        0,        0,    95410, &quot;Unknown&quot;</div><div class=\"line\"> 805, 52690944,   175036,        0,        0,        0,      805, 52690944,   175036,   252839, C:\\kernel.etl</div><div class=\"line\">   7,    36864,     7565,        2,     8192,     5587,        5,    28672,     1978,     7877, D:\\$Mft</div><div class=\"line\">   9,    40960,      735,        0,        0,        0,        9,    40960,      735,     7059, C:\\$Mft</div><div class=\"line\">   1,    65536,      439,        0,        0,        0,        1,    65536,      439,     2477, C:\\Windows\\System32\\winevt\\Logs\\Security.evtx</div><div class=\"line\">   1,     4096,       87,        0,        0,        0,        1,     4096,       87,       87, D:\\$LogFile</div><div class=\"line\">   2,     8192,      233,        0,        0,        0,        2,     8192,      233,      233, C:\\ProgramData\\Microsoft\\Windows Defender\\Support\\MpWppTracing-05282020-040703-00000003-ffffffff.bin</div><div class=\"line\">   2,   208896,      956,        0,        0,        0,        2,   208896,      956,      956, C:\\$LogFile</div><div class=\"line\">   3,    12288,      623,        0,        0,        0,        3,    12288,      623,     3712, C:\\$BitMap</div></pre></td></tr></table></figure>\n<p>和来自于 <code>-detail</code> 的具体的某一个时间的输出信息:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">QD/I - Number of outstanding IOs at IO start time.</div><div class=\"line\">QD/C - Number of outstanding IOs at IO Completion time.</div><div class=\"line\">IBCB - Number of IOs that initialized before start time and completed before end time.</div><div class=\"line\">IBCA - Number of IOs that initialized before start time and completed after end time.</div><div class=\"line\">IACB - Number of IOs that initialized after start time and completed before end time.</div><div class=\"line\"></div><div class=\"line\">   IO Type, Start Time,   End Time,    IO Time,  Disk SrvT,    IO Size,  Byte Offset,  Pri, QD/I, QD/C, IBCB, IBCA, IACB,     Process Name ( PID), Disk, Filename</div><div class=\"line\"> DiskWrite,  368013044,  368013253,        209,        209, 0x00010000, 0x00b9523000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368013304,  368013686,        382,        382, 0x00010000, 0x00b9533000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368013728,  368013905,        177,        177, 0x00010000, 0x00b9543000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368013947,  368014301,        354,        354, 0x00010000, 0x00b9553000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368014344,  368014517,        173,        173, 0x00010000, 0x00b9563000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368014563,  368014738,        175,        175, 0x00010000, 0x00b9573000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div><div class=\"line\"> DiskWrite,  368014782,  368014958,        176,        176, 0x00010000, 0x00b9583000,    3,    0,    0,    0,    0,    0,           System (   4),    0, C:\\kernel.etl</div></pre></td></tr></table></figure></p>\n<p>也可以用 <code>-overlap</code> 命令获得IO们的 overlap 信息.</p>\n<p><img src=\"/images/20200617205359859_17129.png\" alt=\"io overlap\"></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>这里介绍了一些很基本的使用, 使用是一个很简单的事情, 重要的是如何一点点的找到思路,做哪些检测,然后来找到问题, 后面应该会结合一些实际案例来讲解一下 performance tuning 的思路.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-16 19:06:00</p>\n</blockquote>\n"},{"title":"十年回首[3/15]","url":"http://code4fun.me/2020/06/15/2020summary/","content":"<p>恍惚间, 在回首十年前的时候已经不是 200X 年了, 而已经是 201X 年了. 追溯十年前, 发生了很多变化. 最近有人和我打听我们高中的情况, 仔细一想发现原来已经毕业将近10年了, 人真是很容易失去对长时间的感知度.</p>\n<p>作为从事互联网/IT相关工作的人，在这篇十年回忆中也就主要想一下这方面的内容。大学开始差不多也是真正接触这方面的时间，虽然由于邻居家就是电脑店，或者说是复印店，主要是做一些文字处理方面的工作，例如做个传单或者是印发传单，也是在他那里见到了类似于活字印刷的印刷机。很大个的一个机器，然后印刷的时候根据排版挑选出一个个的字，然后按照顺序排好。大概就是下图这个样子，</p>\n<p><img src=\"/images/20200616220637962_3849.png\" alt=\"印刷机\"></p>\n<p>另外当然就是玩各种游戏，他家还卖各种盗版光盘，所以也就很方便地玩了各种游戏，暴力摩托，暗黑破坏神等。还有一个麻将游戏也是常玩的，印象中是一个纯键盘操作的麻将，就是吃牌胡牌都要按某个键，不过当时一直纳闷一个事情为什么有的时候吃了牌就胡不成了，有的时候就可以胡成，所以当时基本上就完全门清胡牌，现在懂了日麻的规则后，感觉当时玩的大概率是日本麻将。当时的flash还是火的一塌糊涂的东西，flash的小游戏，印象最深的就是东成西就里面的那首 i love You 歌曲，做的一个小动画。当时完全被洗脑了，看了又看，不过今天尝试在网上搜了一搜发现找不到相关的内容了，估计是早就淹没在历史长河里了。另外就是当时比较流行的游戏，传奇、大话、梦幻，都玩过一点，不过这种需要买点卡的游戏，作为一个十分抠门的人，基本上都在需要付费的时候停止了。后来包括自己家里买了电脑，可以上网了，基本上一直是游戏机这种待遇过来的。到了高中，宿舍有个搞计算机竞赛的同学，才知道原来这个还可以写程序，当然作为当时搞数学竞赛的人，是有些觉得这个东西比较low。但没想到，多年之后自己竟然以此为生，且乐此不疲。</p>\n<p>回想起，是怎么对计算机感起兴趣来的还真不好说。只记得，当初高考考了一个高不成低不就的分数，然后报志愿的时候就想了两个方向，数学和计算机。然而，阴差阳错的报了一个数学、计算机都不出名的学校。</p>\n<p>入学之后，逐渐更加广泛地接触了计算机与互联网。仍记得当时的网购主要还是用亚马逊多一些，因为可以货到付款，一个很好记的 z.cn，没想到如今已经没落到大范围的业务都退出中国了。似乎这时候也是一个互联网飞速发展的年代，从最开始的不信任，到后面基本各种东西都在上面买。在13年初，在闲鱼上买了第一个东西，当时还没有进入中国的 Kindle，只能在一些盗版网站上下载电子书，然后在传过去，如今大部分网站都已经关闭了。</p>\n<p><img src=\"/images/20200616221729681_14254.png\" alt=\"闲鱼\"></p>\n<p>当时对于盗版大家还看得比较轻，学校PT盛行，各种热门资源的下载速度基本就是硬盘的读写速度，不限速的情况下就直接吧电脑卡死了。如今，大家对版权意识也比较强，PT站也就基本被限定的很死，以及4G，5G的发展，基本上都是在线看了。之前十分火的优酷和土豆两个网站合并了，然而现在也基本上听不到什么声音了，反而腾讯又入股爱奇艺，目前top 2的两个视频网站，基本上就走到了一起。</p>\n<p>那时候最常用的浏览器chrome 在国内还是个偏小众的浏览器，如今已经是占有将近70%份额的 new evil。反而，我又投向了目前只有不到10%的 firefox，有的时候，会有一种比较别扭的想法，虽然自己的力量比较小，但还是近自己所能去组织世界变得更坏。这是一个来自维基百科的到2017年的市场份额图。</p>\n<p><img src=\"/images/20200616223740434_16287.png\" alt=\"statecounter\"></p>\n<p>聊天工具也从当初的QQ换到了如今的微信，虽然没有逃出腾讯的魔爪。中间大家通知的时候，还是用飞信，毕竟发短信不花钱，所以当初在学校想用的开心，就是只能用移动卡。不过，似乎当初的一些表达方式还是保留着，例如省略号的使用，只不过从12个点变到了现在的三个点。</p>\n<p><img src=\"/images/20200616224608267_13407.png\" alt=\"wechat moment\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-15 20:45:05</p>\n</blockquote>\n"},{"title":"我理解的搜索引擎[2/15]","url":"http://code4fun.me/2020/06/10/search_engine/","content":"<p>如果说移动化对于哪个互联网产业冲击最大, 无疑是搜索引擎, 从百度的市值就可以明显的看到,从之前BAT的王者, 到现在一个拼多多等于两度.<br><img src=\"/images/20200610211952148_26740.png\" alt=\"baidu stock\"></p>\n<p>由于越来越多的内容封锁在自己的领域(以微信公众号为主), 以及轰轰烈烈的去Web化(必须用移动端APP访问才可以), 属于搜索引擎的时代似乎过去了, 但搜索的时代一直存在, 从微信的搜一搜到头条搜索再到阿里的神马搜索, 以及 Elastic Search 居高不下的股价, 无不说明着搜索一直在.</p>\n<p><img src=\"/images/20200610212127327_10765.png\" alt=\"elastic stock\"></p>\n<p>从一般意义上来说搜索引擎分为通用搜索引擎, 譬如 Google, Bing, Baidu之类的, 还有专用的搜索引擎, 例如各种应用内搜索. 对于搜索引擎的一个重点就是其索引的文档的数量多少, 只有索引了足够多的文档, 才可能根据用户输入的 query 得到最好的匹配. 但现在随着封闭化的出现, 通用搜索引擎所能索引到的好文档数量肯定是在减少.</p>\n<p>从分布式的实现来说, 我们可以根据分片方式将其分成 term-shard 和 document-shard, 也就是在做分布式的时候, 我们是按照不同的 term 来划分, 还是按照不同的文档来划分. 前者肯定是更加省时的, 因为一次查询就可以把所有的文档都查询到, 但是其不易扩展, 当一个文档更新的时候, 所有的分片理论上都需要更新, 另外就是不稳定, 肯定有些词会相比起来更加热门一些, 所以到这些词的 query 也就更多一些, 而对这些机器的负载也就更大, 所以也就更不稳定. 当然我们可以给那些热门词, 更多的 replica 从而降低每天机器的负载, 但是由于一些突发时间造成某些词的搜索量急剧增加的情况是没法解决的, 例如 covid-2019, 这个词根本没法预测到. 所以现在大家都比较喜欢用的方法是 document-shard, 就是按照 document 来做分片, 每台机器上包含一定document的所有的 term, 这样一来每次 query 都要到每台机器上都去执行一遍, 然后再做一个合并才能得到比较好的结果, 相比起来这种的 cost 就会大一些, 当然相应的好处就是, 某台机器挂了, 对于 query 结果的影响比较小, 做更新和扩展也容易的多.</p>\n<p><img src=\"/images/20200610213713675_12406.png\" alt=\"covid google trends\"></p>\n<p>而在做查询的时候, 都用一个叫做 index 的文件. 一般使用的都是倒排表, 也即 inverted index. 正排就是指的那些从文档到其包含的 term 的映射关系, 而倒排就是反过来是从term 到文档的映射. 这样一个查询动作就变得很简单了, 就是找到相应的 term, 然后获得其所对应的所有的文档(一般称作 posting), 然后将这些posting 做一个与操作就好了. 做与操作的一个最简单的方法当然是直接用二进制的位操作, 但显然对于我们那么大数量文档情况是不划算的, 另外一个比较朴素的想法就是如果两边的posting都是排序的的话, 那么我们只需要遍历一遍就可以解决问题了.现在基本上也都是这么做的, 也就是对于整个index 包含的所有文档做一个排序, 然后依据此排序将其填到每个term的posting中去. 当然这里的排序就可以做一些操作, 通常我们可以把质量比较好的文档放在前面, 这是由于对于大部分查询来说, 我们不可能把所有匹配的结果都返回, 大概率会查一定程度就结束了, 所以按照质量排序的话, 质量好的文档就更可能被用户看到</p>\n<p>一个文档能被用户看到, 首先就是需要被match出来. 普遍有两种match方法, 一种是朴素的方法, 就是根据 term 去查找包含这个term的文档, 然后做and/or 操作, 当然为了提高准确性, 在 match 之前, 我们可能对 term 做一些拼写检查和理解之类的, 例如把 microsft 修改成 microsoft 之类的. 但是有些情况下这种就会遇到一个比较尴尬的情形, 假设我们搜索 “某个人的生平”, 但是对于那些介绍了这个人但是文章中没有出现 “生平”字样的文档, 都无法正确的match到, 对于这种的话一般就是借助于神经网络将这些词和文档都转换成向量(vector), 然后做匹配. 另外目前还有一个比较难以处理的搜索的类型, 譬如”北京的餐馆, 不要日料”, 按照上面的搜索方式, 那么大概率查询结果都是北京的日料店, 这种只能依靠自然语言理解水平的进一步提高了.<br><img src=\"/images/20200610220445942_32398.png\" alt=\"google result\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-10 21:08:04</p>\n</blockquote>\n"},{"title":"小小的Flag, 六月连更15篇 [1/15]","url":"http://code4fun.me/2020/06/09/flag/","content":"<p>好久没有写博客了, 没想到最近新更新的一篇就是flag, 就如标题, 整个六月份要更15篇文章.</p>\n<p>最近总是有一种奇怪的感觉, 那就是虽然感觉每天忙忙碌碌的, 但是似乎又什么都没有做, 虽然甚至因此重新开始时间记录, 用Toggle也记录了将近一个月的时间, 每天的纯工作时间都是在8小时以上, 但往回想的时候, 感觉什么都没有做, 这就让人有些焦虑了.</p>\n<p>另外就是, TODO 里面记录了几篇想写的文章, 草稿箱里也放着好几篇甚至日期是19年的半成品. 所以想逼自己一把, 把这些补上.</p>\n<p>另一方面,就是之前看了挺多书的, 也一直想写个读书笔记, 还有些想着等订的 Remarkable 到了再读的书, 本来以为六七月份就可以到了, 但是因为疫情,估计要到九月份才可以到了, 这也是比较蛋疼的一件事情. 所以不能往后再拖了, 这玩意就不知道要拖到什么时候了.</p>\n<p>当然, 还有就是感觉最近学到或者了解到的新知识少了很多, 本来是打算学习一下日语, 但是背了几天平假名之后就放弃了. 也许逐渐用 Rust 代替 Python, 成为日常使用的语言不错, 虽然这个写起来肯定要痛苦很多, 但是就像刚开始从全拼过渡到双拼的时候也很痛苦, 但是习惯了也就很舒服了.</p>\n<p>之前一直比较难的 Hexo 插图片问题, 突然想到既然现在用了 Github 的 Workflow 来自动部署, 由于现在再用 VNote 写博客, 而当复制一个images 过来的时候他会默认把图片放到 <code>images</code> 目录下, 那我直接把_post 目录下的 images 目录复制到 source 目录下, 然后在文章里面的路径前面加一个<code>/</code> 就可以了, 虽然这样本地预览会有问题, 但是影响也不太大.</p>\n<p><img src=\"/images/20200609220110721_19129.png\" alt=\"test\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-06-09 21:06:48</p>\n</blockquote>\n"},{"title":"个人思绪汇集","url":"http://code4fun.me/2020/05/09/note_note/","content":"<p>随着互联网技术的发展, 我们不断在网上留下各种线索, 可能在豆瓣里标记了一本刚看过的书, 又在微博上针对于当下热点新闻发出了自己的评论, 但是这些分散到四处, 就比较烦了. 好在 telegram channel 是一个比较开发的平台, 且 telegram 上有各种各样的 Bot. 这里借助 <a href=\"http://rsshub.app/\" target=\"_blank\" rel=\"external\">RSSHub</a> 和 telegram 的 <a href=\"https://github.com/iovxw/rssbot\" target=\"_blank\" rel=\"external\">rssbot</a> 将个人的相关信息都推送到 telegram channel 里面.</p>\n<h2 id=\"RSSHub\"><a href=\"#RSSHub\" class=\"headerlink\" title=\"RSSHub\"></a>RSSHub</h2><p>此部分相当于是我们的基础, 里面有广大网友们开发的各种神奇的路由. 由于很多服务有反爬虫的设置, 所以我们为了更好的使用, 最好是自己在服务器上搭建.根据官方文档, 操作起来也比较简单, 这里就不赘述了. 这里有各种部署方案, <a href=\"https://docs.rsshub.app/install/\" target=\"_blank\" rel=\"external\">install</a>.</p>\n<p>以下是我用的几个RSS订阅：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Code4Fun (http://code4fun.me/atom.xml)</div><div class=\"line\">Twitter Likes - tangtanghill (http://rsshub.app/twitter/likes/tangtanghill)</div><div class=\"line\">hillshan 的 Twitter (http://rsshub.app/twitter/user/tangtanghill)</div><div class=\"line\">zhangzhishan&apos;s GitHub repositories (http://127.0.0.1:1200/github/repos/zhangzhishan)</div><div class=\"line\">zhangzhishan’s starred repositories (http://rsshub.app/github/starred_repos/zhangzhishan)</div><div class=\"line\">呼呼呼山的微博 (http://127.0.0.1:1200/weibo/user/2622464373)</div></pre></td></tr></table></figure>\n<h2 id=\"RSSBot\"><a href=\"#RSSBot\" class=\"headerlink\" title=\"RSSBot\"></a>RSSBot</h2><p>为了可以把单独的RSS信息聚合到一个 channel, 这里找了一个 telegram 的bot订阅所有信息, 然后推送到相关的 channel. Bot的话由于一直在断断续续的学习 Rust, 所以就选了个用 Rust 写的. 不过确实用起来还是很稳定. 由于官方, 直接由 build 好的, 直接下载下来二进制文件就可以了.</p>\n<p>我们只需要根据<a href=\"https://core.telegram.org/bots#3-how-do-i-create-a-bot\" target=\"_blank\" rel=\"external\">telegram 官方文档</a>, 建立一个bot, 然后设置几个相应的命令就好了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/rss       - 显示当前订阅的 RSS 列表</div><div class=\"line\">/sub       - 订阅一个 RSS: /sub http://example.com/feed.xml</div><div class=\"line\">/unsub     - 退订一个 RSS: /unsub http://example.com/feed.xml</div><div class=\"line\">/export    - 导出为 OPML</div></pre></td></tr></table></figure>\n<p><code>/sub</code> 命令除了直接订阅到Bot外, 当你把该Bot加到某个 Channel 之后, 可以通过 <code>/sub channelid url</code> 这个命令把通知直接订阅到某个 Channel中去.</p>\n<p><img src=\"/images/20200509220713780_11570.png\" alt=\"sub to channel\"></p>\n<p>这里当我们需要 ChannleID, 这个的获得也非常方便, 我们可以随便转一条 Channel 中的内容到 <a href=\"https://t.me/getidsbot\" target=\"_blank\" rel=\"external\">@getidsbot</a> 即可, 结果如下图.</p>\n<p><img src=\"/images/20200509220950847_16848.png\" alt=\"getidsbot\"></p>\n<p>这里就可以得到我们的ID了. 然后就可以方便的把RSS更新 push 我们的 channel 了.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-05-09 19:59:18</p>\n</blockquote>\n"},{"title":"windows terminal configuration","url":"http://code4fun.me/2020/05/09/windows terminal/","content":"<h2 id=\"Split-pannel\"><a href=\"#Split-pannel\" class=\"headerlink\" title=\"Split pannel\"></a>Split pannel</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; &quot;command&quot;: &quot;splitHorizontal&quot;, &quot;keys&quot;: [ &quot;alt+shift+-&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &quot;splitVertical&quot;, &quot;keys&quot;: [ &quot;alt+shift+plus&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;:&quot;down&quot; &#125;, &quot;keys&quot;: [ &quot;alt+down&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;:&quot;left&quot; &#125;, &quot;keys&quot;: [ &quot;alt+left&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;:&quot;right&quot; &#125;, &quot;keys&quot;: [ &quot;alt+right&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;moveFocus&quot;, &quot;direction&quot;:&quot;up&quot; &#125;, &quot;keys&quot;: [ &quot;alt+up&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;:&quot;down&quot; &#125;, &quot;keys&quot;: [ &quot;alt+shift+down&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;:&quot;left&quot; &#125;, &quot;keys&quot;: [ &quot;alt+shift+left&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;:&quot;right&quot; &#125;, &quot;keys&quot;: [ &quot;alt+shift+right&quot; ] &#125;,</div><div class=\"line\">&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;resizePane&quot;, &quot;direction&quot;:&quot;up&quot; &#125;, &quot;keys&quot;: [ &quot;alt+shift+up&quot; ] &#125;,</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-05-09 11:59:18</p>\n</blockquote>\n"},{"title":"Use windbg to check memory leak","url":"http://code4fun.me/2020/04/10/windbg for memory leak/","content":"<p>From:<br><a href=\"http://blogs.msdn.com/b/paullou/archive/2011/06/28/debugging-managed-code-memory-leak-with-memory-dump-using-windbg.aspx\" target=\"_blank\" rel=\"external\">http://blogs.msdn.com/b/paullou/archive/2011/06/28/debugging-managed-code-memory-leak-with-memory-dump-using-windbg.aspx</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Set symbols File &gt;&gt; Symbol File path</div><div class=\"line\">SRV*c:\\symbols*http://msdl.microsoft.com/download/symbols</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.reload</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.loadby sos clr or .loadby sos mscorwks!</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#optional</div><div class=\"line\">!VerifyHeap</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Find largest GC Heapsize - leak is possible if &gt; 1gb or so</div><div class=\"line\">!EEHeap</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Find type with the largest size</div><div class=\"line\">!dumpheap -stat</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#put type here - find type with the largest size</div><div class=\"line\">!dumpheap -type [TYPE]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#put largest result here</div><div class=\"line\">!do [ADDRESS]</div></pre></td></tr></table></figure>\n<p>Loop above as needed, this is where it gets a bit fuzzy.  Look for repeating patterns and high threads</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#get a count of thread on the thing.  Find a high thread count</div><div class=\"line\">!threads</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Pick a thread to look at it&apos;s stack - alternatively you can rum ~*kb for all thread stacks</div><div class=\"line\">~[THREAD ID]s</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#show the stack</div><div class=\"line\">Kb</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2020-04-10 11:50:34</p>\n</blockquote>\n"},{"title":"Windows sysinternals tools","url":"http://code4fun.me/2019/12/25/sysinternals/","content":"<p>微软在官网上提供了一系列的具有多种用途的小工具, 这里就罗列介绍一部分有用或者有意思的小工具, 详细内容可以参考<a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/\" target=\"_blank\" rel=\"external\">官方主页</a>. 分类也基本参照官网, 但是只选取了其中有意思的部分.</p>\n<h2 id=\"文件与硬盘相关\"><a href=\"#文件与硬盘相关\" class=\"headerlink\" title=\"文件与硬盘相关\"></a>文件与硬盘相关</h2><h3 id=\"disk-usage\"><a href=\"#disk-usage\" class=\"headerlink\" title=\"disk usage\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/du\" target=\"_blank\" rel=\"external\">disk usage</a></h3><p>一个十分简单的命令行工具,给定路径可以迭代输出路径下所有文件夹的大小. 也可以不迭代或者是给定迭代层数.<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343723_20191225165345511_27540.png\" alt=\"du\"></p>\n<h3 id=\"contig\"><a href=\"#contig\" class=\"headerlink\" title=\"contig\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/contig\" target=\"_blank\" rel=\"external\">contig</a></h3><p>为了优化性能, 我们会对硬盘做一些去碎片化的工作. 而conitg这个工具则主要是针对单个文件的.</p>\n<p>Contig is a single-file defragmenter that attempts to make files contiguous on disk. Its perfect for quickly optimizing files that are continuously becoming fragmented, or that you want to ensure are in as few fragments as possible.</p>\n<h3 id=\"pendmove\"><a href=\"#pendmove\" class=\"headerlink\" title=\"pendmove\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/pendmoves\" target=\"_blank\" rel=\"external\">pendmove</a></h3><p>用了 <code>movefile</code> 命令可以使得这次操作会在下次启动的时候生效, 而<code>pendmoves</code>则可以输出所有待move的文件.</p>\n<h2 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h2><h3 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/whois\" target=\"_blank\" rel=\"external\">whois</a></h3><p>get whois information from whois.markmonitor.com, for example, use <code>whois64.exe bing.com</code> can get information below.<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343717_20191225163408852_17579.png\" alt=\"whois\"></p>\n<h3 id=\"pipelist\"><a href=\"#pipelist\" class=\"headerlink\" title=\"pipelist\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/pipelist\" target=\"_blank\" rel=\"external\">pipelist</a></h3><p>列出所有的 named pipes.</p>\n<h2 id=\"进程相关\"><a href=\"#进程相关\" class=\"headerlink\" title=\"进程相关\"></a>进程相关</h2><h3 id=\"vmmap\"><a href=\"#vmmap\" class=\"headerlink\" title=\"vmmap\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap\" target=\"_blank\" rel=\"external\">vmmap</a></h3><p>分析给定的进程的虚拟和物理内存, 可以看到每一类虚拟内存和实际物理内存的大小.<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343726_20191225170315138_31452.png\" alt=\"vmmap\"></p>\n<h3 id=\"pstools\"><a href=\"#pstools\" class=\"headerlink\" title=\"pstools\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/pstools\" target=\"_blank\" rel=\"external\">pstools</a></h3><p>pstools 是一个集合, 里面包含各种工具, 主要是这些工具可以方便的在远程机器上执行, 只需要给定机器名和登录所需的用户名密码. 一些参见下面: </p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\" target=\"_blank\" rel=\"external\">psexec</a> - execute processes remotely</li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psfile\" target=\"_blank\" rel=\"external\">psfile</a> - shows files opened remotely</li>\n<li>psgetsid - display the sid of a computer or a user</li>\n<li>psinfo - list information about a system</li>\n<li>psping - measure network performance</li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/pskill\" target=\"_blank\" rel=\"external\">pskill</a> - kill processes by name or process id</li>\n<li><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/pslist\" target=\"_blank\" rel=\"external\">pslist</a> - list detailed information about processes</li>\n<li>psloggedon - see who’s logged on locally and via resource sharing (full source is included)</li>\n<li>psloglist - dump event log records</li>\n<li>pspasswd - changes account passwords</li>\n<li>psservice - view and control services</li>\n<li>psshutdown - shuts down and optionally reboots a computer</li>\n<li>PsSuspend - suspends processes<h3 id=\"process-explorer\"><a href=\"#process-explorer\" class=\"headerlink\" title=\"process explorer\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer\" target=\"_blank\" rel=\"external\">process explorer</a></h3>一个很强大的进程管理器, 可以把进程以树的形式展示出来.<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343728_20191226150020705_11738.png\" alt=\"process explorer\"><h2 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h2><h3 id=\"sysmon\"><a href=\"#sysmon\" class=\"headerlink\" title=\"sysmon\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\" target=\"_blank\" rel=\"external\">sysmon</a></h3>System Monitor (Sysmon) 是一个windows service. 安装后会输出详细的进程创建, 网络连接等信息.<h2 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h2><h3 id=\"rammap\"><a href=\"#rammap\" class=\"headerlink\" title=\"rammap\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/rammap\" target=\"_blank\" rel=\"external\">rammap</a></h3>可以利用此工具看到详细的不同内存的统计信息, 每个文件映射到内存中的size,乃至每一个物理内存对应哪些实际文件, 或者某文件在物理内存中的索引.<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343724_20191225170051070_7770.png\" alt=\"rammap\"><h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2><h3 id=\"testlimit\"><a href=\"#testlimit\" class=\"headerlink\" title=\"testlimit\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/testlimit\" target=\"_blank\" rel=\"external\">testlimit</a></h3>一个可以用来占据内存,handles, processes, threads等的工具. 需要搭配psexec使用, 例如: <code>.\\PsExec.exe -sid Testlimit64.exe -r  1000 -c 1</code><br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343727_20191225174041767_2182.png\" alt=\"testlimit\"></li>\n</ul>\n<p>reserve 1000 MB memory, reverse次数为1.</p>\n<h3 id=\"BlueScreen-Screen-Saver\"><a href=\"#BlueScreen-Screen-Saver\" class=\"headerlink\" title=\"BlueScreen Screen Saver\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/bluescreen\" target=\"_blank\" rel=\"external\">BlueScreen Screen Saver</a></h3><p>传统windows崩溃页面作为屏保.</p>\n<h3 id=\"zoom-it\"><a href=\"#zoom-it\" class=\"headerlink\" title=\"zoom it\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit\" target=\"_blank\" rel=\"external\">zoom it</a></h3><p>利用快捷键放大屏幕, 然后也可以做一些标注.</p>\n<h3 id=\"hex2dec\"><a href=\"#hex2dec\" class=\"headerlink\" title=\"hex2dec\"></a><a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/hex2dec\" target=\"_blank\" rel=\"external\">hex2dec</a></h3><p>十分方便的十进制与16进制转换,参看截图.</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577343720_20191225164242847_4264.png\" alt=\"hex2dec\"></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-12-25 09:58:00</p>\n</blockquote>\n"},{"title":"In memory index","url":"http://code4fun.me/2019/07/15/in memory index/","content":"<h2 id=\"Some-think\"><a href=\"#Some-think\" class=\"headerlink\" title=\"Some think\"></a>Some think</h2><p>用skip list存储posting的话是可以实现方便的添加和删除元素的,其效率的话也算比较高,相当于每次做一个二分查找.但是这样的话可能空间占用会多一些.</p>\n<p>根据理论计算是对于<code>n</code>个元素的一个skiplist 需要少于<code>2n</code>个node 就可以. 由于一个node节点是原来的4倍(由于一个地址长度是8,然后一个int 是4, 那么对齐后就是16),所以整体来说就是8倍.</p>\n<p>An Exploration of Postings List Contiguity in Main-Memory Incremental Indexing 这篇文章介绍了如何在内存中存放postings, 如果在内存中隔得比较远的话,会影响性能,但是如果连续的话,需要一些控制,这里给了一个 tradeoff. 也许对于目前也有一些指导意义.</p>\n<p>Fast Incremental Indexing for Full-Text Information Retrieval 文章提到说，在他们的情形中 over 90% of the inverted lists are less than 1000 bytes (in their compressed form), and account for less than 10% of the total inverted file size. Furthermore, nearly half of all lists are less than 16 bytes. This means that many inverted lists will never grow after their initial creation. Therefore, they should be allocated in a space efficient manner。 这个启发我们在做设计的时候要首先考虑 index 的内容等特性。文章中设计的inverted list不是 a single object of the exact size，而是 using a range of fixed size objects，here the sizes range from 16 to 8192 bytes by powers of 2 (i.e., 16, 32, 64, …, 8192). 在create的时候，分配可以装下的最小的 size。当超过这个size之后，分配一个下一档的内存，然后复制过去，free掉当前的内存。当达到最大object size，不是再扩大这个内存size，而是生成一个 8192的 linked list object，然后把这个的尾指针之过去。感觉在一定程度上类似于STL里面的Vector的设计。<br>The largest objects are each allocated intheir own physical segment and managed by a large object pool. The smallest (16 byte) objects are stored in 4 Kbyte physical segments, 255objectspersegment, and managed by a small object pool.  The remaining objects are stored in 8 Kbyte physical segments, where each segment stores objects of only one size, and contains as many objects of that size as will fit. These objects are managed by a medium object pool。</p>\n<p>是否需要支持delete document. 或者说现在对于document的delete是通过block doc完成的吗?</p>\n<p>理论上来说, in memory index的部分应该是比较 hot 的doc,或者说是 static rank 分数比较高的那部分doc.</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577672046_20190617144358589_6490.png\" alt=\"\"></p>\n<p>看了一个google 的设计文档,发现我们的设计和他们很相似啊. <a href=\"https://static.googleusercontent.com/media/research.google.com/en//people/jeff/WSDM09-keynote.pdf\" target=\"_blank\" rel=\"external\">google talk about index</a></p>\n<p>规模是在设计中必须考虑的一个问题.</p>\n<h2 id=\"in-memory-index-format-from-papers\"><a href=\"#in-memory-index-format-from-papers\" class=\"headerlink\" title=\"in memory index format from papers\"></a>in memory index format from papers</h2><p>Here are several papers I read about in-memory index structure. Nearly all paper considered on posting list dynamic extending, but in which kind of method, I think we need to do some experiments according to our index. And posting lists are implemented as arrays for data continuous.</p>\n<h3 id=\"Earlybird-Real-Time-Search-at-Twitter\"><a href=\"#Earlybird-Real-Time-Search-at-Twitter\" class=\"headerlink\" title=\"Earlybird: Real-Time Search at Twitter\"></a>Earlybird: Real-Time Search at Twitter</h3><p>This paper designed an in-memory structure optimized for single-writer, multiple-reader. The index can be divided into:</p>\n<ul>\n<li>Term dictionary(a simple hash table,  uses open addressing on primitive arrays)</li>\n<li>Term data(held in parallel arrays)<ul>\n<li>number of postings for the term</li>\n<li>pointer to the tail of the postings list</li>\n</ul>\n</li>\n<li>Active index<ul>\n<li>Each posting is a 32-bit integer(24 bits for document-id, 8 for term position)</li>\n<li>Stored in an array, cache friendly</li>\n<li>allocation of space for postings lists.<ul>\n<li>Postings lists vary significantly in size, since term and document frequencies are Zipfian</li>\n<li>create four separate “pools” for holding postings.</li>\n<li>In each pool, the slice sizes are fixed: they are 2^1, 2^4, 2^7, and 2^11</li>\n<li>The first time a term is encountered, a postings list is created in the first pool (i.e. holds 2 elements)</li>\n<li>Each slice (except 2^1) reserves the first 32-bits for a pointer to the previous slice</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Concurrency<ul>\n<li>Limit to a single writer per index segment for simplicity</li>\n<li><code>maxDoc</code> is used to divide write and read process. Readers ignore docs encountered greater than maxDoc.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241237_20190711110910258_3754.png\" alt=\"slice structure\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241239_20190711110935498_13509.png\" alt=\"concurrency\"></p>\n<p>After achieve to a threashold, convert index from a write-friendly structure into an optimized read-only structure. Postings are divided into “long” and “short”(less than 1000). For long postings, use a block-based compression scheme similar in spirit to PForDelta and the Simple9 family of techniques.</p>\n<h3 id=\"Fast-Incremental-Indexing-for-Full-Text-Information-Retrieval\"><a href=\"#Fast-Incremental-Indexing-for-Full-Text-Information-Retrieval\" class=\"headerlink\" title=\"Fast Incremental Indexing for Full-Text Information Retrieval\"></a>Fast Incremental Indexing for Full-Text Information Retrieval</h3><p>This paper mentioned in their case, over 90% of the inverted lists are less than 1000 bytes (in their compressed form), and account for less than 10% of the total inverted file size. Furthermore, nearly half of all lists are less than 16 bytes. This means that many inverted lists will never grow after their initial creation. Therefore, they should be allocated in a space efficient manner。It designed an inverted list struct using a range of fixed size objects, not a single object of the exact size，here the sizes range from 16 to 8192 bytes by powers of 2 (i.e., 16, 32, 64, …, 8192). 在create的时候，分配可以装下的最小的 size。当超过这个size之后，分配一个下一档的内存，然后复制过去，free掉当前的内存。当达到最大object size，不是再扩大这个内存size，而是生成一个 8192的 linked list object，然后把这个的尾指针之过去<br>The largest objects are each allocated intheir own physical segment and managed by a large object pool. The smallest (16 byte) objects are stored in 4 Kbyte physical segments, 255objectspersegment, and managed by a small object pool.  The remaining objects are stored in 8 Kbyte physical segments, where each segment stores objects of only one size, and contains as many objects of that size as will fit. These objects are managed by a medium object pool。</p>\n<h3 id=\"An-Exploration-of-Postings-List-Contiguity-in-Main-Memory-Incremental-Indexing\"><a href=\"#An-Exploration-of-Postings-List-Contiguity-in-Main-Memory-Incremental-Indexing\" class=\"headerlink\" title=\"An Exploration of Postings List Contiguity in Main-Memory Incremental Indexing\"></a>An Exploration of Postings List Contiguity in Main-Memory Incremental Indexing</h3><p>This paper put all index into memory, but they only do some experiment for index speed and query evaluation after indexing the entire collection. It has no work in serve and index at the same time.  The structure is:</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241242_20190711112707467_4053.png\" alt=\"index structure\"></p>\n<p>Data is first added into each buffer map. When the docid buffer for a term fills up,  “flush” all buffers associated with the term, compressing the docids, term frequencies, and term positions into a contiguous block of memory as follows:<br><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241244_20190711113633195_15153.png\" alt=\"block package\"></p>\n<p>D represents data for docid(compressing using PForDelta, blcok size b = 128), F represents TF, P_i for postion.</p>\n<p>To achieve increasingly better approximations of contiguous postings lists, this paper propose a approach of changing the memory allocation policy for the buffer maps.<br>Whenever the docid buffer for a term becomes full (and thus compressed and flushed to the segment pool),  expand that term’s docid and tf buffers by a factor of two (still allowing the term positions buffer to grow as long as necessary). This means that after the first segment of a term is flushed, new docid and tf buffers of length 2b replace the old ones; after the second flush, the buffer size increases to 4b, and then 8b, and so on. To prevent buffers from growing indefinitely, we set a cap on the length of docid and tf buffers. That is, if the cap is set to 2^mb, then when the buffer size for a term reaches that limit, the buffer is broken down into 2^m segments, each segment is compressed as described earlier, and all 2^m segments are written at the end of the segment pool contiguously.</p>\n<h3 id=\"LSII-An-indexing-structure-for-exact-real-time-search-on-microblogs\"><a href=\"#LSII-An-indexing-structure-for-exact-real-time-search-on-microblogs\" class=\"headerlink\" title=\"LSII: An indexing structure for exact real-time search on microblogs\"></a>LSII: An indexing structure for exact real-time search on microblogs</h3><p>Log-Structured Inverted Indices (LSII), is similar in spirit to the Log-Structured Merge-Tree: It contains a sequence of inverted indices I0,I1,…,Im with exponentially increasing sizes, as illustrated in Figure below. When a new document arrives, it is first inserted into the smallest inverted index I0 – this incurs little overhead given the tiny size of I0. When the number of documents indexed by I0 exceeds a certain threshold, we merge the entries of I0 into I1, and we empty I0; in turn, the entries in I1 are flushed into I2 when I1 gets to a certain size, and so on. This considerably reduces the amortized update cost per document, since (i) each document can be only involved in a small number of index mergers, and (ii) the index mergers can be performed in a much more efficient manner than inserting all documents into an inverted index one by one.<br>For each inverted index Ii, it maintains a hash table that maps the document id indexed by Ii to a triplet$<sig(d),vd,tsd>$. Implement the posting lists in $I_1, …, I_m$ as sorted arrays.<br>During query processing, all inverted indices are scanned simultaneously using the Threshold Algorithm.</sig(d),vd,tsd></p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241245_20190711135448028_21865.png\" alt=\"structure\"></p>\n<h3 id=\"On-main-memory-flushing-in-microblogs-data-management-systems\"><a href=\"#On-main-memory-flushing-in-microblogs-data-management-systems\" class=\"headerlink\" title=\"On main-memory flushing in microblogs data management systems\"></a>On main-memory flushing in microblogs data management systems</h3><p>Focus on how to flush to disk. This paper proposes kFlushing policy that exploits popularity of top-k queries in microblogs to smartly select a subset of microblogs to flush. kFlushing is mainly designed to increase memory hit ratio. To this end, it identifies and flushes in-memory data that does not contribute to incoming queries.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-07-15 11:48:29</p>\n</blockquote>\n"},{"title":"台湾游记","url":"http://code4fun.me/2019/07/03/taiwan/","content":"<p>这种游记当然是按时间顺序走起，也可以算是个流水账。在考虑到去哪之前，让人纠结了很久。从去日本、巴厘岛、台湾等经过多方选择，最终以可以方便的说汉语这个原因，选择了去台湾。去了之后，发现讲起话来真的舒服了很多，那边的人也都很热情，很不错。另外，那声谢谢的语调真的非常有意思。</p>\n<h2 id=\"2019-06-22-周六\"><a href=\"#2019-06-22-周六\" class=\"headerlink\" title=\"2019-06-22 周六\"></a>2019-06-22 周六</h2><p>今天从苏州开始出发，先做火车到虹桥火车站，然后从虹桥做地铁到浦东机场，然后托运行李，安检，过海关，一路很快很方便。</p>\n<p>飞机直接到桃园机场，然后直接拿国内的银联卡取现，招行的5‰的手续费，10元起步，取了一万新台币，大概12元左右的新台币，之前为了免除境外取现的手续费，还办了一张成都银行的金卡，不过临出发前找了很久也没有找到，一想，大概率不用取很多现金，所以也就罢了。</p>\n<p>取完现金去买悠游卡，旁边有义工，态度十分赞。不过也指出了一个问题，由于打算是到了直接来台南，以及出发前没怎么做攻略，也就直接想当然的买了台北到台南的高铁。然后事实上，离机场比较近的是桃园高铁站，且是在从台北到台南的必由之路上，所以情况就比较尴尬的是要先北上，然后再做高铁南下。幸好时间比较充足，也就如此了。</p>\n<p>经过一番折腾在晚上10点多到了台北，然后把行李放到酒店，开始去外面吃夜宵。逛了两家店，吃了担仔面，蒜蓉猪脚和猪心乌冬面。不得不说这边的饭的量都比较mini，不过也正好可以多尝试几样。这边的天气真的是闷热，这么晚在路上走了一段都是一身汗，路边全家一瓶肥宅快乐水真是爽。吃完回到住处已经12点多了，不过还是看了一会电视。没想到台湾地方虽然不大，电视台还挺多的，从头到尾扫了一遍估计有100多个台，虽然其中会有一些国外的像BBC，德国之声之类的。</p>\n<h2 id=\"2019-06-23-周日\"><a href=\"#2019-06-23-周日\" class=\"headerlink\" title=\"2019-06-23 周日\"></a>2019-06-23 周日</h2><p>第二天，住的饭店早餐是给的旁边711的60台币的券以及旁边咖啡店的一张饮品券，也蛮有意思的。随便拿了几样结果正好118，也是够神奇的。然后就开始了早餐觅食。台南应该算是一个比较小的城市，完全可以靠步行。路两边的高的楼也不多，大部分只有三四层这样子。有一些商场的楼会很高，例如14、5层，逛了几家商场感觉这边商场和国内的布局完全不一样，很高但是单层面积很小，感觉基本上扶梯在最中间，然后周围一圈大概有四五家店这样子。<br>看路边的广告牌，有挺多补习班之类的，从国小到高中。除了这些之外，还有一种国内不常见的，是公职考试培训，像什么去电力、水利系统之类的，然后还配上类似是考取公职，赢取白富美，走上人生巅峰之类的广告语。早饭吃了哬仔煎和一些记不清的东西了。除此之外，街边很多卖槟榔的店，感觉那边的民众对槟榔热情很高啊。不过比较搞笑的是，在某个路边有个宣传画上面有个介绍什么四大坏人或什么记不太清了的，竟然是毒品、槟榔、烟、酒。难道这个真的是会上瘾的?</p>\n<p>中午吃了个海鲜丼，和国内平时吃的牛丼差别还挺大的。逛了逛商场，然后就转火车到新左营，然后从那里做垦丁快线前往垦丁。到达垦丁大概是傍晚，去定的酒店入住之后，出门就逛了起来。垦丁大街也是蛮有意思的，晚上的时候，相当于一整条街上路两边都是小摊，各种店，很多店都写着支持微信或者支付宝，扫了个境外红包还可以。</p>\n<h2 id=\"2019-06-24-周一\"><a href=\"#2019-06-24-周一\" class=\"headerlink\" title=\"2019-06-24 周一\"></a>2019-06-24 周一</h2><p>总体来说台湾的天气真是随性，天气预报基本上没有准过。看每天都预告着第二天全是雨，并且概率可以到90%多，结果早上出门一看，大太阳晒着，然后等一会可能突然天降瓢泼大雨，然后雨下了没有十分钟，又停了。</p>\n<p>中午吃过饭，去租了个电动车，由于没有国际驾照，所以只能租了个电动车，对于多年的电动车老司机来说，骑起来还是没有任何问题的。不过他们那边电瓶竟然是一整块的方式，虽然也没有问出工作人员是48V还是60V的来，不过仪表上电量最高的时候是50V，也许那边的规格和国内是有一些不同的。</p>\n<p>由于是下午租的车，而垦丁从垦丁大街那边可以分成两个部分，西边和东边。这一天就先去西边，老板还热情的给了具体的路线图，并且说可以先去恒春古镇吃好吃的。开始出发就过去了，骑了大概六七公里的时候，突然意识到一个问题，我们刚吃过饭，然后也不想吃东西，所以好像就没有什么去恒春的必要了，然后就原路折回去了。说起来还有些小尴尬。大晴天，也就意味着另一件事，天气很晒。去海边当然也就去了沙滩，周围有人在玩水上项目，快艇什么的，感觉所有的海边的都是这样的。海滩看多了，就会发现这个基本上都大同小异，很难再让人有新鲜的感觉。不过沙滩上有个人在和狗玩还挺有意思的，随着浪过来，把狗带到水里吓他或者是叫狗过去，看狗一边要去追主人，一边又怕水，还蛮有意思的。在之前做高铁和快线的时候，新开发出了手机上的延时摄影自动合成视频的功能。发现很有意思，然后打算录一段站在沙滩上，然后海浪不断把沙子冲走人不断往里面陷的视频，不过由于浪慢慢变大，没录多久就结束了，该想法也就以失败告终。</p>\n<p>晚饭去了大众点评上评价很高的炒菜店，菜确实还不错。夜宵去买了租车的人推荐的卤味和花枝丸，卤味确实不错，买了一份心肝宝贝（鸭心，鸭肝等）以及几个鸭翅，鸭翅非常好吃，不过鸭心等有些咸以及份有些大还是剩了一些。</p>\n<h2 id=\"2019-06-25-周二\"><a href=\"#2019-06-25-周二\" class=\"headerlink\" title=\"2019-06-25 周二\"></a>2019-06-25 周二</h2><p>由于电动车是租了24小时，也就是这一天需要在13点之前把卡还回去以及是还需要退房，所以这一天起的还是比较早的。今天是走垦丁的东线，讲道理东线比西线的风景要好很多，并且早上出门的时候下了一场雨，所以还挺凉快的，整体感觉也会变好。不过早上还是出了个小插曲，出门的时候把手机拉在酒店了，由于今天退房，所以又回去拿了。<br>然后就是再次踏上走东线的行程，目标是前往台湾最南点，然后折回来。在这条路上见到了很多不一样的石头的海滩，之前总是去的都是周围是沙滩的那种。黑黑的岩石配上雪白的浪花，在这里第一次感受到乱石穿空，惊涛拍浪，卷起千堆雪的感觉。并且看提示说，周围有寄居蟹，找了半天也没有找到，只找到了一些普通的在岩石里面的小螃蟹。并且之前在大路上的时候，还看到有牌子写着，陆蟹出没，减速慢行的标识，当然也没有找到。<br>然后一路前进到快到台湾最南点的地方的时候，有个灯塔，本来想上去，在入口前准备停车的时候，结果发现钱包不见了，后来怀疑应该是拉在箱子里了。所以也只得作罢。<br>到了台湾最南点后发现其实就是一个小的标识物和探出去的一小块地方，不过还是挺多人慕名过去的，这就让我想起了那个东极岛，虽然说不是最南端，但是仗着一个好名字，还是游客甚多。<br>然后从那边回来之后，就还车、取钱包、又去了昨天那家吃了一次饭。没什么可表的。然后又做垦丁快线回到新左营，从新左营做高铁到了台北。<br>到台北后发现台北下着瓢泼大雨，开始本来打算做出租去住的酒店，结果转了一圈没有找到怎么过去，于是就只得走过去了，好在有雨衣。快到的时候，发现原来有地下街可以从高铁站一直通过来，唉，白淋了雨了。<br>住的酒店就在西门町附近，这也就理所当然的晚上就去那边逛了。在台南和垦丁待了几天后，到了台北真真切切的感觉是又回到了大城市，四处是高楼大厦、人来车往。不知道为何感觉西门町是一个二次元很严重的地方，周围的广告都是一个阴阳师类似的游戏的广告，以及大侦探皮卡丘、名侦探柯南绀青之拳电影的宣传。在某条街头还一直停着一辆献血车，车上就像之前在微博上看到的日本的献血车一样，车身上都贴着二次元角色的形象，有些造型比较像前一段时间比较火的工作细胞上的工作人员的造型，开始还以为所有的献血车都是这样，不过后来在士林附近又看到一辆，就是很传统、很普通的样子。<br>在这边，当然又是逛吃逛吃。吃了一个排队比较多的线粉，在他旁边看到一个臭豆腐，然后也去吃了，发现这边的臭豆腐和国内的差别还挺多的，油炸的做法一样，但是浇的汁是不同类型的，除此之外还会在上面放一些酸酸甜甜的泡菜，对于解腻还是很有帮助的。在此之后又吃了个别家的臭豆腐，都没有这家的好吃，所以后来又在他家又买了一份。</p>\n<h2 id=\"2019-06-26-周三\"><a href=\"#2019-06-26-周三\" class=\"headerlink\" title=\"2019-06-26 周三\"></a>2019-06-26 周三</h2><p>来了台湾，都有一个必须去的地方，故宫博物院。不过里面没有想象中的大，然后冷气很足。当然去看了传说中的白菜和五花肉。除此之外还有许多清朝皇帝用的一些朝珠、玉器什么的，众多名贵的东西。里面见到两个很有意思的讲解人员，虽然他们也是给听讲解的人员发了耳机，不过他们说话的声音还是比较大的，旁边的人也可以跟着蹭一蹭听。一个貌似当着日本人面，在讲解某个文物的历史的时候，提到日本人都比较贼，然后又说他们听不懂他说啥。另一个就是旗帜鲜明的支持一个中国，不知道旁人有什么感受。在故宫旁边吃了个牛肉面，只有一句话真贵。<br>从故宫出来，然后又做捷运准备去淡水渔人码头看日落。在快到淡水捷运站的时候，突然看到有个红树林自然保护区，并且我们时间还很充足，就打算去那里逛一逛，不过比较尴尬的是里面的步道在维修，所以只能走稍远一些的路边。周边各种树木林立，环境还是很不错，不过有水有树就导致了一个问题，有很多蚊虫，感觉走了没有多久就被咬惨了。然后再做了三四公里路之后，后来遇到一个出口，就从那出去准备做公交车过去，公交做了一段到了一个什么红毛城，就下车去那里看，然后发现手机拉在车上了。幸好手机开了国际漫游，是可以接到电话的，于是赶紧让同学给从国内打电话过来，然后知道给放在哪个地方了，就再做公交去到那里，如愿取到手机。这番大概折腾了一个多小时，于是赶紧去看日落的地方，好在及时赶到了。但是当天天气还是不太好，站在情人桥上看东边乌云已经厚得赶紧要掉下来了，不过西边还是有一部分没有云的，也比较奇怪，但好处是还可以在一定程度上看到日落。虽然最终没有看到太阳掉到海里去，染红大海和天空的场景，不过由于场景的空旷，以及云层不算特别厚，日落还是可以的。不过用GoPro拍出来的照片，完全感觉不到太阳，反而是用手机拍的还不错。<br>看完日落，这一天的行程也就结束了。由于看日落的地方离捷运站还有一定的距离，所以就打车过去的，然后发现这边打车还是蛮贵的，很短的距离就大概200台币，也就是40多人民币。想起之前在泰国的时候，天天打车，从来不做公共交通的情况，而去欧洲的时候，基本不敢打车的境遇。感觉是随着经济发展程度的提高，公共交通的费用会越来越低，而像出租这种却会越来越高。另一方面，刷卡支付也是可以鉴定一个国家发展的标志，当然我国情况除外。在欧洲的时候以及这次来台湾，基本上没有怎么取现金，除了小摊，大部分都是可以直接刷卡支付。而像泰国，大部分地方都是只能付现金，所以有为了找一个支持银联的ATM，而尝试10多台ATM的历史。</p>\n<h2 id=\"2019-06-27-周四\"><a href=\"#2019-06-27-周四\" class=\"headerlink\" title=\"2019-06-27 周四\"></a>2019-06-27 周四</h2><p>之前以为是在台北的行程只有三整天的时候，觉得时间很赶，可是后来发现竟然是四整天的时候，发现原来时间是这么充裕，所以基本上每天就很少的事情了。<br>今天中午出门，经过一番考虑决定搭公交去台北101大楼。结果，尴尬的错过了第一辆公交车，当时坐在那等公交顺其自然的玩起了手机，然后不一会就看着面前一辆公交飞驰而过，过后发现竟然就是我们等的那一班。台湾的公交车，也属于那种，下车需要按一个下车铃这种，如果到某个站点没有人按，且公交站没人招手的话，车就飞驰过去了。后来雨又下大了，等到上了下一班公交车结果又停了，尴尬。在101买了一些回国的伴手礼。<br>然后坐捷运去猫空缆车，缆车分为水晶缆车和普通缆车，水晶缆车的底部是透明的，可以直接看到下面的郁郁葱葱的绿树。不过由于这个空间比较小，且你是坐在旁边的座位上，所以感觉不是很吓人。缆车慢慢悠悠的，很长，恰好可以看到台北市区的整体。恰好又看了一次日落。</p>\n<h2 id=\"2019-06-28-周五\"><a href=\"#2019-06-28-周五\" class=\"headerlink\" title=\"2019-06-28 周五\"></a>2019-06-28 周五</h2><p>早上，吃过早饭之后，去买茶叶和顺便寄明信片。去了他们邮局，发现里面除了传统的邮寄业务之外，也有一部分银行的业务，应该是类似国内的邮政储蓄一样。不过尴尬的发现这边只能买邮票寄明信片，这边卖的明信片都是纯白的那种，而我手头只有一张前天在诚品书店买的明信片。工作人员说可以去书局去买，而且竟然会根据明信片的大小，需要不同价值的邮票，小的需要6台北，而大的需要9台北。<br>地图一搜，发现附近还真有一家书局。去了之后发现还真蛮大的，一共四层，除了书之外还卖各种卡片、文具以及小玩意。于是又开心的逛了起来，发现这边的书还真的蛮多的。不过和诚品书店还是有一些不一样的，诚品那边感觉可能是更注重一些书的质量，会有一些比较有深度的书，或者一些外文原版书，当然也包括很多政治方面的书。而这个书局，感觉应该是更注重书的畅销度，轻小说、日漫有很大一篇，以及各种考试相关的，根本没有什么政治或者外文之类的。另外，还偶然间发现了一个日本著名演员高桥圣子的写真集。<br>下午的话就去了这边著名的泡汤的地方，新北投。泡汤休息的一下午。</p>\n<h2 id=\"2019-06-29-周六\"><a href=\"#2019-06-29-周六\" class=\"headerlink\" title=\"2019-06-29 周六\"></a>2019-06-29 周六</h2><p>A shopping day, all kinds of 化妆品。</p>\n<h2 id=\"2019-06-30-周日\"><a href=\"#2019-06-30-周日\" class=\"headerlink\" title=\"2019-06-30 周日\"></a>2019-06-30 周日</h2><p>由于是从松山机场走，所以用不成龙腾的贵宾室，并且讲道理机场还是真的小，回去的飞机也比较小，不过好在时间比较短。到了浦东机场情况就变成了一个灾难，飞机准时大概两点多到达浦东。然后就用积分预定了5点十分回来的火车，本来想可以不用花钱，不过最后造成了很多蛋疼的事情。到了机场就去取托运的行李，结果就各种等各种不来。等了一个多小时终于姗姗来迟，然后就做地铁从浦东机场到虹桥火车站，结果地铁又排了很长的队。显然火车是赶不上了，然后打算改签，然后发现积分顶的票不能网上改签，只能去现场改签。于是想放弃这张票，买了临近时间的票，结果还时间冲突。无奈只得到了车站再买票，然后坐上火车回到苏州。</p>\n"},{"title":"无锁队列","url":"http://code4fun.me/2019/05/28/lockfreequeue/","content":"<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-28 15:14:37</p>\n</blockquote>\n"},{"title":"匿名union","url":"http://code4fun.me/2019/05/24/anonymous_union/","content":"<p>references:<br><a href=\"http://northstar-www.dartmouth.edu/doc/ibmcxx/en_US/doc/language/ref/rucldun.htm\" target=\"_blank\" rel=\"external\">union introduction</a></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-24 17:39:03</p>\n</blockquote>\n"},{"title":"如果一个类同时继承的两个类都定义了某一个函数会怎样呢","url":"http://code4fun.me/2019/05/24/same_method_in_class/","content":"<p>入下面所示：类<code>C</code>同时继承了<code>A</code>和<code>B</code>,并且两个都定义了相同的函数,如果这时候编译的话会得到错误.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">testhir.cpp: In function ‘int main(int, const char**)’:</div><div class=\"line\">testhir.cpp:26:7: error: request for member ‘printR’ is ambiguous</div><div class=\"line\">     c.printR();</div><div class=\"line\">       ^~~~~~</div><div class=\"line\">testhir.cpp:5:14: note: candidates are: void A::printR()</div><div class=\"line\">         void printR()</div><div class=\"line\">              ^~~~~~</div><div class=\"line\">testhir.cpp:13:14: note:                 void B::printR()</div><div class=\"line\">         void printR()</div><div class=\"line\">              ^~~~~~</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">class A &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void printR()</div><div class=\"line\">        &#123;</div><div class=\"line\">            std::cout &lt;&lt; &quot;in A&quot; &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class B &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void printR()</div><div class=\"line\">        &#123;</div><div class=\"line\">            std::cout &lt;&lt; &quot;in B&quot; &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class C :B,A &#123;</div><div class=\"line\">public:</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char** argv) &#123;</div><div class=\"line\">    C c;</div><div class=\"line\">    c.printR();</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在C中也实现了相同的函数的话,就可以正常编译获得结果:<code>in C</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">class A &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void printR()</div><div class=\"line\">        &#123;</div><div class=\"line\">            std::cout &lt;&lt; &quot;in A&quot; &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class B &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void printR()</div><div class=\"line\">        &#123;</div><div class=\"line\">            std::cout &lt;&lt; &quot;in B&quot; &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class C :B,A &#123;</div><div class=\"line\">public:</div><div class=\"line\">void printR()</div><div class=\"line\">        &#123;</div><div class=\"line\">            std::cout &lt;&lt; &quot;in C&quot; &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char** argv) &#123;</div><div class=\"line\">    C c;</div><div class=\"line\">    c.printR();</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-24 15:40:15</p>\n</blockquote>\n"},{"title":"C++ 最佳实践总结","url":"http://code4fun.me/2019/05/18/cpp_best/","content":"<p>主要是总结一下C++的一些最近实践，相应的也包括一些比较好的库或者是工具。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-18 14:34:54</p>\n</blockquote>\n"},{"title":"An introduction to bloom filter","url":"http://code4fun.me/2019/05/09/bloomfilter/","content":"<h2 id=\"Introducation-of-bloomfilter\"><a href=\"#Introducation-of-bloomfilter\" class=\"headerlink\" title=\"Introducation of bloomfilter\"></a>Introducation of bloomfilter</h2><p>详细的介绍和公式推倒可以参考 <a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" target=\"_blank\" rel=\"external\">wikipedia</a><br><a href=\"https://blog.csdn.net/jiaomeng/article/details/1495500\" target=\"_blank\" rel=\"external\">中文介绍</a></p>\n<p>BloomFilter 是 一个时间和空间都非常高效的存储结构，它的基本用途是检查任意一个 key（字符串）是不是在一个给定的集合（bit 数组）里。基本原理是对于给定的 key 计算一系列 hash 的值，将每一个 hash 的值作为索引到 bit 数组里去寻找相应的 bit 是不是为 1。只有当一个 key 对于所有的 hash 值检索的结果都 是 1，这个 key 才被认为在 BloomFilter 集合里面；反之，只要有一个 hash 值检索的结果为 0，则表明该 key 一定不在集合中。</p>\n<p>BloomFilter 有以下特性：</p>\n<ol>\n<li>只能查询给定的 key 是否在给定的集合中， 或者在该集合中有多少个 key。但不能列举出这些 key。</li>\n<li>只 能被用于检索某个 key 是否在给定的集合中，而不能判断这个 key 在集合中出现几次，也不能象 hash 表一样给每个 key 关联一个 value。一些扩展算 法，例如 Bloomier Filter、Counting Bloom Filter等，可以用时间和空间代价换取这些特性。</li>\n<li>无法删除。一旦一个 key 被加入 Bloom Filter 后，就无法将它从中删除。Counting Bloom Filter (其基本的思路是存储bit的地方不再仅存储0、1，而是存储一个counter，当删除时只需要把counter减1就可以) 可以以时间和空间代价实现删除操作。</li>\n<li>存在一定的可能性，BloomFilter 对于不存在于集合中的 key 可能返回不正确的结果，即报告其存在于集合中。这个被称之为 False Positive。但是，BloomFilter 报告为不存在于集合中的 key 则一定不存在。即它的 False Negative 为 0。</li>\n</ol>\n<p>由于以上特性的存在：需要计算其错误率(false positive rate)：</p>\n<p>设存在<code>S={x1, x2,…,xn}</code> 这样具有<code>n</code> 个元素的集合，Bloom Filter 使用 <code>k</code> 个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到 <code>{1,…,m}</code> 的范围中。<br>假设各个哈希函数是完全随机的。当集合 <code>S={x1, x2,…,xn}</code> 的所有元素都被 <code>k</code> 个哈希函数映射到 <code>m</code> 位的位数组中时，这个位数组中某一位还是 <code>0</code>的概率是：</p>\n<p>$$ (1-\\frac{1}{m})^{kn} $$</p>\n<p>根据自然常数$e$的定义， $\\lim\\limits_{x\\to\\infty} (1-\\frac{1}{x})^{-x}=e$，则有</p>\n<p>$$ f_p=(1-(1-\\frac{1}{m})^{kn})^k = (1-e^{-kn/m})^k $$</p>\n<p>参数计算：</p>\n<p>当哈希函数的个数多，那么在对一个不属于集合的元素进行查询时得到 0 的概率就大；但另一方面，如果哈希函数的个数少，那么位数组中的 0 就多。所以需要计算一个最优的哈希函数个数。<br>首先通过求导等可以计算出使得 $f_p$ 最小的$k$为</p>\n<p>$$ k = \\frac{m}{n} \\ln{2} $$</p>\n<p>然后将 $k$代入可以得到结果：</p>\n<p>$$ m = -\\frac{n \\ln{f_p}}{(\\ln{2})^2} $$</p>\n<h2 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h2><p>hash32是根据 <a href=\"http://burtleburtle.net/bob/c/lookup3.c\" target=\"_blank\" rel=\"external\">http://burtleburtle.net/bob/c/lookup3.c</a> 修改得到。</p>\n<p>这里有一个<a href=\"http://www.burtleburtle.net/bob/hash/doobs.html\" target=\"_blank\" rel=\"external\">不同hash对比的文章</a>。<br><a href=\"http://blog.sina.com.cn/s/blog_b36b1ed90102v8ti.html\" target=\"_blank\" rel=\"external\">hash compare</a><br><a href=\"http://www.cnblogs.com/zhoug2020/p/6984177.html\" target=\"_blank\" rel=\"external\">hash method</a></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-09 09:04:01</p>\n</blockquote>\n"},{"title":"Something related to arena allocator","url":"http://code4fun.me/2019/05/07/arena allocator/","content":"<p><a href=\"http://jm.taobao.org/2011/06/22/983/\" target=\"_blank\" rel=\"external\">A good post</a></p>\n<p>Some highlights:</p>\n<blockquote>\n<p>它的原理：</p>\n<p>创建一个大小固定的bytes数组和一个偏移量，默认值为0。</p>\n<p>分配对象时，将新对象的data bytes复制到数组中，数组的起始位置是偏移量，复制完成后为偏移量自增data.length的长度，这样做是防止下次复制数据时不会覆盖掉老数据（append）。</p>\n<p>当一个数组被充满时，创建一个新的数组。</p>\n<p>清理时，只需要释放掉这些数组，即可得到固定的大块连续内存。</p>\n<p>在Arena Allocation方案中，数组的大小影响空间连续性，越大内存连续性越好，但内存平均利用率会降低。</p>\n</blockquote>\n<p>这样做GC的时候就只需要处理多个区域而不是所有的内存空间.</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-07 12:10:42</p>\n</blockquote>\n"},{"title":"Configuration  for debug cmake project in VSCode","url":"http://code4fun.me/2019/05/05/vscode_debug_cmake_projects/","content":"<p><code>launch.json</code> for debug cmake project in Visual Studio Code</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    // Use IntelliSense to learn about possible attributes.</div><div class=\"line\">    // Hover to view descriptions of existing attributes.</div><div class=\"line\">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</div><div class=\"line\">    \"version\": \"0.2.0\",</div><div class=\"line\">    \"configurations\": [</div><div class=\"line\">        &#123;</div><div class=\"line\">            \"name\": \"cmake debug\",</div><div class=\"line\">            \"type\": \"cppdbg\",</div><div class=\"line\">            \"request\": \"launch\",</div><div class=\"line\">            \"program\": \"$&#123;command:cmake.launchTargetPath&#125;\",</div><div class=\"line\">            \"args\": [],</div><div class=\"line\">            \"stopAtEntry\": false,</div><div class=\"line\">            \"cwd\": \"$&#123;workspaceFolder&#125;\",</div><div class=\"line\">            \"environment\": [],</div><div class=\"line\">            \"externalConsole\": false,</div><div class=\"line\">            \"MIMode\": \"gdb\",</div><div class=\"line\">            \"setupCommands\": [</div><div class=\"line\">                &#123;</div><div class=\"line\">                    \"description\": \"Enable pretty-printing for gdb\",</div><div class=\"line\">                    \"text\": \"-enable-pretty-printing\",</div><div class=\"line\">                    \"ignoreFailures\": true</div><div class=\"line\">                &#125;</div><div class=\"line\">            ],</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-05-05 10:35:51</p>\n</blockquote>\n"},{"title":"轮廓匹配","url":"http://code4fun.me/2019/05/01/shape_match/","content":"<p>图像匹配一般分为两类：基于灰度的匹配和基于特征的匹配，由于我们的问题中并不存在颜色特征，故只可以使用基于特征的匹配方法。特征方面，在地图匹配中，由于地图只有轮廓信息，故只考虑基于特征的匹配方法。</p>\n<h2 id=\"基于特征匹配的方法。\"><a href=\"#基于特征匹配的方法。\" class=\"headerlink\" title=\"基于特征匹配的方法。\"></a>基于特征匹配的方法。</h2><p>首先在原始图像中提取特征，然后再建立两幅图像之间特征的匹配对应关系。常用的特征匹配基元包括点、线、区域等显著特征。图像特征相比像素点数量杀过少很多，特征间的匹配度量随位置变化尖锐，容易找出准确的匹配位置，特征提取能大大减少噪声影响，对灰度变化、形变和遮挡有较强的适应力。基于特征的图像匹配方法在实际中的应用越来越广泛，也取得了很大的成果，基于图像特征的匹配方法主要有以下四种：</p>\n<p>图像点匹配技术。图像点匹配技术可以分为两类：一类是建立模板和待匹配图像的特征点集之间的点点对应关系，然后计算对应点之间的相似性度量来确定图像匹配与否；另一类是无须建立显示的点点对应关系，主要有最小均方差匹配、快速点匹配、Haussdorff点距离（该 方 法 的 基本 思 想是 首先 采 用卷 积 积 分的 方 法 ，在多尺度 空间里 通过 对轮 廓进 行 重采样 来计 算轮 廓 上 每 一点 的 曲率并 选 取特征 点 。 特 征 点及其 两侧 的若 干 点 构 成轮 廓 的特 征 段 ，然 后 由特 征段 之 间 的Haussdorff距 离来 比较 二 者 的相似 性 ，即 为 匹配 程 度 。）匹配等。</p>\n<p>边缘线匹配技术。边缘线可以通过区域分割、边缘检测等得到。采用边缘线段的优点是孤立边缘点的偏差对边缘线段的影响很小，还加入了边缘连接性约束。主要的方法有HYPER匹配技术、chafer匹配技术等。</p>\n<p>闭合轮廓匹配技术。轮廓匹配，是模式识别和三维重建的一个最基本问题，常用的有Fourier描述子、HRP描述子等。Fourier描述子反映的是轮廓线的全局特征。HRP描述子相比则反映了闭合边界的局部特征，能够很好的处理轮廓线的局部变化和遮掩性，降低了算法的复杂度。</p>\n<p>使用高级特征的匹配技术。利用图像特征间的几何约束，将特征属性值之间简单比较的结果作为相似性度量，从而进一步提高匹配算法的速度。主要有图像匹配法、松弛法和能量最小化法等。基于特征匹配方法，一般都具有较好抗几何失真和灰度失真的能力，对抗噪声干扰也有一定的抑制能力，其难点在于自动、稳定、一致的特征提取，并且特征提取过程会损失大量的图像信息，因而不易硬件实现。目前，对自然环境下的景物图像进行分割或特征提取任然是一项困难的工作。</p>\n<h2 id=\"图像匹配算法性能评价指标\"><a href=\"#图像匹配算法性能评价指标\" class=\"headerlink\" title=\"图像匹配算法性能评价指标\"></a>图像匹配算法性能评价指标</h2><p>匹配算法的性能评价指标主要有：匹配概率、匹配精度、匹配速度。</p>\n<p>匹配概率，是正确匹配次数与总的匹配次数之比。<br>匹配精度，是正确匹配的匹配误差均方差，描述了匹配的准确性。由于噪声和其他误差因素的影响，图像匹配时最终得出的匹配位置和真正的匹配位置是不同的，估计匹配点和真正匹配点之间存在一定的随机偏差，该偏差称为匹配误差。显然匹配误差的方差越小，则定位精度越高。<br>匹配速度，是指匹配算法的快慢程度，说明了搜索的快速性。<br>一个好的匹配算法要求匹配概率尽可能高，匹配误差小，算法计算快，能满足应用环境对实时性的要求。</p>\n<p>Variational shape matching for shape classiﬁcation and retrieval  基于图形轮廓定义了一个多尺度距离来进行匹配。此为匹配函数，其过程也即优化该函数的过程。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/78846630-4B6F-47D2-9E09-DC01EB5F1D73.png\" alt=\"\"></p>\n<p>一种融合特征点与轮廓信息的匹配算法 是针对低纹理图像对SIFT算法的提高。SIFT( scale invariant feature trans- form) 特征匹配算法具有尺度不变的特性，匹配能力强，能够 在稀疏纹理区域检测出较多的特征点。但是这些点很多不是 描述物体轮廓特性的点，既不是边缘点也不是角点，对立体视 觉的匹配贡献不大。为了解决稀疏纹理图像增长停止的问题， 本文提出一种将角点信息和轮廓信息相结合的种子点提取算 法，将轮廓信息有效地加入到种子点提取过程，大幅度增加种 子点的数量，提高种子点匹配精度，使低纹理图像仍然具有大 范围的准稠密匹配，提高了三维重建的效果。</p>\n<p>二维轮廓曲线匹配算法研究利用了轮廓的局部特征点信息和特征点之间轮廓曲线段的几何属性确定候选匹配段 ,提高了匹配的运算速度 ,最后应用特征段之间Hausdorff 距离来验证匹配 , 提高了曲线匹配的精度 。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/FF57F8D7-0F4B-49F0-B058-F51A3F209838.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/562B2AB2-953A-421B-88A2-563A399F7FD8.png\" alt=\"\"></p>\n<p>基于复数矩的形状轮廓描述与匹配方法  基于复数矩理论构造了轮廓顶点与形状 旋转、缩放和平移无关的局部复数矩不变量，推导了局部复数矩与原始轮廓顶点坐标的正反算公式，将轮廓特征顶 点处的局部复数矩和曲率合在一起，从而建立了一种新的轮廓描述函数。</p>\n<p>基于链码的二维碎片轮廓匹配算法  首先利用边界链码的跟踪技术, 提取出二维碎片的轮廓信息, 同时对轮廓线进行细化、去噪和<br>编码处理, 得到二维轮廓线的一维链码信息描述, 并在此基础上提出一种基于链码的二维碎片轮廓匹配方<br>法。</p>\n<p>A survey of shape feature extraction techniques</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/FB66E879-EAE7-4737-8DC7-611CFFBD5502.png\" alt=\"\"></p>\n<p>Shape matching and classiﬁcation using height functions<br>Height functions + LCDP 得分为96.45</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/FB66E879-EAE7-4737-8DC7-611CFFBD5502.png\" alt=\"\"></p>\n<p>Shape Matching Using Multiscale Integral Invariants</p>\n<p>地图匹配：<br>图像配准：针对于不同</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:36:54</p>\n</blockquote>\n"},{"title":"sed usage","url":"http://code4fun.me/2019/04/30/sed usage/","content":"<p><a href=\"https://coolshell.cn/articles/9104.html\" target=\"_blank\" rel=\"external\">sed 简明教程 | | 酷 壳 - CoolShell</a></p>\n<h1 id=\"s-command\"><a href=\"#s-command\" class=\"headerlink\" title=\"s command\"></a>s command</h1><p><code>sed &quot;s/before/after&#39;s/g&quot; filename.txt</code> 这个命令可以进行字符串替换并输出</p>\n<p>如果需要修改文件内容的话可以用下面两个命令</p>\n<pre><code>sed &quot;s/before/after&apos;s/g&quot; filename.txt &gt; filename.txt\nsed -i &quot;s/before/after&apos;s/g&quot; filename.txt\n</code></pre><p>这里的 <code>s</code> 和 <code>vim</code>中的使用基本相同，所以也就可以利用其余的一些正则符号。如：</p>\n<pre><code>sed &apos;s/^/#/g&apos; filename.txt\nsed &apos;s/$/ --- /g&apos; filename.txt\nsed &quot;3,33s/a/b/g&quot; filename.txt #替换3到33行之间的文本\nsed &quot;s/\\&lt;a/b/1&quot; filename.txt #只替换每一行的第一次出现且a处于词首\nsed &quot;s/a\\&gt;/b/2&quot; filename.txt #只替换每一行的第二次出现且a处于词尾\nsed &quot;s/a/b/3g&quot; filename.txt #只替换第一行的第3次出现及以后的单词\nsed &quot;s/a/$&amp;$/g&quot; filename.txt # 用&amp;当作被匹配的变量\n</code></pre><p>注： <code>\\&lt;</code>表示词首, <code>\\&gt;</code>表示词尾。</p>\n<p><code>\\\\\\</code>表示需要查找和替换的backslash，也即反斜杠，相应的有很多对应的正则符号需要加上 <code>\\</code>。</p>\n<h2 id=\"多个匹配\"><a href=\"#多个匹配\" class=\"headerlink\" title=\"多个匹配\"></a>多个匹配</h2><pre><code>sed &apos;1,3s/a/b/g; 3,$s/c/d/g&apos; filename.txt # 第一行到第三行a-&gt;b，第三行及以后c-&gt;d\nsed -e &apos;1,3s/a/b/g&apos; -e &apos;3,$s/c/d/g&apos; filename.txt #与上式等价\n</code></pre><h2 id=\"圆括号匹配\"><a href=\"#圆括号匹配\" class=\"headerlink\" title=\"圆括号匹配\"></a>圆括号匹配</h2><p> 圆括号括起来的正则表达式所匹配的字符串会可以当成变量来使用，sed中使用的是 <code>\\1,\\2</code></p>\n<pre><code>sed &apos;s/This is my \\([^,&amp;]*\\),.*is \\(.*\\)/\\1:\\2/g&apos; my.txt\n</code></pre><h1 id=\"N-commands\"><a href=\"#N-commands\" class=\"headerlink\" title=\"N commands\"></a>N commands</h1><p>把下一行的内容纳入当成缓冲区做匹配</p>\n<pre><code>sed &apos;N;s/my/your/&apos; pets.txt\n</code></pre><p>通过该命令可以实现只替换奇数行</p>\n<h1 id=\"other-commands\"><a href=\"#other-commands\" class=\"headerlink\" title=\"other commands\"></a>other commands</h1><p>a — append</p>\n<p>i — insert</p>\n<p>c — replace</p>\n<p>d — delete</p>\n<p>p — print</p>\n"},{"title":"日常","url":"http://code4fun.me/2019/04/30/日常/","content":"<p>更纱黑体</p>\n<p><code>Atuolt</code></p>\n<p><code>NirCmd</code></p>\n<p><code>AHK</code></p>\n"},{"title":"mklink","url":"http://code4fun.me/2019/04/30/mklink/","content":"<p><a href=\"https://www.sinosky.org/mklink-cmd-useful-tips.html\" target=\"_blank\" rel=\"external\">https://www.sinosky.org/mklink-cmd-useful-tips.html</a></p>\n<p>create a symbolic from <code>Link</code> to <code>Target</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mklink Link Target</div></pre></td></tr></table></figure>\n<p><code>/D</code> can be used to create a link for directory:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mklink /D link target</div></pre></td></tr></table></figure>\n<p>Use <code>/H</code> when you want to create a hard link pointing to a file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mklink /H Link Target</div></pre></td></tr></table></figure>\n<p>Use <code>/J</code> to create a hard link pointing to a directory, also known as a directory junction:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mklink /J Link Target</div></pre></td></tr></table></figure>"},{"title":"visual studio release/debug differences","url":"http://code4fun.me/2019/04/30/visual studio release and debug differences/","content":"<p>在运行这个程序时，在debug模式下有问题，但是release模式下却可以。</p>\n<p>注意查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">#include &lt;cstdio&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (argc == 1) &#123;</div><div class=\"line\">\t\tcout &lt;&lt; &quot;Please specify the memory size in MB.\\n&quot;;</div><div class=\"line\">\t\treturn 1;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlong long sz = atoi(argv[1]);</div><div class=\"line\">\tcout &lt;&lt; &quot;Allocating memory size: &quot; &lt;&lt; sz &lt;&lt; &quot;MB&quot; &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">\tif (sz &lt;= 0) &#123;</div><div class=\"line\">\t\tcout &lt;&lt; &quot;Invalid memory size: &quot; &lt;&lt; sz &lt;&lt; endl;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsz = sz * 1024 * 1024;</div><div class=\"line\">\tcout &lt;&lt; &quot;size of buffer:&quot; &lt;&lt; sz &lt;&lt; endl;</div><div class=\"line\">\tchar *buf = new char[sz];</div><div class=\"line\">\tstd::fill(buf, buf + sz, 1);</div><div class=\"line\"></div><div class=\"line\">\tcout &lt;&lt; &quot;Memory allocated. Press any key to exit.&quot; &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">\tgetchar();</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"realtimeupdate in search engine","url":"http://code4fun.me/2019/04/30/realtimeupdate/","content":"<p>有两个开源的系统有相关内容，一个是solr，一个是ElasticSearch，其区别主要为：</p>\n"},{"title":"windbg","url":"http://code4fun.me/2019/04/30/windbg/","content":"<p>A very good documents: <a href=\"http://windbg.info/doc/1-common-cmds.html\" target=\"_blank\" rel=\"external\">Common WinDbg Commands (Thematically Grouped)</a></p>\n<h2 id=\"symbols-related\"><a href=\"#symbols-related\" class=\"headerlink\" title=\"symbols related.\"></a>symbols related.</h2><ul>\n<li><code>.sympath srv*https://msdl.microsoft.com/download/symbols</code> Add msdl path to symbol path.</li>\n<li><code>!sym noisy</code> we can get extra symbol info in Windbg.</li>\n<li><code>.reload /f ntdll.dll</code> reload the symbol file for given file.</li>\n</ul>\n<h2 id=\"breakpoint\"><a href=\"#breakpoint\" class=\"headerlink\" title=\"breakpoint\"></a>breakpoint</h2><p><a href=\"https://www.cnblogs.com/renyuan/p/6206309.html\" target=\"_blank\" rel=\"external\">reference</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bm Saas1!Saas::ISRCreatorDocShard::~ISRCreatorDocShard</div><div class=\"line\">bp `Saas1!l01rankingcontext.cpp:103`</div></pre></td></tr></table></figure>\n<h3 id=\"conditional-breakpoint\"><a href=\"#conditional-breakpoint\" class=\"headerlink\" title=\"conditional breakpoint\"></a>conditional breakpoint</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bu MidLevelAggregator!MLAQueryAggregateProcessor::FinaliseMetaData &quot;.if(((@@c++(totalData-&gt;m_nNodesQueried))&gt;0n0))&#123; .echo \\&quot;hit\\&quot;&#125; .else&#123;gc&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">bu MidLevelAggregator!MLAQueryAggregateProcessor::FinaliseMetaData &quot;.if(((@@c++(sizeof(totalData-&gt;m_indexVersions)))&gt;0x28))&#123; .echo \\&quot;hit\\&quot;&#125; .else&#123;gc&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">bu Saas2!AggregatorPacketServer::ProcessReceive &quot;.if(((@@c++(request-&gt;m_ClientAddr.sin_addr.S_un.S_addr))==0xaecc7d19 | request-&gt;m_ClientAddr.sin_addr.S_un.S_addr))==0xb1cc7d19))&#123; .echo \\&quot;hit\\&quot;&#125; .else&#123;gc&#125;&quot;</div></pre></td></tr></table></figure>\n<p>notice the space before <code>.</code></p>\n<h2 id=\"variables\"><a href=\"#variables\" class=\"headerlink\" title=\"variables\"></a>variables</h2><p>dx requestMachine-&gt;m_child.m_machine.m_impl.m_machine</p>\n<p>dx child[3]-&gt;m_child.m_machine.m_impl.m_machine</p>\n<p>dv：显示局部变量</p>\n<h2 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h2><ul>\n<li><code>kb</code> - stack trace (current thread)</li>\n<li><code>kp</code> - this will not show the information of Args to child</li>\n<li><code>kP</code> -Args to child are shown in the symbol model)</li>\n<li><code>.frame #</code> - change the current frame #</li>\n</ul>\n<h2 id=\"Threads\"><a href=\"#Threads\" class=\"headerlink\" title=\"Threads\"></a>Threads</h2><ul>\n<li><code>~</code> - List all threads</li>\n<li><code>~ kb</code> - List all threads and their stack</li>\n<li><code>~# s</code> - set the current thread to # (the thread number)</li>\n</ul>\n<h2 id=\"show-C-results\"><a href=\"#show-C-results\" class=\"headerlink\" title=\"show C++ results\"></a>show C++ results</h2><p>we have the C++ expression parser - <code>@@c++()</code> - that supports all forms of C++ expression syntax, such as:</p>\n<ul>\n<li>Numbers in C++ expressions</li>\n<li>Characters and strings in C++ expressions</li>\n<li>Symbols in C++ expressions. (see WinDbg documentation for details)</li>\n<li>Operators in C++ expressions</li>\n<li>Registers and pseudo-registers in C++ expressions</li>\n<li>Macros in C++ expressions</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">?? @@c++(sizeof(this-&gt;m_rec))</div></pre></td></tr></table></figure>\n<h2 id=\"memory-related\"><a href=\"#memory-related\" class=\"headerlink\" title=\"memory related\"></a>memory related</h2><ul>\n<li><code>!address -summary</code></li>\n<li><code>!address -f Heap</code></li>\n<li><code>!heap -i HeapAddress</code><h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2></li>\n<li><code>.logopen (Open Log File)</code> save windbg command output to given logfile.</li>\n</ul>\n"},{"title":"Filemap in windows and linux","url":"http://code4fun.me/2019/04/29/filemaping in different system/","content":"<p>filemap的含义是将文件里面的一段内容映射到内存空间里面，从而可以提高读写速度。</p>\n<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Now open view</span></div><div class=\"line\">HANDLE hFile = ::CreateFileA(p_fileName, GENERIC_READ, p_fileShareRead ? FILE_SHARE_READ : FILE_SHARE_DELETE,</div><div class=\"line\">                             <span class=\"number\">0</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (INVALID_HANDLE_VALUE == hFile)</div><div class=\"line\">&#123;</div><div class=\"line\">    LogAssert(INVALID_HANDLE_VALUE != hFile,</div><div class=\"line\">              <span class=\"string\">\"Cannot open file [%s] due to win32 error: %u\\n\"</span>,</div><div class=\"line\">              p_fileName,</div><div class=\"line\">              IndexServer::GetLastSystemError());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SCOPEGUARD(::MakeGuard(::CloseHandle, hFile));</div><div class=\"line\"></div><div class=\"line\">HANDLE hMapping = ::CreateFileMapping(hFile, <span class=\"number\">0</span>, PAGE_READONLY, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">LogAssert(<span class=\"number\">0</span> != hMapping);</div><div class=\"line\">SCOPEGUARD(::MakeGuard(::CloseHandle, hMapping));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span>* hView = FileUtils::MapViewOfFileAligned(hMapping,</div><div class=\"line\">                                          FILE_MAP_READ, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<p>上面为一个只读映射的file,<code>CreateFileA</code>参数描述:</p>\n<ul>\n<li><code>GENERIC_READ</code> 允许对设备进行读访问</li>\n<li><code>FILE_SHARE_READ</code> 允许对文件进行共享访问</li>\n<li><code>OPEN_EXISTING</code> 文件必须存在</li>\n<li><code>FILE_ATTRIBUTE_NORMAL</code> 默认属性</li>\n</ul>\n<p><code>CreateFileMapping</code>参数描述:</p>\n<ul>\n<li><code>PAGE_READONLY</code> 只读属性, <code>hFile</code>需要对应为以<code>GENERIC_READ</code>形式打开</li>\n<li><code>dwMaximumSizeHigh</code>，<code>dwMaximumSizeLow</code>：如果这两个参数为0，则文件映射对象的最大长度等于hFile指定的文件长度,需要注意的一点是当两个构成的区间大于现有的文件的时候，会对现在的文件做一个写操作，也即用0把文件扩充到指定的大小。</li>\n<li><code>lpName</code> 此参数为空,创建一个无名字的文件映射对象.</li>\n</ul>\n<p><code>MapViewOfFile</code>参数描述:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">LPVOID <span class=\"title\">MapViewOfFile</span><span class=\"params\">(</span></span></div><div class=\"line\">  HANDLE hFileMappingObject,</div><div class=\"line\">  DWORD  dwDesiredAccess,</div><div class=\"line\">  DWORD  dwFileOffsetHigh,</div><div class=\"line\">  DWORD  dwFileOffsetLow,</div><div class=\"line\">  SIZE_T dwNumberOfBytesToMap</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>FILE_MAP_READ</code> ：  一个只读属性的文件视图被创建，保护模式为 <code>PAGE_READWRITE</code> 或 <code>PAGE_READONLY</code></li>\n<li>The combination of the high and low offsets must specify an offset within the file mapping. They must also match the memory allocation granularity of the system. That is, the offset must be a multiple of the allocation granularity.</li>\n<li><code>dwNumberOfBytesToMap</code>：映射文件部分的大小，如果为0，则映射整个文件。</li>\n</ul>\n<p>可以利用<code>SYSTEM_INFO</code>的<code>dwAllocationGranularity</code>获取到虚拟内存的分配粒度，这个再linux下没有这个选项，一般取pagesize。</p>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pathname, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">mode_t</span> mode)</span></span>;</div></pre></td></tr></table></figure>\n<p>The argument flags must include one of the following access modes: <code>O_RDONLY</code>, <code>O_WRONLY</code>, or <code>O_RDWR</code>.  These request opening the file read-only, write-only, or read/write, respectively.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> length, <span class=\"keyword\">int</span> prot, <span class=\"keyword\">int</span> flags,</span></span></div><div class=\"line\">                  <span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset);</div></pre></td></tr></table></figure>\n<ul>\n<li>If <code>addr</code> is <code>NULL</code>, then the kernel chooses the (page-aligned) address at which to create the mapping; this is the most portable method of creating a new mapping.</li>\n<li>The <code>length</code> argument specifies the length of the mapping (which must be greater than 0).</li>\n<li>The <code>prot</code> argument describes the desired memory protection of the mapping (and must not conflict with the open mode of the file).</li>\n<li><code>offset</code> must be a multiple of the page size as returned by <code>sysconf(_SC_PAGE_SIZE)</code>.</li>\n</ul>\n<p>在写操作上Linux和Windows有一个不同的点是，在linux下利用<code>mmap</code>获得文件指针之后，对指针内容进行修改之后必须利用<code>unmmap</code>操作，才能使得修改写到文件当中，可以查看下面的例子。<br>并且<code>mmap</code>的方式必须选择，<code>MAP_SHARED</code>。<br>当对一个文件做两次map操作的时候，如果map之后操作了<code>unmap</code>那么返回的地址可能是相同的，否则返回的是不同的地址。相当于unmap之后可以继续到指定的区域操作.<br>在把结构体写成二进制的时候,windows和linux的补齐位是不同的,一个是<code>CC</code>,一个是<code>00</code>.</p>\n<p>Windows:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;Windows.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tSYSTEM_INFO sysInfo;</div><div class=\"line\"></div><div class=\"line\">\t::GetSystemInfo(&amp;sysInfo);</div><div class=\"line\">\t<span class=\"keyword\">auto</span> gra = sysInfo.dwAllocationGranularity;</div><div class=\"line\">\t<span class=\"comment\">//\t\tgra\t65536\tunsigned long</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ret = <span class=\"string\">\"test\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ret2 = <span class=\"string\">\"hekekdladfajgkjag\"</span>;</div><div class=\"line\"></div><div class=\"line\">\tHANDLE hFile = ::CreateFileA(<span class=\"string\">\"hellozhizha\"</span>,</div><div class=\"line\">\t\tGENERIC_WRITE | GENERIC_READ,</div><div class=\"line\">\t\tFILE_SHARE_READ,</div><div class=\"line\">\t\t<span class=\"number\">0</span>,</div><div class=\"line\">\t\tOPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,</div><div class=\"line\">\t\t<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tHANDLE hMapFile = CreateFileMappingA(hFile,</div><div class=\"line\">\t\t<span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\tPAGE_READWRITE,</div><div class=\"line\">\t\t<span class=\"number\">0</span>,</div><div class=\"line\">\t\t<span class=\"number\">1200000</span>,</div><div class=\"line\">\t\t<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"comment\">// This can extend the file to offset size</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// \t\thView\t0x000001fd76800000\tvoid *</span></div><div class=\"line\">\t<span class=\"keyword\">void</span>* hView = ::MapViewOfFile(hMapFile,</div><div class=\"line\">\t\tFILE_MAP_ALL_ACCESS,</div><div class=\"line\">\t\t<span class=\"number\">0</span>,</div><div class=\"line\">\t\t<span class=\"number\">0</span>,</div><div class=\"line\">\t\t<span class=\"built_in\">strlen</span>(ret));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memcpy</span>(hView, ret, <span class=\"built_in\">strlen</span>(ret));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//\t\tchecksumInFile\t0x000001fd76970000\tvoid *</span></div><div class=\"line\">\t<span class=\"keyword\">void</span>* checksumInFile = ::MapViewOfFile(hMapFile,</div><div class=\"line\">\t\tFILE_MAP_ALL_ACCESS,</div><div class=\"line\">\t\t<span class=\"number\">0</span>,</div><div class=\"line\">\t\t<span class=\"number\">1</span> * gra,</div><div class=\"line\">\t\t<span class=\"built_in\">strlen</span>(ret2));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memcpy</span>(checksumInFile, ret2, <span class=\"built_in\">strlen</span>(ret2));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Linux:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ret = <span class=\"string\">\"test\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ret2 = <span class=\"string\">\"hekekdladfajgkjag\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">auto</span> gra = sysconf(<span class=\"number\">_</span>SC_PAGESIZE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// we need this file size larger than offset in advance.</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> fd = open(<span class=\"string\">\"hellozhizha\"</span>, O_RDWR, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">void</span>* hView = mmap(<span class=\"literal\">NULL</span>, <span class=\"built_in\">strlen</span>(ret), PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"built_in\">memcpy</span>(hView, ret, <span class=\"built_in\">strlen</span>(ret));</div><div class=\"line\">\tmunmap(hView, <span class=\"built_in\">strlen</span>(ret));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">void</span>* checksumInFile = mmap(<span class=\"literal\">NULL</span>, <span class=\"built_in\">strlen</span>(ret2), PROT_READ | PROT_WRITE, MAP_SHARED, fd, gra);</div><div class=\"line\">\t<span class=\"built_in\">memcpy</span>(checksumInFile, ret2, <span class=\"built_in\">strlen</span>(ret2));</div><div class=\"line\">\tmunmap(checksumInFile, <span class=\"built_in\">strlen</span>(ret2));</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-04-29 14:54:37</p>\n</blockquote>\n"},{"title":"Benchmark of parallel sort in boost and ppl","url":"http://code4fun.me/2019/04/19/parallel sort benchmark/","content":"<p>VS 执行的时候的时间差距很大，不知道为甚？直接执行100000000个随机数排序的状态下，<code>boost</code>和<code>ppl</code>里面的差距在<code>0.5</code>秒以内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">#include &lt;algorithm&gt;</div><div class=\"line\">#include &lt;random&gt;</div><div class=\"line\">#include &lt;cstdlib&gt;</div><div class=\"line\">#include &lt;vector&gt;</div><div class=\"line\">#include &lt;ppl.h&gt;</div><div class=\"line\">#include &lt;boost/sort/parallel_stable_sort/parallel_stable_sort.hpp&gt;</div><div class=\"line\">#include &lt;chrono&gt;</div><div class=\"line\">#include &lt;ctime&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t NELEM = 100000000;</div><div class=\"line\">\tstd::mt19937 my_rand(0);</div><div class=\"line\">\tstd::vector&lt; uint64_t &gt; A, B;</div><div class=\"line\">\tA.reserve(NELEM);</div><div class=\"line\"></div><div class=\"line\">\tfor (uint32_t i = 0; i &lt; NELEM; ++i)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tA.push_back(my_rand());</div><div class=\"line\">\t\t// std::cout &lt;&lt; A[i] &lt;&lt; std::endl;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tauto start = std::chrono::system_clock::now();</div><div class=\"line\">\tauto end = std::chrono::system_clock::now();</div><div class=\"line\">\tauto elapsed_seconds = end - start;</div><div class=\"line\"></div><div class=\"line\">\tB = A;</div><div class=\"line\">\tstart = std::chrono::system_clock::now();</div><div class=\"line\">\tboost::sort::parallel_stable_sort(B.begin(), B.end());</div><div class=\"line\">\tend = std::chrono::system_clock::now();</div><div class=\"line\"></div><div class=\"line\">\telapsed_seconds = end - start;</div><div class=\"line\">\tstd::cout &lt;&lt; &quot;boost::sort::parallel_stable_sort elapsed time: &quot; &lt;&lt; std::chrono::duration&lt;double&gt;(elapsed_seconds).count() &lt;&lt; &quot;s\\n&quot;;</div><div class=\"line\"></div><div class=\"line\">\tB = A;</div><div class=\"line\">\tstart = std::chrono::system_clock::now();</div><div class=\"line\">\tconcurrency::parallel_sort(B.begin(), B.end());</div><div class=\"line\">\tend = std::chrono::system_clock::now();</div><div class=\"line\"></div><div class=\"line\">\telapsed_seconds = end - start;</div><div class=\"line\">\tstd::cout &lt;&lt; &quot;concurrency::parallel_sort elapsed time: &quot; &lt;&lt; std::chrono::duration&lt;double&gt;(elapsed_seconds).count() &lt;&lt; &quot;s\\n&quot;;</div><div class=\"line\"></div><div class=\"line\">\tB = A;</div><div class=\"line\">\tstart = std::chrono::system_clock::now();</div><div class=\"line\">\tstd::sort(B.begin(), B.end());</div><div class=\"line\">\tend = std::chrono::system_clock::now();</div><div class=\"line\"></div><div class=\"line\">\telapsed_seconds = end - start;</div><div class=\"line\"></div><div class=\"line\">\tstd::cout &lt;&lt; &quot;std::sort elapsed time: &quot; &lt;&lt; std::chrono::duration&lt;double&gt;(elapsed_seconds).count() &lt;&lt; &quot;s\\n&quot;;</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-19 17:50:41</p>\n</blockquote>\n"},{"title":"Pod usage","url":"http://code4fun.me/2019/04/19/pod/","content":"<h1 id=\"pod-使用\"><a href=\"#pod-使用\" class=\"headerlink\" title=\"pod 使用\"></a>pod 使用</h1><p>第一步 初始化 <code>pod init</code><br>第二步 加入相关项目<br>第三步 <code>pod install</code></p>\n<p>升级 pod<br><code>gem install cocoapods</code></p>\n<p>更换repo源<br><code>por repo remove master</code></p>\n<p><code>pod repo add master https://git.coding.net/hging/Specs.git</code></p>\n<p><code>pod repo update</code></p>\n<p><code>pod setup</code></p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-19 12:12:27</p>\n</blockquote>\n"},{"title":"Memory allocator","url":"http://code4fun.me/2019/04/19/memory allocator/","content":"<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-19 12:12:27</p>\n</blockquote>\n"},{"title":"write large file","url":"http://code4fun.me/2019/04/18/write large file/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">// writefiletest.cpp : This file contains the &apos;main&apos; function. Program execution begins and ends there.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#include &quot;pch.h&quot;</div><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">#include &lt;Windows.h&gt;</div><div class=\"line\">#include &lt;vector&gt;</div><div class=\"line\"></div><div class=\"line\">typedef unsigned __int64 UInt64;</div><div class=\"line\">typedef unsigned __int32 UInt32;</div><div class=\"line\"></div><div class=\"line\">bool</div><div class=\"line\">WriteLargeFile(HANDLE p_handle, LPCVOID p_buffer, UInt64 p_numberOfBytes, UInt32 p_maxLengthPerWrite = 1024 * 1024 * 1024UL)</div><div class=\"line\">&#123;</div><div class=\"line\">    UInt64 bytesLeft = p_numberOfBytes;</div><div class=\"line\">    UInt64 totalBytesWritten = 0;</div><div class=\"line\">    DWORD bytesWritten = 0;</div><div class=\"line\"></div><div class=\"line\">    while (bytesLeft &gt; p_maxLengthPerWrite)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (!WriteFile(p_handle, reinterpret_cast&lt;const char*&gt;(p_buffer) + totalBytesWritten, p_maxLengthPerWrite, &amp;bytesWritten, nullptr)</div><div class=\"line\">            || (p_maxLengthPerWrite != bytesWritten))</div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        totalBytesWritten += bytesWritten;</div><div class=\"line\">        bytesLeft -= bytesWritten;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (bytesLeft &gt; 0)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (!WriteFile(p_handle, reinterpret_cast&lt;const char*&gt;(p_buffer) + totalBytesWritten, static_cast&lt;UInt32&gt;(bytesLeft), &amp;bytesWritten, nullptr)</div><div class=\"line\">            || (bytesLeft != bytesWritten))</div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    std::vector&lt;UInt64&gt; m_docIdsToDelete;</div><div class=\"line\">\tm_docIdsToDelete.push_back(2);</div><div class=\"line\">\tm_docIdsToDelete.push_back(5);</div><div class=\"line\">\tm_docIdsToDelete.push_back(6);</div><div class=\"line\">\tm_docIdsToDelete.push_back(3);</div><div class=\"line\"></div><div class=\"line\">    std::unique_ptr&lt;std::remove_pointer&lt;HANDLE&gt;::type, decltype(&amp;::CloseHandle)&gt; debugFileHandle(nullptr, &amp;::CloseHandle);</div><div class=\"line\">    std::string s = &quot;zhzihats&quot;;</div><div class=\"line\">    debugFileHandle.reset(::CreateFileA(s.c_str(),</div><div class=\"line\">        GENERIC_WRITE,</div><div class=\"line\">        NULL,</div><div class=\"line\">        nullptr,</div><div class=\"line\">        CREATE_ALWAYS,</div><div class=\"line\">        FILE_ATTRIBUTE_NORMAL,</div><div class=\"line\">        nullptr));</div><div class=\"line\">    std::cout &lt;&lt; &quot;Hello World!\\n&quot;; </div><div class=\"line\">    WriteLargeFile(debugFileHandle.get(), reinterpret_cast&lt;char*&gt;(&amp;((m_docIdsToDelete)[0])), sizeof(UInt64) * m_docIdsToDelete.size());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;fstream&gt;</div><div class=\"line\">#include &lt;iterator&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include &lt;vector&gt;</div><div class=\"line\"></div><div class=\"line\">typedef uint64_t UInt64;</div><div class=\"line\">typedef uint32_t UInt32;</div><div class=\"line\">typedef void * LPCVOID;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">bool</div><div class=\"line\">WriteLargeFile(std::ofstream&amp; fileHandle, LPCVOID p_buffer, UInt64 p_numberOfBytes, UInt32 p_maxLengthPerWrite=3)</div><div class=\"line\">&#123;</div><div class=\"line\">    UInt64 bytesLeft = p_numberOfBytes;</div><div class=\"line\">    UInt64 totalBytesWritten = 0;</div><div class=\"line\"></div><div class=\"line\">    while (bytesLeft &gt; p_maxLengthPerWrite)</div><div class=\"line\">    &#123;</div><div class=\"line\">        fileHandle.write(reinterpret_cast&lt;const char*&gt;(p_buffer) + totalBytesWritten, p_maxLengthPerWrite);</div><div class=\"line\">        if (!fileHandle.good())</div><div class=\"line\">        &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        totalBytesWritten += p_maxLengthPerWrite;</div><div class=\"line\">        bytesLeft -= p_maxLengthPerWrite;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (bytesLeft &gt; 0)</div><div class=\"line\">    &#123;</div><div class=\"line\">        fileHandle.write(reinterpret_cast&lt;const char*&gt;(p_buffer) + totalBytesWritten, static_cast&lt;UInt32&gt;(bytesLeft));</div><div class=\"line\">        if (!fileHandle.good())</div><div class=\"line\">        &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    std::vector&lt;UInt64&gt; m_docIdsToDelete;</div><div class=\"line\">    m_docIdsToDelete.push_back(2);</div><div class=\"line\">    m_docIdsToDelete.push_back(5);</div><div class=\"line\">    m_docIdsToDelete.push_back(6);</div><div class=\"line\">    m_docIdsToDelete.push_back(3);</div><div class=\"line\">    std::string s = &quot;zhzihats&quot;;</div><div class=\"line\"></div><div class=\"line\">    std::ofstream debugFile(s.c_str(), std::ios::out | std::ios::binary);</div><div class=\"line\">    WriteLargeFile(debugFile, reinterpret_cast&lt;char*&gt;(&amp;((m_docIdsToDelete)[0])), sizeof(UInt64) * m_docIdsToDelete.size());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-18 15:54:35</p>\n</blockquote>\n"},{"title":"Fibers","url":"http://code4fun.me/2019/04/16/fibers/","content":"<p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/ProcThread/fibers\" target=\"_blank\" rel=\"external\">fibers api</a></p>\n<p>A Fiber is a lightweight thread that uses cooperative multitasking instead of preemptive multitasking. A running fiber must explicitly “yield” to allow another fiber to run, which makes their implementation much easier than kernel or user threads.</p>\n<p>A Coroutine is a component that generalizes a subroutine to allow multiple entry points for suspending and resuming execution at certain locations. Unlike subroutines, coroutines can exit by calling other coroutines, which may later return to the point where they were invoked in the original coroutine.</p>\n<p>A Green Thread is a thread that is scheduled by a virtual machine (VM) instead of natively by the underlying operating system. Green threads emulate multithreaded environments without relying on any native OS capabilities, and they are managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.</p>\n<h2 id=\"Fiber-Local-Storage\"><a href=\"#Fiber-Local-Storage\" class=\"headerlink\" title=\"Fiber Local Storage\"></a>Fiber Local Storage</h2><p>A fiber can use fiber local storage (FLS) to create a unique copy of a variable for each fiber. If no fiber switching occurs, FLS acts exactly the same as thread local storage. The FLS functions (FlsAlloc, FlsFree, FlsGetValue, and FlsSetValue) manipulate the FLS associated with the current thread. If the thread is executing a fiber and the fiber is switched, the FLS is also switched.</p>\n<p>To clean up the data associated with a fiber, call the DeleteFiber function. This data includes the stack, a subset of the registers, and the fiber data. If the currently running fiber calls DeleteFiber, its thread calls ExitThread and terminates. However, if the selected fiber of a thread is deleted by a fiber running in another thread, the thread with the deleted fiber is likely to terminate abnormally because the fiber stack has been freed.</p>\n<p>根据上面的描述我们可以发现,由于<code>TlsAlloc</code>函数没有带有free clalback的版本,而在没有fiber switch的情况下,FLS和TLS是等价的,所以可以用<code>FlsAlloc</code>在一定程度上代替其.</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-16 11:25:21</p>\n</blockquote>\n"},{"title":"Never heard before","url":"http://code4fun.me/2019/04/15/never heard before/","content":"<p>看图拉鼎twitter提到的感觉很有意思, 也记录一下之前没有听过的概念或事物.</p>\n<h2 id=\"2019-04\"><a href=\"#2019-04\" class=\"headerlink\" title=\"2019-04\"></a>2019-04</h2><ul>\n<li>kodi</li>\n<li>fiber 纤程</li>\n<li><a href=\"https://www.focusmate.com/\" target=\"_blank\" rel=\"external\">focusmate</a> 约个人一起工作, maybe try some time.</li>\n<li>PGO <a href=\"http://astroa.physics.metu.edu.tr/MANUALS/intel_ifc/mergedProjects/optaps_for/common/optaps_pgo_mthd.htm\" target=\"_blank\" rel=\"external\">document</a></li>\n<li>mt19937 随机数算法</li>\n<li><a href=\"http://www.oscca.gov.cn/sca/xxgk/bzgf.shtml\" target=\"_blank\" rel=\"external\">国密</a> 国家密码管理局推出的密码规范<h2 id=\"2019-05\"><a href=\"#2019-05\" class=\"headerlink\" title=\"2019-05\"></a>2019-05</h2></li>\n<li>git bisect</li>\n<li>Pre-increment is faster than post-increment because it does not require a copy of the object to be made.</li>\n<li>xperf</li>\n<li><a href=\"https://www.allhistory.com/\" target=\"_blank\" rel=\"external\">全历史</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11413855/why-is-transposing-a-matrix-of-512x512-much-slower-than-transposing-a-matrix-of\" target=\"_blank\" rel=\"external\">翻转一个512的矩阵比513的更慢</a></li>\n<li>Beancount，复式记账软件。<h2 id=\"2019-07\"><a href=\"#2019-07\" class=\"headerlink\" title=\"2019-07\"></a>2019-07</h2></li>\n<li><a href=\"https://github.com/facebook/zstd\" target=\"_blank\" rel=\"external\">zstd</a><h2 id=\"2019-08\"><a href=\"#2019-08\" class=\"headerlink\" title=\"2019-08\"></a>2019-08</h2></li>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/写入放大\" target=\"_blank\" rel=\"external\">写入放大</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/ltcg-link-time-code-generation?view=vs-2019\" target=\"_blank\" rel=\"external\">LTCG-link-time code generation</a></li>\n<li><a href=\"https://iknowwhatyoudownload.com/en/peer/\" target=\"_blank\" rel=\"external\">神奇的网站,查询该ip下的torrent</a><h2 id=\"2019-09\"><a href=\"#2019-09\" class=\"headerlink\" title=\"2019-09\"></a>2019-09</h2></li>\n<li>一件很神奇的事情，在Powershell中重定向默认是UTF-16而cmd是UTF-8，这个问题在Powershell 6.0 中被修复，但是目前电脑上都是5.1的版本。<h2 id=\"2019-10\"><a href=\"#2019-10\" class=\"headerlink\" title=\"2019-10\"></a>2019-10</h2></li>\n<li>一个跨平台app开发框架, <a href=\"https://github.com/revery-ui/revery\" target=\"_blank\" rel=\"external\">Revery</a><h2 id=\"2019-11\"><a href=\"#2019-11\" class=\"headerlink\" title=\"2019-11\"></a>2019-11</h2></li>\n<li><a href=\"https://magi.com/\" target=\"_blank\" rel=\"external\">十分酷的一个关系内容搜索</a></li>\n</ul>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-04-15 18:03:33</p>\n</blockquote>\n"},{"title":"Porting windows cpp api to linux","url":"http://code4fun.me/2019/04/15/windows and linux porting cpp/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ifdef PLATFORM_UNIX</div><div class=\"line\">   #define ZeroMemory(Destination,Length) memset((Destination),0,(Length))</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n<p>windows CaptureStackBackTrace -&gt; Linux backtrace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//to reserve virtual address space </div><div class=\"line\">//equivalent of VirtualAlloc(NULL, size, MEM_RESERVE, PAGE_NOACCESS)</div><div class=\"line\">void* ptr = mmap(NULL, size, PROT_NONE, (MAP_PRIVATE | MAP_ANON), -1, 0);</div><div class=\"line\">msync(ptr, size, (MS_SYNC | MS_INVALIDATE));</div><div class=\"line\"></div><div class=\"line\">//to free ALL virtual address space </div><div class=\"line\">//equivalent of VirtualFree(addr, 0, MEM_RELEASE)</div><div class=\"line\">//where &quot;size&quot; is the size of the entire virtual address space and &quot;addr&quot; the starting address</div><div class=\"line\">msync(addr, size, MS_SYNC); </div><div class=\"line\">munmap(addr, size);</div><div class=\"line\"></div><div class=\"line\">//to allocate physical memory</div><div class=\"line\">//equivalent of VirtualAlloc(addr, size, MEM_COMMIT, PAGE_READWRITE)</div><div class=\"line\">void* ptr = mmap(addr, size, (PROT_READ | PROT_WRITE), (MAP_FIXED | MAP_SHARED | MAP_ANON), -1, 0);</div><div class=\"line\">msync(addr, size, (MS_SYNC | MS_INVALIDATE));</div><div class=\"line\"></div><div class=\"line\">// instead of unmapping the address, we&apos;re just gonna trick </div><div class=\"line\">// the TLB to mark this as a new mapped area which, due to </div><div class=\"line\">// demand paging, will not be committed until used. VirtualFree(addr, size, MEM_DECOMMIT);</div><div class=\"line\"></div><div class=\"line\">mmap(addr, size, PROT_NONE, MAP_FIXED|MAP_PRIVATE|MAP_ANON, -1, 0);</div><div class=\"line\">msync(addr, size, MS_SYNC|MS_INVALIDATE);</div></pre></td></tr></table></figure>\n<h2 id=\"system-info\"><a href=\"#system-info\" class=\"headerlink\" title=\"system info\"></a>system info</h2><h3 id=\"c-11\"><a href=\"#c-11\" class=\"headerlink\" title=\"c++ 11\"></a>c++ 11</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//may return 0 when not able to detect</div><div class=\"line\">unsigned concurentThreadsSupported = std::thread::hardware_concurrency();</div></pre></td></tr></table></figure>\n<h3 id=\"win32\"><a href=\"#win32\" class=\"headerlink\" title=\"win32\"></a>win32</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">SYSTEM_INFO sysinfo;</div><div class=\"line\">GetSystemInfo(&amp;sysinfo);</div><div class=\"line\">int numCPU = sysinfo.dwNumberOfProcessors;</div><div class=\"line\">printf(&quot;%s %d\\n\\n&quot;, &quot;PageSize[Bytes] :&quot;, sysInfo.dwPageSize);</div><div class=\"line\"></div><div class=\"line\">MEMORYSTATUSEX mem;</div><div class=\"line\">mem.dwLength = sizeof(mem);</div><div class=\"line\">LogAssert(GlobalMemoryStatusEx(&amp;mem));</div><div class=\"line\">UInt32 totalPhysicalMemoryInMB = static_cast&lt;UInt32&gt;(mem.ullTotalPhys / c_BytesPerMegabyte);</div></pre></td></tr></table></figure>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">int numCPU = sysconf(_SC_NPROCESSORS_ONLN);</div><div class=\"line\">long pagesize = sysconf(_SC_PAGE_SIZE);</div></pre></td></tr></table></figure>\n<p><a href=\"http://man7.org/linux/man-pages/man2/sysinfo.2.html\" target=\"_blank\" rel=\"external\">sysinfo</a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"sys/sysinfo.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">struct</span> sysinfo memInfo;</div><div class=\"line\"></div><div class=\"line\">sysinfo (&amp;memInfo);</div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totalVirtualMem = memInfo.totalram;</div><div class=\"line\"><span class=\"comment\">//Add other values in next statement to avoid int overflow on right hand side...</span></div><div class=\"line\">totalVirtualMem += memInfo.totalswap;</div><div class=\"line\">totalVirtualMem *= memInfo.mem_unit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> virtualMemUsed = memInfo.totalram - memInfo.freeram;</div><div class=\"line\"><span class=\"comment\">//Add other values in next statement to avoid int overflow on right hand side...</span></div><div class=\"line\">virtualMemUsed += memInfo.totalswap - memInfo.freeswap;</div><div class=\"line\">virtualMemUsed *= memInfo.mem_unit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totalPhysMem = memInfo.totalram;</div><div class=\"line\"><span class=\"comment\">//Multiply in next statement to avoid int overflow on right hand side...</span></div><div class=\"line\">totalPhysMem *= memInfo.mem_unit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> physMemUsed = memInfo.totalram - memInfo.freeram;</div><div class=\"line\"><span class=\"comment\">//Multiply in next statement to avoid int overflow on right hand side...</span></div><div class=\"line\">physMemUsed *= memInfo.mem_unit;</div></pre></td></tr></table></figure></p>\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Sleep(</div><div class=\"line\">  DWORD dwMilliseconds</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">std::this_thread::sleep_for(std::chrono::milliseconds(100));</div></pre></td></tr></table></figure>\n<h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h2><h3 id=\"win32-1\"><a href=\"#win32-1\" class=\"headerlink\" title=\"win32\"></a>win32</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GetSystemTimeAsFileTime</div><div class=\"line\">LPFILETIME</div><div class=\"line\">FILETIME</div></pre></td></tr></table></figure>\n<h3 id=\"cross-platform\"><a href=\"#cross-platform\" class=\"headerlink\" title=\"cross platform\"></a>cross platform</h3><p><a href=\"https://zh.cppreference.com/w/cpp/header/chrono\" target=\"_blank\" rel=\"external\">chrono</a></p>\n<p><a href=\"https://zh.cppreference.com/w/cpp/chrono/system_clock/now\" target=\"_blank\" rel=\"external\">std::chrono::system_clock::now()</a></p>\n<h2 id=\"file-system\"><a href=\"#file-system\" class=\"headerlink\" title=\"file system\"></a>file system</h2><h3 id=\"win32-2\"><a href=\"#win32-2\" class=\"headerlink\" title=\"win32\"></a>win32</h3><p>WIN32_FIND_DATAA FindFirstFileA FindNextFileA GetTempPathA</p>\n<h3 id=\"cross-platform-1\"><a href=\"#cross-platform-1\" class=\"headerlink\" title=\"cross platform\"></a>cross platform</h3><p><a href=\"https://www.boost.org/doc/libs/1_38_0/libs/filesystem/doc/index.htm\" target=\"_blank\" rel=\"external\">boost::filesystem</a></p>\n<p><a href=\"https://stackoverflow.com/questions/612097/how-can-i-get-the-list-of-files-in-a-directory-using-c-or-c\" target=\"_blank\" rel=\"external\">some example in SO</a></p>\n<p><a href=\"https://stackoverflow.com/questions/1257721/can-i-use-a-mask-to-iterate-files-in-a-directory-with-boost\" target=\"_blank\" rel=\"external\">use boost regex as a mask</a></p>\n<p>temp_directory_path</p>\n<h2 id=\"stdcall\"><a href=\"#stdcall\" class=\"headerlink\" title=\"_stdcall\"></a>_stdcall</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// https://stackoverflow.com/questions/52713849/why-does-gcc-ignore-attribute-stdcall</div><div class=\"line\">#ifndef XRAND2_API</div><div class=\"line\">#ifndef PLATFORM_UNIX</div><div class=\"line\">#define XRAND2_API __stdcall</div><div class=\"line\">#else</div><div class=\"line\">#define XRAND2_API __attribute__((stdcall))</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#ifdef PLATFORM_UNIX</div><div class=\"line\">    #define CDECAL_MODIFIER  __attribute__((cdecl))</div><div class=\"line\">#else</div><div class=\"line\">    #define CDECAL_MODIFIER __cdecl</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n<p>一些windows下的type的定义，<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/66996877-9dd4-477d-a811-30e6c1a5525d\" target=\"_blank\" rel=\"external\">type</a></p>\n<h2 id=\"thread\"><a href=\"#thread\" class=\"headerlink\" title=\"thread\"></a>thread</h2><p>std::thread 可以变为linux或者win32自己的thread,设置优先级 <a href=\"https://zh.cppreference.com/w/cpp/thread/thread/native_handle\" target=\"_blank\" rel=\"external\">native_handle</a></p>\n<h2 id=\"char-util\"><a href=\"#char-util\" class=\"headerlink\" title=\"char util\"></a>char util</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">strcpy_s -&gt; strcpy</div><div class=\"line\"></div><div class=\"line\">// but this will lead a problem, if the dest char array is not initilized, the result will be wrong.!</div><div class=\"line\">strncpy_s -&gt; strncpy https://zh.cppreference.com/w/c/string/byte/strncpy _TRUNCATE is size of dest</div><div class=\"line\"></div><div class=\"line\">_snprintf -&gt; snprintf</div><div class=\"line\">sprintf_s -&gt; snprintf</div><div class=\"line\">strncat_s -&gt; strncat https://zh.cppreference.com/w/c/string/byte/strncat</div><div class=\"line\">strcat_s -&gt; strcat https://zh.cppreference.com/w/c/string/byte/strcat</div><div class=\"line\">sscanf_s -&gt; sscanf</div><div class=\"line\">StringCchPrintfA -&gt; snprintf</div><div class=\"line\">printf UInt64 I64u</div></pre></td></tr></table></figure>\n<h2 id=\"atomic\"><a href=\"#atomic\" class=\"headerlink\" title=\"atomic\"></a>atomic</h2><ul>\n<li>Interlockedxxx -&gt; std::atomic</li>\n<li>InterlockedIncrement -&gt; atomic_inc</li>\n<li>InterlockedDecrement -&gt; atomic_dec<h2 id=\"CONDITION-VARIABLE\"><a href=\"#CONDITION-VARIABLE\" class=\"headerlink\" title=\"CONDITION_VARIABLE\"></a>CONDITION_VARIABLE</h2><h3 id=\"win32-3\"><a href=\"#win32-3\" class=\"headerlink\" title=\"win32\"></a>win32</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CONDITION_VARIABLE</div><div class=\"line\">WakeAllConditionVariable</div><div class=\"line\">InitializeConditionVariable</div><div class=\"line\">InitializeCriticalSectionAndSpinCount</div><div class=\"line\">WakeConditionVariable</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"std\"><a href=\"#std\" class=\"headerlink\" title=\"std\"></a>std</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">condition_variable</div><div class=\"line\">wait</div><div class=\"line\">wait_for</div><div class=\"line\">notify_one</div><div class=\"line\">notify_all</div></pre></td></tr></table></figure>\n<h2 id=\"mutex\"><a href=\"#mutex\" class=\"headerlink\" title=\"mutex\"></a>mutex</h2><h3 id=\"win32-4\"><a href=\"#win32-4\" class=\"headerlink\" title=\"win32\"></a>win32</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CRITICAL_SECTION</div><div class=\"line\">EnterCriticalSection</div><div class=\"line\">LeaveCriticalSection</div><div class=\"line\">InitializeCriticalSectionAndSpinCount</div><div class=\"line\">SleepConditionVariableCS</div></pre></td></tr></table></figure>\n<h3 id=\"std-1\"><a href=\"#std-1\" class=\"headerlink\" title=\"std\"></a>std</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">std::mutex</div><div class=\"line\">lock</div><div class=\"line\">unlock</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-04-15 15:40:13</p>\n</blockquote>\n"},{"title":"windows atomic in C++","url":"http://code4fun.me/2019/04/15/windows atomic/","content":"<h2 id=\"Differences-between-InterlockedIncrement64-and-InterlockedIncrementNoFence64\"><a href=\"#Differences-between-InterlockedIncrement64-and-InterlockedIncrementNoFence64\" class=\"headerlink\" title=\"Differences between InterlockedIncrement64 and InterlockedIncrementNoFence64\"></a>Differences between <code>InterlockedIncrement64</code> and <code>InterlockedIncrementNoFence64</code></h2><p><code>InterlockedIncrement64</code> generates a full memory barrier (or fence) to ensure that memory operations are completed in order.</p>\n<p><code>InterlockedIncrementNoFence64</code> generates no memory barriers (or fences) and does not guarantee that independent memory operations before or after it are completed in order.</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-15 15:16:42</p>\n</blockquote>\n"},{"title":"TLS for linux and windows","url":"http://code4fun.me/2019/04/15/tls/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#include &lt;new&gt;</div><div class=\"line\">#include &lt;cassert&gt;</div><div class=\"line\"></div><div class=\"line\">#ifdef __linux__</div><div class=\"line\">#include &lt;pthread.h&gt;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">typedef void * TLSValueType;</div><div class=\"line\">typedef void (* TLSInitCleanupFunc)(void *);</div><div class=\"line\"></div><div class=\"line\">#ifdef _MSC_VER</div><div class=\"line\">typedef DWORD TLSKeyType;</div><div class=\"line\">#else\t//__linux__</div><div class=\"line\">typedef pthread_key_t * TLSKeyType;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">inline TLSKeyType TLSInit(TLSInitCleanupFunc);</div><div class=\"line\">inline TLSValueType TLSGetValue(TLSKeyType);</div><div class=\"line\">inline void TLSSetValue(TLSKeyType, TLSValueType);</div><div class=\"line\">inline void TLSCleanup(TLSKeyType);</div><div class=\"line\"></div><div class=\"line\">#ifdef _MSC_VER</div><div class=\"line\"></div><div class=\"line\">TLSKeyType TLSInit(TLSInitCleanupFunc)</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn TlsAlloc();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">FLSKeyType FLSInit(FLSInitCleanupFunc cleanupfunc)</div><div class=\"line\">&#123;</div><div class=\"line\">    return FlsAlloc(cleanupfunc);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TLSValueType TLSGetValue(TLSKeyType key)</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn TlsGetValue(key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TLSSetValue(TLSKeyType key, TLSValueType val)</div><div class=\"line\">&#123;</div><div class=\"line\">\tTlsSetValue(key, val);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TLSCleanup(TLSKeyType key)</div><div class=\"line\">&#123;</div><div class=\"line\">\tTlsFree(key);</div><div class=\"line\">&#125;</div><div class=\"line\">#else\t//__linux__</div><div class=\"line\"></div><div class=\"line\">TLSKeyType TLSInit(TLSInitCleanupFunc cleanupfunc)</div><div class=\"line\">&#123;</div><div class=\"line\">\tpthread_key_t * key = new pthread_key_t;</div><div class=\"line\">\tpthread_key_create(key, cleanupfunc);</div><div class=\"line\">\treturn key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TLSValueType TLSGetValue(TLSKeyType key)</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn pthread_getspecific(*key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TLSSetValue(TLSKeyType key, TLSValueType value)</div><div class=\"line\">&#123;</div><div class=\"line\">\tpthread_setspecific(*key, value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TLSCleanup(TLSKeyType key)</div><div class=\"line\">&#123;</div><div class=\"line\">\tpthread_key_delete(*key);</div><div class=\"line\">\tdelete key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-15 15:09:51</p>\n</blockquote>\n"},{"title":"cppjieba 分词","url":"http://code4fun.me/2019/04/13/jieba tokenlization/","content":"<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-13 19:42:44</p>\n</blockquote>\n"},{"title":"warning implicit dereference will not access object of type volatile","url":"http://code4fun.me/2019/04/08/gcc_volatile/","content":"<p>根据<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.0.4/gcc/Volatiles.html\" target=\"_blank\" rel=\"external\">gcc 官方文档</a>，这种情况的出现是由于:</p>\n<p>When using a reference to volatile, G++ does not treat equivalent expressions as accesses to volatiles, but instead issues a warning that no volatile is accessed. The rationale for this is that otherwise it becomes difficult to determine where volatile access occur, and not possible to ignore the return value from functions returning volatile references. Again, if you wish to force a read, cast the reference to an rvalue. </p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-04-08 17:15:45</p>\n</blockquote>\n"},{"title":"SPSCQueue 介绍","url":"http://code4fun.me/2019/03/26/SPSCQueue/","content":"<h2 id=\"SPSCQueue\"><a href=\"#SPSCQueue\" class=\"headerlink\" title=\"SPSCQueue\"></a>SPSCQueue</h2><p>A fast single-producer, single-consumer lock-free queue for C++, <a href=\"https://www.boost.org/doc/libs/1_53_0/doc/html/boost/lockfree/spsc_queue.html\" target=\"_blank\" rel=\"external\">boost library</a></p>\n<p>无锁队列之单生产者单消费者</p>\n<p>现实应用场景中经常会用到单生产者单消费者或多生产者多消费者模型，例如一个写线程，接收到数据写入缓冲区，另一个线程读出并处理。为了尽可能减少锁所占用的时间，可使用gcc的一些原子操作来代替pthread_mutex_t或pthread_spinlock_t。</p>\n<p>核心思想：预分配一段连续的内存，用min<em>seq</em>表示读的位置，max<em>seq</em>表示写的位置，当写满或者读完时返回错误；如果不同步有可能发生的错误是：读线程读取max<em>seq</em>时，刚好写线程在修改max<em>seq</em>，min<em>seq</em>同上，故使用__sync_add_and_fetch 函数自增0或者1来读取或者修改变量。</p>\n<p>注意事项：分配的内存大小一定要足够大，否则可能会造成数据的丢失。<br>就好比一件仓库，有人不停往里存放东西，有人不停往外取，当仓库较小时，空间满时，可能会出现存放失败，那么这件商品就丢失了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;boost/utility.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"basic_types.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// One lock free queue with a great performance with following limitations:</span></div><div class=\"line\"><span class=\"comment\">// 1: Only support one consumer and one producer at most.</span></div><div class=\"line\"><span class=\"comment\">// 2: Put/Get times can't exceed MAX_UINT64.</span></div><div class=\"line\"><span class=\"comment\">// 3: Read/write of m_head/m_tail is atomic (single instruction).</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"keyword\">class</span> SPSCQueue : <span class=\"keyword\">private</span> boost::noncopyable</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    SPSCQueue() : m_ptrArray(<span class=\"literal\">NULL</span>), m_maxQueueLength(<span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    SPSCQueue(UInt64 p_maxQueueLength) : m_ptrArray(<span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Reset(p_maxQueueLength);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Reset max queue length.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Reset</span><span class=\"params\">(UInt64 p_maxQueueLength)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        LogAssert (p_maxQueueLength &gt; <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">delete</span> []m_ptrArray;</div><div class=\"line\">        m_maxQueueLength = p_maxQueueLength;</div><div class=\"line\">        m_ptrArray = <span class=\"keyword\">new</span> T*[m_maxQueueLength];</div><div class=\"line\">        m_head = m_tail = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ~SPSCQueue()</div><div class=\"line\">    &#123;</div><div class=\"line\">        LogAssert(Empty());</div><div class=\"line\">        <span class=\"keyword\">delete</span> []m_ptrArray;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add new object to queue's tail.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PutWait</span><span class=\"params\">(T *p_object)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> backoff = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (m_tail - m_head &gt;= m_maxQueueLength)</div><div class=\"line\">        &#123;</div><div class=\"line\">            SpinPauseWithBackoff (backoff);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        m_ptrArray[m_tail % m_maxQueueLength] = p_object;</div><div class=\"line\">        ++m_tail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Get object from queue's head.</span></div><div class=\"line\">    <span class=\"function\">T* <span class=\"title\">GetWait</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> backoff = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (m_tail == m_head)</div><div class=\"line\">        &#123;</div><div class=\"line\">            SpinPauseWithBackoff (backoff);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        T* ret = m_ptrArray[m_head % m_maxQueueLength];</div><div class=\"line\">        ++m_head;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Get object from queue's head, caller need to make sure queue is not empty,</span></div><div class=\"line\">    <span class=\"comment\">// otherwise the result is not defined.</span></div><div class=\"line\">    <span class=\"function\">T* <span class=\"title\">Get</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        T* ret = m_ptrArray[m_head % m_maxQueueLength];</div><div class=\"line\">        ++m_head;</div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">T* <span class=\"title\">Peek</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> m_ptrArray[m_head % m_maxQueueLength];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Peek object from queue's head.</span></div><div class=\"line\">    <span class=\"function\">T* <span class=\"title\">PeekWait</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> backoff = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (m_tail == m_head)</div><div class=\"line\">        &#123;</div><div class=\"line\">            SpinPauseWithBackoff (backoff);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> m_ptrArray[m_head % m_maxQueueLength];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">UInt64 <span class=\"title\">Size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> m_tail - m_head;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> m_head == m_tail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SpinPauseWithBackoff</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; p_backoff)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> yieldCount = p_backoff;</div><div class=\"line\">        <span class=\"keyword\">do</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            YieldProcessor ();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (--yieldCount &gt;= <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"comment\">// Backoff is always power of 2 minus 1.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (p_backoff &lt;= <span class=\"number\">511</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            p_backoff = p_backoff * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Buffer array.</span></div><div class=\"line\">    T** m_ptrArray;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Max Queue length.</span></div><div class=\"line\">    UInt64 m_maxQueueLength;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Queue's head index.</span></div><div class=\"line\">    <span class=\"number\">__</span>declspec(align(<span class=\"number\">64</span>)) <span class=\"keyword\">volatile</span> UInt64 m_head;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Queue's tail index.</span></div><div class=\"line\">    <span class=\"number\">__</span>declspec(align(<span class=\"number\">64</span>)) <span class=\"keyword\">volatile</span> UInt64 m_tail;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"cmakelist","url":"http://code4fun.me/2019/03/26/cmakelist/","content":"<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p><a href=\"https://cmake.org/cmake-tutorial/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>用<code>cmake</code>编译<code>C++</code>的时候，必须写一个<code>cmakelist.txt</code>，其具体的写法如下。</p>\n<p>首先注释是<code>#</code>后面的部分。</p>\n<p>在文件最开始指明依赖的<code>cmake</code>的版本。<code>cmake_minimum_required(VERSION 3.9.0)</code></p>\n<p>然后是指定生成的工程名 <code>PROJECT(test)</code></p>\n<p>变量的定义通过<code>SET(sampleName MyApp)</code>，前面为变量名，后面为值。</p>\n<p>然后添加依赖的<code>package</code>，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">find_package(PCL 1.2 REQUIRED)</div><div class=\"line\">FIND_PACKAGE(MRPT REQUIRED base;bayes;obs;gui)</div></pre></td></tr></table></figure>\n<p>下面是指定<code>include</code>文件夹，其中既可以使用来自<code>package</code>中的定义，又可以使用绝对路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">include_directories($&#123;PCL_INCLUDE_DIRS&#125;)</div><div class=\"line\">include_directories(&quot;G:/Matlab/extern/include&quot;)</div><div class=\"line\">include_directories(&quot;C:/Program Files/MobileRobots/Aria/include&quot;)</div></pre></td></tr></table></figure>\n<p>指定<code>additional library</code>文件夹，用法同<code>include_directories</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">link_directories($&#123;PCL_LIBRARY_DIRS&#125;)</div><div class=\"line\">link_directories(&quot;G:/Matlab/extern/lib/win32/microsoft&quot;)</div><div class=\"line\">link_directories(&quot;C:/Program Files/MobileRobots/Aria/lib&quot;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># here we add definitions for any package if requred.</div><div class=\"line\">add_definitions($&#123;PCL_DEFINITIONS&#125;)</div><div class=\"line\"></div><div class=\"line\"># The following line is very important.</div><div class=\"line\"># It specifies the executable name. Here the executable is the first parameter i.e. MyApp and a file MyApp.exe will be created on</div><div class=\"line\"># compilation in windows platform.</div><div class=\"line\"># Followed by the executable name come all your source and header files.</div><div class=\"line\"># All cpp fles will be clubbed into source folder and all .h files will be added to header files folder of the project.</div><div class=\"line\">add_executable (MyApp Local.cpp part.h grab.h interface.h test.cpp test.h)</div><div class=\"line\"></div><div class=\"line\"># There may be some additional dependencies which you may have to specify for the project, which you may do as in following lines.</div><div class=\"line\"># Note that first parameter is the executable name.</div><div class=\"line\">target_link_libraries (MyApp $&#123;PCL_LIBRARIES&#125; libeng.lib libmx.lib libmex.lib libmat.lib Aria.lib winmm.lib wsock32.lib)</div><div class=\"line\"># Add the required libraries for linking:</div><div class=\"line\">TARGET_LINK_LIBRARIES($&#123;sampleName&#125;</div><div class=\"line\">$&#123;MRPT_LIBS&#125; # This is filled by FIND_PACKAGE(MRPT ...)</div><div class=\"line\">&quot;&quot; # Optional extra libs...</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h2 id=\"将其他平台的项目迁移到-CMake\"><a href=\"#将其他平台的项目迁移到-CMake\" class=\"headerlink\" title=\"将其他平台的项目迁移到 CMake\"></a>将其他平台的项目迁移到 CMake</h2><p>CMake 可以很轻松地构建出在适合各个平台执行的工程环境。而如果当前的工程环境不是 CMake ，而是基于某个特定的平台，是否可以迁移到 CMake 呢？答案是可能的。下面针对几个常用的平台，列出了它们对应的迁移方案。</p>\n<h3 id=\"autotools\"><a href=\"#autotools\" class=\"headerlink\" title=\"autotools\"></a>autotools</h3><ul>\n<li>am2cmake 可以将 autotools 系的项目转换到 CMake，这个工具的一个成功案例是 KDE 。</li>\n<li>Alternative Automake2CMake 可以转换使用 automake 的 KDevelop 工程项目。</li>\n<li>Converting autoconf tests<h3 id=\"qmake\"><a href=\"#qmake\" class=\"headerlink\" title=\"qmake\"></a>qmake</h3></li>\n<li>qmake converter 可以转换使用 QT 的 qmake 的工程。<h3 id=\"Visual-Studio\"><a href=\"#Visual-Studio\" class=\"headerlink\" title=\"Visual Studio\"></a>Visual Studio</h3></li>\n<li>vcproj2cmake.rb 可以根据 Visual Studio 的工程文件（后缀名是 .vcproj 或 .vcxproj）生成 CMakeLists.txt 文件。</li>\n<li>vcproj2cmake.ps1 vcproj2cmake 的 PowerShell 版本。</li>\n<li>folders4cmake 根据 Visual Studio 项目文件生成相应的 “source_group” 信息，这些信息可以很方便的在 CMake 脚本中使用。支持 Visual Studio 9/10 工程文件。<h3 id=\"CMakeLists-txt-自动推导\"><a href=\"#CMakeLists-txt-自动推导\" class=\"headerlink\" title=\"CMakeLists.txt 自动推导\"></a>CMakeLists.txt 自动推导</h3></li>\n<li>gencmake 根据现有文件推导 CMakeLists.txt 文件。</li>\n<li>CMakeListGenerator 应用一套文件和目录分析创建出完整的 CMakeLists.txt 文件。仅支持 Win32 平台。</li>\n</ul>\n"},{"title":"cdecl 简介","url":"http://code4fun.me/2019/03/26/cdecl/","content":"<h2 id=\"cdecl\"><a href=\"#cdecl\" class=\"headerlink\" title=\"cdecl\"></a>cdecl</h2><table>\n<thead>\n<tr>\n<th>要点</th>\n<th>__cdecl</th>\n<th>__stdcall</th>\n<th>__fastcall</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数传递方式</td>\n<td>右 -&gt; 左</td>\n<td>右 -&gt; 左</td>\n<td>左边开始的两个不大于 4 字节（DWORD）的参数分别放在 ECX 和 EDX 寄存器，其余的参数自右向左压栈传送</td>\n</tr>\n<tr>\n<td>清理栈方</td>\n<td>调用者清理</td>\n<td>被调用函数清理</td>\n<td>被调用函数清理</td>\n</tr>\n<tr>\n<td>适用场合</td>\n<td>C/C++、MFC 的默认方式; 可变参数的时候使用;</td>\n<td>Win API</td>\n<td>要求速度快</td>\n</tr>\n<tr>\n<td>C 编译修饰约定</td>\n<td>_functionname</td>\n<td>_functionname@number</td>\n<td>@functionname@number</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"cmd commands","url":"http://code4fun.me/2019/03/26/cmd-commands/","content":"<h2 id=\"for-loop\"><a href=\"#for-loop\" class=\"headerlink\" title=\"for loop\"></a>for loop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">for /l %%x in (1, 1, 3) do (</div><div class=\"line\">    echo %%x</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">for %%x in (&quot;300&quot; &quot;500&quot; &quot;1999&quot;) do (</div><div class=\"line\">    echo %%x</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>update variables in for loop, put <code>setlocal enabledelayedexpansion</code> in the start of the file, and use <code>!var!</code>to reference a variable.</p>\n<p><code>echo xxx&gt;&gt;file</code>can be used to append text to a file, but there should be <code>echo xxx&gt;file</code> to create the file.</p>\n"},{"title":"typedef vs using","url":"http://code4fun.me/2019/03/26/typedef vs using/","content":"<h2 id=\"优先使用别名声明而不是-typedef\"><a href=\"#优先使用别名声明而不是-typedef\" class=\"headerlink\" title=\"优先使用别名声明而不是 typedef\"></a>优先使用别名声明而不是 typedef</h2><p>C++11 中新增了别名声明，对于之前的 typedef\b语句，可以使用别名声明语法写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// FP等价于一个函数指针，这个函数的参数是一个int类型和</div><div class=\"line\">// std::string常量类型，没有返回值</div><div class=\"line\">typedef void (*FP)(int, const std::string&amp;);      // typedef</div><div class=\"line\"></div><div class=\"line\">// 同上</div><div class=\"line\">using FP = void (*)(int, const std::string&amp;);     // 别名声明</div></pre></td></tr></table></figure>\n<p>也许别名声明看起来可读性更好，但\u001c是这并不足以成为放弃 typedef 使用别名声明的决定性理由。别名声明的真正优势并不在这，而在于它能够定义模板别名，<a id=\"more\"></a></p>\n<p>typedef 需要新定义一个模板类来模拟实现模板别名功能，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">struct MyAllocList &#123;</div><div class=\"line\">    typedef std::list&lt;T, MyAlloc&lt;T&gt;&gt; type;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">MyAllocList&lt;Widget&gt;::type lw;                   // 客户代码</div></pre></td></tr></table></figure>\n<p>而使用别名声明则很直接，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typname T&gt;</div><div class=\"line\">using MyAllocList = std::list&lt;T, MyAlloc&lt;T&gt;&gt;;</div><div class=\"line\"></div><div class=\"line\">MyAllocList&lt;Widget&gt; lw;                         // 客户代码</div></pre></td></tr></table></figure>\n<p>特别当你在另一个模板类中使用该类型别名的时候，对比 typedef，别名声明语法的优势则显得更加明显，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typename T&gt;                            // Widget&lt;T&gt; 包含</div><div class=\"line\">class Widget&#123;                                   // 一个 MyAloocList&lt;T&gt;</div><div class=\"line\">private:                                        // 作为一个数据成员</div><div class=\"line\">  typename MyAllocList&lt;T&gt;::type list;</div><div class=\"line\">  ...</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p>因为无法知道名称 MyAllocList<t>::type 究竟是一个类型，还是一个变量，所以需要加上 typename 来明确表明这是一个类型。而别名声明则没有冗余的\btypename 和::type，</t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;typname T&gt;</div><div class=\"line\">using MyAllocList = std::list&lt;T, MyAlloc&lt;T&gt;&gt;;   // 和以前一样</div><div class=\"line\"></div><div class=\"line\">template&lt;typename T&gt;</div><div class=\"line\">class Widget &#123;</div><div class=\"line\">private:</div><div class=\"line\">\tMyAllocList&lt;T&gt; list;  // 编辑器知道MyAllocList&lt;T&gt;一定是一个类型</div><div class=\"line\">\t...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>另外，对于标准库中的 type traits，C++11 提供的接口都是基于 typedef 的，而在 C++14 中都提供了相应更为简洁的别名声明的版本，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">std::remove_const&lt;T&gt;::type                // C++11: const T -&gt; T</div><div class=\"line\">std::remove_const_t&lt;T&gt;                    // 等价的C++14</div><div class=\"line\"></div><div class=\"line\">std::remove_reference&lt;T&gt;::type            // C++11: T&amp;/T&amp;&amp; -&gt; T</div><div class=\"line\">std::remove_reference_t&lt;T&gt;                // 等价的C++14</div><div class=\"line\"></div><div class=\"line\">std::add_lvalue_reference&lt;T&gt;::type        // C++11: T -&gt; T&amp;</div><div class=\"line\">std::add_lvalue_reference_t&lt;T&gt;            // 等价的C++14</div></pre></td></tr></table></figure>\n<p>它的定义很简单，即使只能用 C++11 的环境也只需自己简单的定义一下即可，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">template&lt;class T&gt;</div><div class=\"line\">using remove_const_t = typename remove_const&lt;T&gt;::type;</div><div class=\"line\"></div><div class=\"line\">template&lt;class T&gt;</div><div class=\"line\">using remove_reference_t = typename remove_reference&lt;T&gt;::type;</div><div class=\"line\"></div><div class=\"line\">template&lt;class T&gt;</div><div class=\"line\">using add_lvalue_reference_t = typename add_lvalue_reference&lt;T&gt;::type;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>typedef 不支持模板化，但是别名声明支持</li>\n<li>模板别名避免了::type 后缀，在模板中，typedef 还经常需要使用 typename 前缀</li>\n<li>C++14 为 C++11 中的 type traits 提供了模板别名</li>\n</ul>\n"},{"title":"compiler","url":"http://code4fun.me/2019/03/26/compiler/","content":"<p>gcc and g++ are compiler-drivers of the GNU Compiler Collection (which was once upon a time just the GNU C Compiler).<br><code>g++</code> is equivalent to <code>gcc -xc++ -lstdc++ -shared-libgcc</code> (the 1st is a compiler option, the 2nd two are linker options). This can be checked by running both with the <code>-v</code> option (it displays the backend toolchain commands being run). The more detailed parameter can be seen at <a href=\"https://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_3.html\" target=\"_blank\" rel=\"external\">official site</a>, for example <code>-O3</code> means optimization.</p>\n<p>The main differences between <code>gcc</code> and <code>g++</code>:</p>\n<ul>\n<li>gcc will compile: <code>*.c/*.cpp</code> files as C and C++ respectively.</li>\n<li>g++ will compile: <code>*.c/*.cpp</code> files but they will all be treated as C++ files.</li>\n<li>Also if you use <code>g++</code> to link the object files it automatically links in the std C++ libraries (gcc does not do this).</li>\n<li>gcc compiling C files has fewer predefined macros.</li>\n<li>gcc compiling <code>*.cpp</code> and <code>g++</code> compiling <code>*.c/*.cpp</code> files has a few extra macros.</li>\n</ul>\n<ol>\n<li>gcc是GNU Compiler Collection（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很多种编程语言（括C、C++、Objective-C、Fortran、Java等等）。</li>\n<li>当你的程序只有一个源文件时，直接就可以用gcc命令编译它。</li>\n<li>但是当你的程序包含很多个源文件时，用gcc命令逐个去编译时，你就很容易混乱而且工作量大</li>\n<li>所以出现了make工具make工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用makefile文件中用户指定的命令来进行编译和链接的。</li>\n<li>makefile是什么？简单的说就像一首歌的乐谱，make工具就像指挥家，指挥家根据乐谱指挥整个乐团怎么样演奏，make工具就根据makefile中的命令进行编译和链接的。</li>\n<li>makefile命令中就包含了调用gcc（也可以是别的编译器）去编译某个源文件的命令。</li>\n<li>makefile在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写makefile也是非常麻烦的，如果换了个平台makefile又要重新修改。</li>\n<li>这时候就出现了Cmake这个工具，cmake就可以更加简单的生成makefile文件给上面那个make用。当然cmake还有其他功能，就是可以跨平台生成对应平台能用的makefile，你不用再自己去修改了。</li>\n<li>可是cmake根据什么生成makefile呢？它又要根据一个叫CMakeLists.txt文件（学名：组态档）去生成makefile。</li>\n<li>到最后CMakeLists.txt文件谁写啊？亲，是你自己手写的。</li>\n<li>当然如果你用IDE，类似VS这些一般它都能帮你弄好了，你只需要按一下那个三角形</li>\n</ol>\n"},{"title":"opencv install","url":"http://code4fun.me/2019/03/26/opencv install on windows/","content":"<h2 id=\"Boost-c-Librairies-thread-and-system-are-needed\"><a href=\"#Boost-c-Librairies-thread-and-system-are-needed\" class=\"headerlink\" title=\"Boost - c++ Librairies (thread and system are needed)\"></a>Boost - c++ Librairies (thread and system are needed)</h2><p><code>sudo apt-get install libboost-all-dev</code></p>\n<h2 id=\"Eigen-3-Linear-algebra\"><a href=\"#Eigen-3-Linear-algebra\" class=\"headerlink\" title=\"Eigen 3 - Linear algebra\"></a>Eigen 3 - Linear algebra</h2><p><code>sudo apt-get install libeigen3-dev</code></p>\n<h2 id=\"opencv\"><a href=\"#opencv\" class=\"headerlink\" title=\"opencv\"></a>opencv</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install build-essential cmake git pkg-config</div><div class=\"line\"><span class=\"comment\"># sudo apt-get install libgtk2.0-dev libavcodec-dev libavformat-dev libswscale-dev</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Itseez/opencv.git</div><div class=\"line\">git checkout 3.4.4</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Itseez/opencv_contrib.git</div><div class=\"line\">git checkout 3.4.4</div><div class=\"line\"><span class=\"built_in\">cd</span> opencv</div><div class=\"line\">mkdir build</div><div class=\"line\"><span class=\"built_in\">cd</span> build</div><div class=\"line\">cmake ..</div><div class=\"line\">make -j5</div><div class=\"line\">sudo make install</div></pre></td></tr></table></figure>\n<h2 id=\"Sophus\"><a href=\"#Sophus\" class=\"headerlink\" title=\"Sophus\"></a>Sophus</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd workspace</div><div class=\"line\">git clone https://github.com/strasdat/Sophus.git</div><div class=\"line\">cd Sophus</div><div class=\"line\">git checkout a621ff</div><div class=\"line\">mkdir build</div><div class=\"line\">cd build</div><div class=\"line\">cmake ..</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<p>Note: if you encounter some lvalue errors for <code>unit_complex_.imag() = 0</code>, you may change that code to <code>unit_complex_.imag(0.)</code>;</p>\n<h2 id=\"Fast\"><a href=\"#Fast\" class=\"headerlink\" title=\"Fast\"></a>Fast</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd workspace</div><div class=\"line\">git clone https://github.com/uzh-rpg/fast.git</div><div class=\"line\">cd fast</div><div class=\"line\">mkdir build</div><div class=\"line\">cd build</div><div class=\"line\">cmake ..</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<h2 id=\"vikit-common\"><a href=\"#vikit-common\" class=\"headerlink\" title=\"vikit_common\"></a>vikit_common</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd workspace</div><div class=\"line\">git clone https://github.com/uzh-rpg/rpg_vikit.git</div><div class=\"line\">cd rpg_vikit/vikit_common</div><div class=\"line\">mkdir build</div><div class=\"line\">cd build</div><div class=\"line\">cmake ..</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<p>in <code>rpg_vikit/vikit_common/CMakeLists.txt</code> set the flag <code>USE_ROS</code> to <code>FALSE</code>.</p>\n<h2 id=\"SVO\"><a href=\"#SVO\" class=\"headerlink\" title=\"SVO\"></a>SVO</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd workspace</div><div class=\"line\">git clone https://github.com/uzh-rpg/rpg_svo.git</div><div class=\"line\">cd rpg_svo/svo</div><div class=\"line\">mkdir build</div><div class=\"line\">cd build</div><div class=\"line\">cmake ..</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<p>In <code>svo/CMakeLists.txt</code> set the flag <code>USE_ROS</code> to <code>FALSE</code>.</p>\n"},{"title":"settingsync_vscode","url":"http://code4fun.me/2019/03/26/settingsync_vscode/","content":"<p>打算做这个插件了，基本思路构想的差不多。<br>一步步的完成，<br>第一步实现从vscode随便发送个内容到服务器或whatever，这一过程应该是最复杂的，因为目前对于typescript很不熟悉，不知道post过程会有多少坑，有网的时候查一下<code>async</code> <code>promise</code> <code>await</code> 等相关内容。在文件比较多的情况下，应该还是用异步比较靠谱，由于当前的直接是套用的github的一个api的库，所以直接包含了异步操作，这部分的话有两个方案，一个是参考<code>octokit/rest</code>这个库的实现，</p>\n"},{"title":"cpp set iter","url":"http://code4fun.me/2019/03/26/cpp set iter/","content":"<p>In this article we will discuss different ways to iterate over a set in C++.</p>\n<p>Let’s create a set of strings i.e.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Set of strings</div><div class=\"line\">std::set&lt;std::string&gt; setOfStr = &#123;</div><div class=\"line\">\t\t\t\t\t\t\t&quot;jjj&quot;,</div><div class=\"line\">\t\t\t\t\t\t\t&quot;khj&quot;,</div><div class=\"line\">\t\t\t\t\t\t\t&quot;bca&quot;,</div><div class=\"line\">\t\t\t\t\t\t\t&quot;aaa&quot;,</div><div class=\"line\">\t\t\t\t\t\t\t&quot;ddd&quot; &#125;;</div></pre></td></tr></table></figure>\n<p>Now let’s iterate over it and print the contents on screen using different methods i.e.</p>\n<h2 id=\"Iterating-over-a-Set-using-Iterators\"><a href=\"#Iterating-over-a-Set-using-Iterators\" class=\"headerlink\" title=\"Iterating over a Set using Iterators\"></a>Iterating over a Set using Iterators</h2><p><code>set::begin()</code> returns an iterator pointing to the first element in set. Whereas, <code>set::end()</code> returns an iterator past the end of set.</p>\n<p>Now to iterate a set in forward direction, we need to create an iterator and initialise it with <code>set::begin()</code>. So that it points to start of set and then we will keep on access and increment the iterator to next till <code>set::end()</code> is reached i.e.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Creating a iterator pointing to start of set</div><div class=\"line\">std::set&lt;std::string&gt;::iterator it = setOfStr.begin();</div><div class=\"line\"></div><div class=\"line\">// Iterate till the end of set</div><div class=\"line\">while (it != setOfStr.end())</div><div class=\"line\">&#123;</div><div class=\"line\">\t// Print the element</div><div class=\"line\">\tstd::cout &lt;&lt; (*it) &lt;&lt; &quot;,&quot;;</div><div class=\"line\">\t//Increment the iterator</div><div class=\"line\">\tit++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we iterated the set in forward direction. Now, let’s see how to iterate in reverse direction.</p>\n<h2 id=\"Iterating-a-set-in-backward-direction-using-reverse-iterator\"><a href=\"#Iterating-a-set-in-backward-direction-using-reverse-iterator\" class=\"headerlink\" title=\"Iterating a set in backward direction using reverse_iterator\"></a>Iterating a set in backward direction using reverse_iterator</h2><p><code>set::rbegin()</code> returns a reverse_iterator pointing to the last element of set. Whereas, <code>set::rend()</code> returns a reverse_iterator pointing to element before the first element.</p>\n<p>Now to iterate a set in reverse direction, we need to create an reverse_iterator and initialise it with <code>set::rbegin()</code>. So that it points to the last element of set and then we will keep on access and increment the iterator to next till <code>set::rend()</code> is reached i.e. beginning of set.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Creating a reverse iterator pointing to end of set i.e. rbegin</div><div class=\"line\">std::set&lt;std::string&gt;::reverse_iterator revIt = setOfStr.rbegin();</div><div class=\"line\"></div><div class=\"line\">// Iterate till the start of set i.e. rend</div><div class=\"line\">while (revIt != setOfStr.rend())</div><div class=\"line\">&#123;</div><div class=\"line\">\t// Print the element</div><div class=\"line\">\tstd::cout &lt;&lt; (*revIt) &lt;&lt; &quot;,&quot;;</div><div class=\"line\">\t//Increment the iterator</div><div class=\"line\">\trevIt++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Iterating-over-a-set-using-Range-base-for-loop\"><a href=\"#Iterating-over-a-set-using-Range-base-for-loop\" class=\"headerlink\" title=\"Iterating over a set using Range base for loop\"></a>Iterating over a set using Range base for loop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Iterate over all elements of set</div><div class=\"line\">// using range based for loop</div><div class=\"line\">for (auto elem : setOfStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstd::cout &lt;&lt; elem &lt;&lt; &quot;,&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Iterating-over-a-set-using-std-for-each-and-range-based-for-loop\"><a href=\"#Iterating-over-a-set-using-std-for-each-and-range-based-for-loop\" class=\"headerlink\" title=\"Iterating over a set using std::for_each and range based for loop\"></a>Iterating over a set using std::for_each and range based for loop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Iterate over all elements using for_each</div><div class=\"line\">// and lambda function</div><div class=\"line\">std::for_each(setOfStr.begin(), setOfStr.end(), [](const std::string &amp; str)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstd::cout&lt;&lt;str&lt;&lt;&quot;,&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Complete example is as follows,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">#include &lt;set&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include &lt;algorithm&gt;</div><div class=\"line\"> </div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">// Set of strings</div><div class=\"line\">\tstd::set&lt;std::string&gt; setOfStr =</div><div class=\"line\">\t&#123; &quot;jjj&quot;, &quot;khj&quot;, &quot;bca&quot;, &quot;aaa&quot;, &quot;ddd&quot; &#125;;</div><div class=\"line\"> </div><div class=\"line\">\tstd::cout &lt;&lt; &quot;*** Iterating Set in Forward Direction using Iterators ***&quot;</div><div class=\"line\">\t\t\t&lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">// Creating a iterator pointing to start of set</div><div class=\"line\">\tstd::set&lt;std::string&gt;::iterator it = setOfStr.begin();</div><div class=\"line\"> </div><div class=\"line\">// Iterate till the end of set</div><div class=\"line\">\twhile (it != setOfStr.end())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t// Print the element</div><div class=\"line\">\t\tstd::cout &lt;&lt; (*it) &lt;&lt; &quot;,&quot;;</div><div class=\"line\">\t\t//Increment the iterator</div><div class=\"line\">\t\tit++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstd::cout &lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">\tstd::cout &lt;&lt; &quot;*** Iterating Set in Reverse Direction using Iterators ***&quot;</div><div class=\"line\">\t\t\t&lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">// Creating a reverse iterator pointing to end of set i.e. rbegin</div><div class=\"line\">\tstd::set&lt;std::string&gt;::reverse_iterator revIt = setOfStr.rbegin();</div><div class=\"line\"> </div><div class=\"line\">// Iterate till the start of set i.e. rend</div><div class=\"line\">\twhile (revIt != setOfStr.rend())</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t// Print the element</div><div class=\"line\">\t\tstd::cout &lt;&lt; (*revIt) &lt;&lt; &quot;,&quot;;</div><div class=\"line\">\t\t//Increment the iterator</div><div class=\"line\">\t\trevIt++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstd::cout &lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">\tstd::cout &lt;&lt; &quot;*** Iterating Set using range based for loop ***&quot;</div><div class=\"line\">\t\t\t&lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">// Iterate over all elements of set</div><div class=\"line\">// using range based for loop</div><div class=\"line\">\tfor (auto elem : setOfStr)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tstd::cout &lt;&lt; elem &lt;&lt; &quot;,&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tstd::cout &lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">\tstd::cout &lt;&lt; &quot;*** Iterating Set using for_each algo &amp; Lambda function ***&quot;</div><div class=\"line\">\t\t\t&lt;&lt; std::endl;</div><div class=\"line\"> </div><div class=\"line\">// Iterate over all elements using for_each</div><div class=\"line\">// and lambda function</div><div class=\"line\">\tstd::for_each(setOfStr.begin(), setOfStr.end(), [](const std::string &amp; str)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tstd::cout&lt;&lt;str&lt;&lt;&quot;,&quot;;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tstd::cout &lt;&lt; std::endl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** Iterating Set in Forward Direction using Iterators ***</div><div class=\"line\">aaa , bca , ddd , jjj , khj , </div><div class=\"line\">*** Iterating Set in Reverse Direction using Iterators ***</div><div class=\"line\">khj , jjj , ddd , bca , aaa , </div><div class=\"line\">*** Iterating Set using range based for loop ***</div><div class=\"line\">aaa , bca , ddd , jjj , khj , </div><div class=\"line\">*** Iterating Set using for_each algo &amp; Lambda function ***</div><div class=\"line\">aaa , bca , ddd , jjj , khj ,</div></pre></td></tr></table></figure>"},{"title":"unique_ptr usage","url":"http://code4fun.me/2019/03/26/unique ptr in cpp/","content":"<h2 id=\"unique-ptr-in-cpp\"><a href=\"#unique-ptr-in-cpp\" class=\"headerlink\" title=\"unique ptr in cpp\"></a>unique ptr in cpp</h2><p><code>std::unique_ptr</code> is used to replace <code>auto_ptr</code>.</p>\n<p>When you say <code>std::unique_ptr&lt;T&gt;</code>, the <code>unique_ptr</code> constructor expects to receive a <code>T*</code>, but <code>CreateMutex</code> returns a <code>HANDLE</code>, not a <code>HANDLE *</code>.</p>\n<p>we can use <code>std::remove_pointer</code> to get to the <code>HANDLE</code>‘s underlying type.</p>\n<p>When use it in windows API and deal with <code>HANDLE</code>, we need a different method to construct it using lambda delter and <code>decltype</code> to deduce the type of the function pointer.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">std::unique_ptr&lt;std::remove_pointer&lt;HANDLE&gt;::type, </div><div class=\"line\">                decltype(&amp;::CloseHandle)&gt; m_mutex(::CreateMutex(NULL, FALSE, NULL),</div><div class=\"line\">                                                  &amp;::CloseHandle);</div></pre></td></tr></table></figure>"},{"title":"convert ip address from string to uint in windows","url":"http://code4fun.me/2019/03/26/ipaddress/","content":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ws2tcpip.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iphlpapi.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"Ws2_32.lib\"</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in sa;</div><div class=\"line\">\t<span class=\"keyword\">char</span> str[INET_ADDRSTRLEN];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// store this IP address in sa:</span></div><div class=\"line\">\tinet_pton(AF_INET, <span class=\"string\">\"25.125.211.145\"</span>, &amp;(sa.sin_addr));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lu\\n\"</span>, sa.sin_addr); <span class=\"comment\">//2446556441</span></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sa.sin_addr); <span class=\"comment\">//-1848410855</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// now get it back and print it</span></div><div class=\"line\">\tinet_ntop(AF_INET, &amp;(sa.sin_addr), str, INET_ADDRSTRLEN);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, str); <span class=\"comment\">// prints \"25.125.211.145\"</span></div><div class=\"line\"></div><div class=\"line\">\tgetchar();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"git 基本操作","url":"http://code4fun.me/2019/03/26/git usage/","content":"<h2 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h2><p>git 的自动换行会有些问题，有的时候会出现<code>fatal error</code>，故可以配置为自动转化为<code>lf</code>，或者关闭这个功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.autocrlf input #提交到git是自动将换行符转换为lf</div><div class=\"line\">git config --global core.editor &quot;vim&quot; # use vim editor</div></pre></td></tr></table></figure>\n<h2 id=\"git-add-files-to-last-commit\"><a href=\"#git-add-files-to-last-commit\" class=\"headerlink\" title=\"git add files to last commit\"></a>git add files to last commit</h2><p>git commit –amend –no-edit</p>\n<p>git push -f origin some_branch</p>\n<p>git clean -f</p>\n<p>git clean -d</p>\n<p>git prune</p>\n<p>git cherry-pick</p>\n<p><code>git merge --no-ff</code></p>\n<p>git add -p            # patch mode可以将一个文件分成多份来进行提交，适合于当一次内容里面修改了多方面的东西的时候。</p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><h3 id=\"commit-messages\"><a href=\"#commit-messages\" class=\"headerlink\" title=\"commit messages\"></a>commit messages</h3><p>第一行为summary，少于50个字符，然后空一行，下面是正文，正文一行也要控制在72个字符。</p>\n<h3 id=\"reset-head-to-some-commit\"><a href=\"#reset-head-to-some-commit\" class=\"headerlink\" title=\"reset head to some commit\"></a>reset head to some commit</h3><h2 id=\"setup-difftool-and-merge-tool\"><a href=\"#setup-difftool-and-merge-tool\" class=\"headerlink\" title=\"setup difftool and merge tool\"></a>setup difftool and merge tool</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global difftool.beyondcompare.cmd &quot;\\&quot;c:\\program files\\beyond compare 4\\bcomp.exe\\&quot; \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;&quot;</div><div class=\"line\">git config --global diff.tool beyondcompare</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global merge.tool p4merge</div><div class=\"line\">git config --global mergetool.p4merge.path &quot;C:/Program Files/Perforce/p4merge.exe&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"delete-a-branch\"><a href=\"#delete-a-branch\" class=\"headerlink\" title=\"delete  a branch\"></a>delete  a branch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push -d origin branchname</div><div class=\"line\">git branch -d branchname</div></pre></td></tr></table></figure>\n<h2 id=\"checkout-using-remote-branch\"><a href=\"#checkout-using-remote-branch\" class=\"headerlink\" title=\"checkout using remote branch\"></a>checkout using remote branch</h2><p>首先<code>git fetch</code> 获取到所有的branch,然后执行<br><code>git checkout -t &lt;name of remote&gt;/test</code> or <code>git checkout -b test &lt;name of remote&gt;/test</code></p>\n<h2 id=\"rebase-local-branch-with-remote-branch\"><a href=\"#rebase-local-branch-with-remote-branch\" class=\"headerlink\" title=\"rebase local branch with remote branch\"></a>rebase local branch with remote branch</h2><p>git pull –rebase origin master</p>\n<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save XXX</div><div class=\"line\">git stash list</div><div class=\"line\">git stash apply</div></pre></td></tr></table></figure>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><p>rebase有两个方面，一个是个人部分，需要利用<code>git rebase -i</code>对已有的commit进行整理，另一方面是对于branch层面上的，避免merge的时候出现分叉，使用<code>git pull --rebase</code>来进行merge，同时也可以有两个设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config branch.dev.rebase true</div><div class=\"line\">git config --global branch.autosetuprebase always</div></pre></td></tr></table></figure>\n<h2 id=\"merge-的几种操作\"><a href=\"#merge-的几种操作\" class=\"headerlink\" title=\"merge 的几种操作\"></a>merge 的几种操作</h2><ul>\n<li>rebase</li>\n<li>squash merge</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241461_20181121151120571_16166.png\" alt=\"rebase\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1577241463_20181121151151708_5552.png\" alt=\"squash\"></p>\n<h2 id=\"conflicts\"><a href=\"#conflicts\" class=\"headerlink\" title=\"conflicts\"></a>conflicts</h2><p>the meaning of <code>theirs</code> and <code>ours</code> are not the same in <code>git merge</code> and <code>git rebase</code>, <a href=\"https://stackoverflow.com/questions/2959443/why-is-the-meaning-of-ours-and-theirs-reversed-with-git-svn/2960751#2960751\" target=\"_blank\" rel=\"external\">reference.</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout --theirs -- .</div><div class=\"line\">git checkout --ours .  # checkout our local version of all files</div><div class=\"line\">git add -u             # mark all conflicted files as merged</div></pre></td></tr></table></figure></p>\n<h2 id=\"push-some-commit\"><a href=\"#push-some-commit\" class=\"headerlink\" title=\"push some commit\"></a>push some commit</h2><p>Cherry-pick works best compared to all other methods while pushing a specific commit.<br>The way to do that is:</p>\n<p>Create a new branch:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch &lt;new-branch&gt;</div></pre></td></tr></table></figure>\n<p>Update your new-branch with your origin branch:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div><div class=\"line\">git rebase</div></pre></td></tr></table></figure>\n<p>These actions will make sure that you exactly have the same stuff as your origin has.<br>Cherry-pick the sha id that you want to do push:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git cherry-pick &lt;sha id of the commit&gt;</div></pre></td></tr></table></figure>\n<p>Push it to your origin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<p>Run <code>gitk</code> to see that everything looks the same way you wanted.</p>\n<h2 id=\"break-a-previous-commit-to-multiple-commit\"><a href=\"#break-a-previous-commit-to-multiple-commit\" class=\"headerlink\" title=\"break a previous commit to multiple commit\"></a>break a previous commit to multiple commit</h2><p><code>git rebase -i</code> will do it.</p>\n<p>First, start with a clean working directory: git status should show no pending modifications, deletions, or additions.</p>\n<p>To split apart your most recent commit, first:</p>\n<p><code>$ git reset HEAD~</code></p>\n<p>Now commit the pieces individually in the usual way, producing as many commits as you need.</p>\n<p>If it was farther back in the tree, then</p>\n<p><code>$ git rebase -i HEAD~3</code></p>\n<p>where 3 is how many commits back it is.</p>\n<p>If it was farther back in the tree than you want to count, then</p>\n<p><code>$ git rebase -i 123abcd~</code></p>\n<p>where <code>123abcd</code> is the SHA1 of the commit you want to split up.</p>\n<p>When you get the rebase edit screen, find the commit you want to break apart. At the beginning of that line, replace <code>pick</code> with <code>edit</code> (<code>e</code> for short). Save the buffer and exit. Rebase will now stop just after the commit you want to edit. Then:</p>\n<p><code>$ git reset HEAD~</code></p>\n<p>Commit the pieces individually in the usual way, producing as many commits as you need, then</p>\n<p><code>$ git rebase --continue</code></p>\n<h2 id=\"some-tips\"><a href=\"#some-tips\" class=\"headerlink\" title=\"some tips\"></a>some tips</h2><p>做 <code>git push</code> 之前记得做一次 <code>git pull --rebase origin master</code>.</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><h3 id=\"show-name-recent-changed\"><a href=\"#show-name-recent-changed\" class=\"headerlink\" title=\"show name recent changed\"></a>show name recent changed</h3><p>git log –name-status -10 path/to/dir</p>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p><code>git revert commit-id</code>,  add a new commit to revert that commit</p>\n<p><code>git checkout &lt;commit_hash&gt; -- &lt;file&gt;</code></p>\n<h2 id=\"git-clean-untracked-file\"><a href=\"#git-clean-untracked-file\" class=\"headerlink\" title=\"git clean untracked file\"></a>git clean untracked file</h2><p><code>git clean -fd</code></p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p><code>git reflog</code> to get records before index.</p>\n<h2 id=\"change-default-editor-to-visual-studio-code\"><a href=\"#change-default-editor-to-visual-studio-code\" class=\"headerlink\" title=\"change default editor to visual studio code\"></a>change default editor to visual studio code</h2><p><code>git config --global core.editor &quot;code --wait&quot;</code></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2019-03-26 09:36:55</p>\n</blockquote>\n"},{"title":"rust test with output","url":"http://code4fun.me/2019/03/26/rust/","content":"<h1 id=\"rust\"><a href=\"#rust\" class=\"headerlink\" title=\"rust\"></a>rust</h1><h2 id=\"test-with-output\"><a href=\"#test-with-output\" class=\"headerlink\" title=\"test with output\"></a>test with output</h2><p><code>cargo test -- --nocapture</code></p>\n"},{"title":"vim skill","url":"http://code4fun.me/2019/03/26/vim skill/","content":"<p>注：在vim中利用<code>ga</code>可以获取到某个字符的unicode值。<br>next buffer — :bn</p>\n"},{"title":"a cpp template method","url":"http://code4fun.me/2019/03/26/a template method/","content":"<h1 id=\"a-template-method\"><a href=\"#a-template-method\" class=\"headerlink\" title=\"a template method\"></a>a template method</h1><p><a href=\"https://www.codeproject.com/Articles/48575/How-to-define-a-template-class-in-a-h-file-and-imp\" target=\"_blank\" rel=\"external\">一种实例化的奇技淫巧</a></p>\n"},{"title":"C++ STL/CLR","url":"http://code4fun.me/2019/03/26/C-STL-CLR/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for each (type identifier in expression) &#123;</div><div class=\"line\">       statements</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>The for each statement is used to iterate through a collection. You can modify elements in a collection, but you cannot add or delete elements.</p>\n"},{"title":"C++ concurrency","url":"http://code4fun.me/2019/03/26/C-concurrency/","content":"<p>C++ lambda [&amp;]</p>\n<p>thread join</p>\n<p>std::ref in thread with argument.</p>\n<h2 id=\"promise-and-future\"><a href=\"#promise-and-future\" class=\"headerlink\" title=\"promise and future\"></a>promise and future</h2><p>this is very similar to channel in go. a code snippet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">void fun(promise&lt;string&gt; &amp;&amp;pr)</div><div class=\"line\">&#123;</div><div class=\"line\">\tcout &lt;&lt; &quot;Worker sending\\n&quot;;</div><div class=\"line\">\tpr.set_value(&quot;Message from thread.&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">\tpromise&lt;string&gt; pr;</div><div class=\"line\">\tfuture&lt;string&gt; fut = pr.get_future();</div><div class=\"line\"></div><div class=\"line\">\tthread th(fun, move(pr));</div><div class=\"line\">\tcout &lt;&lt; &quot;Main receiving\\n&quot;;</div><div class=\"line\"></div><div class=\"line\">\tstring str = fut.get();</div><div class=\"line\">\tcout &lt;&lt; str &lt;&lt; endl;</div><div class=\"line\">\tth.join();</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"some-import-function\"><a href=\"#some-import-function\" class=\"headerlink\" title=\"some import function\"></a>some import function</h3><p><code>wait</code> <code>wait_for</code> <code>wait_until</code> <code>future_status</code></p>\n<h2 id=\"exception-e\"><a href=\"#exception-e\" class=\"headerlink\" title=\"exception e\"></a>exception e</h2><p><code>e.waht()</code></p>\n<h2 id=\"std-async\"><a href=\"#std-async\" class=\"headerlink\" title=\"std::async\"></a>std::async</h2><p><code>future&lt;string&gt; fut = async(fun, parameter);</code> can be used to replace <code>promise</code> to get callback from a <code>func</code>.</p>\n<h2 id=\"Consider-using-tasks-instead-of-threads\"><a href=\"#Consider-using-tasks-instead-of-threads\" class=\"headerlink\" title=\"Consider using tasks instead of threads\"></a>Consider using tasks instead of threads</h2><h2 id=\"move-and-unique-ptr\"><a href=\"#move-and-unique-ptr\" class=\"headerlink\" title=\"move and unique_ptr\"></a>move and unique_ptr</h2><h2 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h2><p>自旋锁是计算机科学用于多线程同步的一种锁，线程反复检查锁变量是否可用。由于线程在这一过程中保持执行，因此是一种忙等待。一旦获取了自旋锁，线程会一直保持该锁，直至显式释放自旋锁。</p>\n<p>自旋锁避免了进程上下文的调度开销，因此对于线程只会阻塞很短时间的场合是有效的。因此操作系统的实现在很多地方往往用自旋锁。Windows操作系统提供的轻型读写锁（SRW Lock）内部就用了自旋锁。显然，单核CPU不适于使用自旋锁，这里的单核CPU指的是单核单线程的CPU，因为，在同一时间只有一个线程是处在运行状态，假设运行线程A发现无法获取锁，只能等待解锁，但因为A自身不挂起，所以那个持有锁的线程B没有办法进入运行状态，只能等到操作系统分给A的时间片用完，才能有机会被调度。这种情况下使用自旋锁的代价很高。</p>\n"},{"title":"why use hpp in cpp project","url":"http://code4fun.me/2019/03/26/why use hpp in cpp project/","content":"<p>Here are a couple of reasons for having different naming of C vs C++ headers:</p>\n<ul>\n<li>Automatic code formatting, you might have different guidelines for formatting C and C++ code. If the headers are separated by extension you can set your editor to apply the appropriate formatting automatically</li>\n<li>Naming, I’ve been on projects where there were libraries written in C and then wrappers had been implemented in C++. Since the headers usually had similar names, i.e. Feature.h vs Feature.hpp, they were easy to tell apart.</li>\n<li>Inclusion, maybe your project has more appropriate versions available written in C++ but you are using the C version (see above point). If headers are named after the language they are implemented in you can easily spot all the C-headers and check for C++ versions.</li>\n</ul>\n<p>Remember, C is not C++ and it can be very dangerous to mix and match unless you know what you are doing. Naming your sources appropriately helps you tell the languages apart.</p>\n"},{"title":"Cpp lambda","url":"http://code4fun.me/2019/03/26/Cpp lambda/","content":""},{"title":"Powershell is the best","url":"http://code4fun.me/2019/03/26/powershell/","content":"<p><a href=\"https://ss64.com/ps/syntax.html\" target=\"_blank\" rel=\"external\">A good document with many expamles</a></p>\n<p>use it to do some quick jobs.</p>\n<p><code>Get-Content ./log.log -Wait -Tail 10</code></p>\n<h2 id=\"Cmdlet-Format\"><a href=\"#Cmdlet-Format\" class=\"headerlink\" title=\"Cmdlet Format\"></a>Cmdlet Format</h2><p>A cmdlet always consists of a verb (or a word that functions as a verb) and a noun, separated with a hyphen (the “verb-noun” rule). For example, some of the verbs include:</p>\n<ul>\n<li>Get — To get something</li>\n<li>Set — To define something</li>\n<li>Start — To run something</li>\n<li>Stop — To stop something that is running</li>\n<li>Out — To output something</li>\n<li>New — To create something (“new” is not a verb, of course, but it functions as one)</li>\n</ul>\n<h2 id=\"Get-system-information\"><a href=\"#Get-system-information\" class=\"headerlink\" title=\"Get system information\"></a>Get system information</h2><p><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-counter?view=powershell-5.1\" target=\"_blank\" rel=\"external\">Get-Counter (Microsoft.PowerShell.Diagnostics)</a></p>\n<p>some examples:</p>\n<figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Get-Counter</span> -Counter <span class=\"string\">\"\\Processor(_Total)\\% Processor Time\"</span> -Continuous</div><div class=\"line\"><span class=\"built_in\">get-counter</span> -Counter <span class=\"string\">\"\\Processor(*)\\% Processor Time\"</span> -SampleInterval <span class=\"number\">2</span> -MaxSamples <span class=\"number\">10</span></div><div class=\"line\"><span class=\"built_in\">get-counter</span> -ListSet *</div><div class=\"line\"><span class=\"built_in\">get-counter</span> -listset * | <span class=\"built_in\">sort-object</span> countersetname | <span class=\"built_in\">format-table</span> countersetname</div><div class=\"line\">(<span class=\"built_in\">get-counter</span> -listset memory).paths</div><div class=\"line\">(<span class=\"built_in\">get-counter</span> -listset memory).paths | where &#123;<span class=\"variable\">$_</span> <span class=\"nomarkup\">-like</span> <span class=\"string\">\"*cache*\"</span>&#125;</div></pre></td></tr></table></figure>\n<p>Save the Disk Reads/sec counter path in the $diskreads variable..  Pipe the counter path (in $diskreads) to Get-Counter:<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$diskreads</span> = <span class=\"string\">\"\\LogicalDisk(C:)\\Disk Reads/sec\"</span></div><div class=\"line\"><span class=\"variable\">$diskreads</span> | <span class=\"built_in\">get-counter</span> -computer Server64, Server65 -maxsamples <span class=\"number\">10</span></div></pre></td></tr></table></figure></p>\n<p>Get a list of 50 randomly selected servers from the Servers.txt file and store in a variable: Save a counter path in the $Counter variable and then get the counter values for all the servers.<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$servers</span> = <span class=\"built_in\">get-random</span> (<span class=\"built_in\">get-content</span> servers.txt) -count <span class=\"number\">50</span></div><div class=\"line\"><span class=\"variable\">$counter</span> = <span class=\"string\">\"\\Processor(*)\\% DPC Time\"</span></div><div class=\"line\"><span class=\"built_in\">get-counter</span> -Counter <span class=\"variable\">$counter</span> -computername <span class=\"variable\">$servers</span></div></pre></td></tr></table></figure></p>\n<p>Get a single value for all of the performance counters in the memory counter set on the local computer. First get the counter paths and then get the counter data for each counter:<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$memCounters</span> = (<span class=\"built_in\">get-counter</span> -list memory).paths</div><div class=\"line\"><span class=\"built_in\">get-counter</span> -counter <span class=\"variable\">$memCounters</span></div></pre></td></tr></table></figure></p>\n<p>The properties of the CounterSamples object can be used to examine, select, sort, and group data:<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$counter</span> = <span class=\"string\">\"\\\\SERVER64\\Process(Idle)\\% Processor Time\"</span> </div><div class=\"line\"><span class=\"variable\">$data</span> = <span class=\"built_in\">get-counter</span> <span class=\"variable\">$counter</span></div><div class=\"line\"><span class=\"variable\">$data</span>.countersamples | <span class=\"built_in\">format-list</span> -property *</div></pre></td></tr></table></figure></p>\n<p>Run a Get-Counter command as background job.<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$counters</span> = <span class=\"string\">\"\\LogicalDisk(_Total)\\% Free Space\"</span></div><div class=\"line\"><span class=\"built_in\">start-job</span> -scriptblock &#123;<span class=\"built_in\">get-counter</span> -counter <span class=\"variable\">$counters</span> -maxsamples <span class=\"number\">1000</span>)</div></pre></td></tr></table></figure></p>\n<p>Find the ‘% free disk space’ on 50 computers selected randomly from Servers.txt<br><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">get-counter</span> -computername (<span class=\"built_in\">get-random</span> servers.txt -count <span class=\"number\">50</span>) -counter <span class=\"string\">\"\\LogicalDisk(*)\\% Free Space\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"K-drive-speed\"><a href=\"#K-drive-speed\" class=\"headerlink\" title=\"K drive speed\"></a>K drive speed</h3><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS D:\\&gt; (<span class=\"built_in\">get-counter</span> <span class=\"string\">\"\\LogicalDisk(K:)\\Disk Reads/sec\"</span> -SampleInterval <span class=\"number\">1</span> -MaxSamples <span class=\"number\">2</span>).CounterSamples | <span class=\"built_in\">Out-File</span> .\\test.txt</div><div class=\"line\">PS D:\\&gt; (<span class=\"built_in\">get-counter</span> <span class=\"string\">\"\\LogicalDisk(K:)\\Disk Read Bytes/sec\"</span> -SampleInterval <span class=\"number\">1</span> -MaxSamples <span class=\"number\">2</span>).CounterSamples | <span class=\"built_in\">Out-File</span> .\\test.txt</div></pre></td></tr></table></figure>\n<h3 id=\"Network-stream\"><a href=\"#Network-stream\" class=\"headerlink\" title=\"Network stream\"></a>Network stream</h3><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Get-Counter</span> <span class=\"string\">\"\\Network Adapter(*)\\Bytes Received/sec\"</span></div><div class=\"line\"><span class=\"built_in\">Get-Counter</span> <span class=\"string\">\"\\Network Adapter(*)\\Bytes Sent/sec\"</span></div><div class=\"line\"><span class=\"built_in\">Get-Counter</span> <span class=\"string\">\"\\Network Adapter(*)\\Bytes Received/sec\"</span> -Continuous | <span class=\"built_in\">Out-File</span> .\\receivedbytes.txt</div><div class=\"line\"><span class=\"built_in\">Get-Counter</span> <span class=\"string\">\"\\Network Adapter(*)\\Bytes Sent/sec\"</span> -Continuous | <span class=\"built_in\">Out-File</span> .\\sentbytes.txt</div></pre></td></tr></table></figure>\n<h3 id=\"Environment-info\"><a href=\"#Environment-info\" class=\"headerlink\" title=\"Environment info\"></a>Environment info</h3><figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Environment] | gm -s</div><div class=\"line\">[Environment]::ProcessorCount</div></pre></td></tr></table></figure>\n<h2 id=\"start-transcript\"><a href=\"#start-transcript\" class=\"headerlink\" title=\"start-transcript\"></a>start-transcript</h2><p><code>yyyyMMddHHmmss</code> 为其时间格式</p>\n<p>Get-ChildItem cmdlet can be used to get files or folders list</p>\n<p>an example</p>\n<figure class=\"highlight ps\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">\"k:\\Index\\1\\\"</span></div><div class=\"line\"><span class=\"comment\"># $path = \"D:\\zhizha\\tmp\\\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$files</span> = <span class=\"built_in\">Get-ChildItem</span> <span class=\"variable\">$path</span> -file</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>) &#123;</div><div class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"variable\">$file</span>.Name</div><div class=\"line\">    <span class=\"variable\">$fullname</span> = <span class=\"variable\">$path</span> + <span class=\"variable\">$filename</span></div><div class=\"line\">    <span class=\"variable\">$timeRecordName</span> = <span class=\"string\">\"D:\\zhizha\\\"</span> + <span class=\"variable\">$filename</span> + <span class=\"string\">\"runwstime.txt\"</span></div><div class=\"line\">    <span class=\"variable\">$parsedIndexName</span> = <span class=\"string\">\"D:\\zhizha\\parsedindex\\\"</span> + <span class=\"variable\">$filename</span> + <span class=\"string\">\".bin\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Start-Transcript</span> <span class=\"variable\">$timeRecordName</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Write-Output</span> <span class=\"variable\">$fullname</span> <span class=\"string\">\"satasics results:\"</span></div><div class=\"line\">    <span class=\"built_in\">Write-Output</span> <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"built_in\">Write-Output</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">    .\\ParseIndexzhizha.exe <span class=\"variable\">$fullname</span> ws</div><div class=\"line\">   <span class=\"comment\"># .\\ParseIndexzhizha.exe $fullname allword $parsedIndexName</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Stop-Transcript</span></div><div class=\"line\">\t<span class=\"built_in\">Write-Output</span> <span class=\"string\">\"\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Pipes\"><a href=\"#Pipes\" class=\"headerlink\" title=\"Pipes\"></a>Pipes</h2><p>A pipe passes data from one cmdlet to another. I used a pipe earlier to get all properties of an object.</p>\n<h2 id=\"For-loop\"><a href=\"#For-loop\" class=\"headerlink\" title=\"For loop\"></a>For loop</h2>"},{"title":"Short cuts for vscode","url":"http://code4fun.me/2019/03/25/vscode shortcuts/","content":"<p><code>ctrl + shift + k</code> delete lines.</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-03-25 16:25:15</p>\n</blockquote>\n"},{"title":"Test of boost string performance","url":"http://code4fun.me/2019/03/18/boost string performance/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include &lt;chrono&gt;</div><div class=\"line\">#include &lt;ctime&gt;</div><div class=\"line\"></div><div class=\"line\">#include &lt;boost/algorithm/string.hpp&gt;</div><div class=\"line\">#include &lt;vector&gt;</div><div class=\"line\"></div><div class=\"line\">using std::string;</div><div class=\"line\">using std::vector;</div><div class=\"line\"></div><div class=\"line\">void</div><div class=\"line\">split(const string&amp; input, const string&amp; delim, vector&lt;string&gt;&amp; tokens)</div><div class=\"line\">&#123;</div><div class=\"line\">    if (!delim.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">        tokens.clear();</div><div class=\"line\">        size_t start = 0;</div><div class=\"line\">        size_t end = 0;</div><div class=\"line\">        while (end != string::npos)</div><div class=\"line\">        &#123;</div><div class=\"line\">            end = input.find(delim, start);</div><div class=\"line\">            if (end &gt;= start)</div><div class=\"line\">            &#123;</div><div class=\"line\">                tokens.push_back(input.substr(start, end - start));</div><div class=\"line\">            &#125;</div><div class=\"line\">            // Advance start past the delim.</div><div class=\"line\">            start = end + delim.size();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    auto start = std::chrono::system_clock::now();</div><div class=\"line\">    for (int i = 0; i &lt; 10000; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string tests = &quot;a,v,v,v,x,sd,asf,e,r,afds,g&quot;;</div><div class=\"line\">        vector&lt;string&gt; ret;</div><div class=\"line\">        split(tests, &quot;,&quot;, ret);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    auto end = std::chrono::system_clock::now();</div><div class=\"line\"></div><div class=\"line\">    std::chrono::duration&lt;double&gt; elapsed_seconds = end - start;</div><div class=\"line\"></div><div class=\"line\">    std::cout &lt;&lt; &quot;basicstring elapsed time: &quot; &lt;&lt; std::chrono::duration&lt;double&gt;(elapsed_seconds).count() &lt;&lt; &quot;s\\n&quot;;</div><div class=\"line\"></div><div class=\"line\">    start = std::chrono::system_clock::now();</div><div class=\"line\">    for (int i = 0; i &lt; 10000; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string tests = &quot;a,v,v,v,x,sd,asf,e,r,afds,g&quot;;</div><div class=\"line\">        vector&lt;string&gt; ret;</div><div class=\"line\">        boost::split(ret, tests, boost::is_any_of(&quot;,&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    end = std::chrono::system_clock::now();</div><div class=\"line\"></div><div class=\"line\">    elapsed_seconds = end - start;</div><div class=\"line\"></div><div class=\"line\">    std::cout &lt;&lt; &quot;boost:split elapsed time: &quot; &lt;&lt; std::chrono::duration&lt;double&gt;(elapsed_seconds).count() &lt;&lt; &quot;s\\n&quot;;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-03-18 17:30:43</p>\n</blockquote>\n"},{"title":"Rust 使用 Sqlite","url":"http://code4fun.me/2019/01/14/rust sqlite3/","content":"<p>主要是记录一下在Windows平台下利用Rust使用Sqlite相关操作的一个过程，别的语言应该也大同小异。</p>\n<h2 id=\"Rust相关设置\"><a href=\"#Rust相关设置\" class=\"headerlink\" title=\"Rust相关设置\"></a>Rust相关设置</h2><p>在<code>cargo.toml</code>的<code>dependencies</code>中添加引用<code>Sqlite3</code>的库<a href=\"https://github.com/jgallagher/rusqlite\" target=\"_blank\" rel=\"external\">rusqlite</a>，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rusqlite = &quot;0.16.0&quot;</div></pre></td></tr></table></figure>\n<p>具体的使用直接参考官方文档。但这时候如果直接运行<code>cargo run</code>会报错如下，因为缺少<code>sqlite3.lib</code></p>\n<h2 id=\"本地build\"><a href=\"#本地build\" class=\"headerlink\" title=\"本地build\"></a>本地build</h2><p>为了本地build，首先在官网下载windows 的<a href=\"https://sqlite.org/download.html\" target=\"_blank\" rel=\"external\">Precompiled binaries</a>，本文以x64环境为例。</p>\n<p>下载到本地解压缩会看到有两个文件，<code>sqlite3.def</code>和<code>sqlite3.dll</code>，下面需要对这个文件进行</p>\n"},{"title":"2019的一些小计划","url":"http://code4fun.me/2019/01/04/20190104/","content":"<ol>\n<li>开始使用双拼。已经开始用双拼了，各种不习惯，肯定需要一段时间的适应。</li>\n<li>学习rust。已经开始看各种介绍了，从刷leetcode开始，打算以后个人side project都用rust，虽然有些地方会各种不方便。</li>\n<li>拓展自己的实践能力。主要是按照之前的计划完成几个小程序，一个2018总结的已经完成，并且已经在完全靠搜索的情况下有了600多个用户，当然也主要是因为时间赶的正好，其实内容并不是很满意。当然会进一步做一些好一些的，不过设计方面太无力了。</li>\n<li>继续做到目前早睡早起的习惯。</li>\n</ol>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a></p>\n</blockquote>\n"},{"title":"Windows新机设置","url":"http://code4fun.me/2018/10/08/new_pc_setting/","content":"<p>由于最近入职，多了一台Windows笔记本，一台台式机以及数台虚拟机，由于这些环境都是Windows，而以后难免要长期混迹再这个平台上，所以就总结一下该如何配置环境。</p>\n<h2 id=\"install-dependences\"><a href=\"#install-dependences\" class=\"headerlink\" title=\"install dependences\"></a>install dependences</h2><p>当然，第一步是安装一些必须的软件，主要是大平台的软件，开箱即用，没有什么配置的要求，比较简单，列个列表足矣。</p>\n<p>利用Scoop安装相应的软件并进行配置，在powershell中执行下述命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set-ExecutionPolicy Unrestricted</div><div class=\"line\">iex (new-object net.webclient).downloadstring(&apos;https://get.scoop.sh&apos;)</div></pre></td></tr></table></figure>\n<p>添加额外的库，该库里面包含一些常用的软件。 <a href=\"https://git-fork.com/\" target=\"_blank\" rel=\"external\">fork</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mouse Without Borders</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">scoop install git</div><div class=\"line\">scoop bucket add extras</div><div class=\"line\">scoop bucket add Versions</div><div class=\"line\">scoop bucket add Ash258 'https://github.com/Ash258/scoop-Ash258.git'</div><div class=\"line\">scoop bucket add nerd-fonts</div><div class=\"line\">; picgo</div><div class=\"line\">; scoop bucket add helbing https://github.com/helbing/scoop-bucket</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">scoop install sudo</div><div class=\"line\">sudo scoop install <span class=\"number\">3270</span>-NF</div><div class=\"line\">scoop install ack</div><div class=\"line\">scoop install Ag</div><div class=\"line\">scoop install autohotkey</div><div class=\"line\">scoop install bandzip</div><div class=\"line\">scoop install bat</div><div class=\"line\">scoop install beyondcompare</div><div class=\"line\">; scoop install brave</div><div class=\"line\">scoop install caffeine</div><div class=\"line\">scoop install calibre-normal</div><div class=\"line\">; scoop install chromium</div><div class=\"line\">scoop install cmake</div><div class=\"line\">scoop install cmake-rc</div><div class=\"line\">scoop install copyq</div><div class=\"line\">scoop install ditto</div><div class=\"line\">scoop install dropit</div><div class=\"line\">scoop install everything</div><div class=\"line\">scoop install firefox</div><div class=\"line\">scoop install fork</div><div class=\"line\">scoop install fzf</div><div class=\"line\">; scoop install gitkraken</div><div class=\"line\">scoop install graphviz</div><div class=\"line\">scoop install gdrive</div><div class=\"line\">scoop install keypirinha</div><div class=\"line\">scoop install lepton</div><div class=\"line\">scoop install less</div><div class=\"line\">scoop install listen1desktop</div><div class=\"line\">scoop install llvm</div><div class=\"line\">scoop install megasync</div><div class=\"line\">scoop install neovim</div><div class=\"line\">scoop install nodejs</div><div class=\"line\">scoop install oh-my-posh</div><div class=\"line\">scoop install pandoc</div><div class=\"line\">scoop install perl</div><div class=\"line\">scoop install picgo</div><div class=\"line\">scoop install postman</div><div class=\"line\">scoop install PotPlayer</div><div class=\"line\">scoop install powertoys</div><div class=\"line\">scoop install python27</div><div class=\"line\">; scoop install python</div><div class=\"line\">scoop install rescuetime</div><div class=\"line\">scoop install ripgrep</div><div class=\"line\">scoop install rustup</div><div class=\"line\">scoop install ruby</div><div class=\"line\">scoop install sharex</div><div class=\"line\">scoop install sharpkeys</div><div class=\"line\">scoop install spotify</div><div class=\"line\">; scoop install steam</div><div class=\"line\">scoop install sublime-merge</div><div class=\"line\">scoop install sumatrapdf</div><div class=\"line\">scoop install SyncTrayzor</div><div class=\"line\">scoop install telegram</div><div class=\"line\">; scoop install terminus</div><div class=\"line\">scoop install typora</div><div class=\"line\">scoop install vim</div><div class=\"line\">scoop install vnote</div><div class=\"line\">scoop install vscode</div><div class=\"line\">; scoop install weasel</div><div class=\"line\">scoop install wiztree</div><div class=\"line\">; scoop install workflowy</div><div class=\"line\">scoop install zeal</div><div class=\"line\"></div><div class=\"line\">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</div></pre></td></tr></table></figure>\n<h2 id=\"mklink-相关配置\"><a href=\"#mklink-相关配置\" class=\"headerlink\" title=\"mklink 相关配置\"></a>mklink 相关配置</h2><p>有些软件只有一个主配置文件存在于用户目录，对于这种只需要直接进行一次HardLink，可以借助<code>mklink</code>命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mklink /H c:\\Users\\zhizha\\vimrc.bundles &quot;c:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\dotfiles\\vim\\winvim\\vimrc.bundles&quot;</div><div class=\"line\">del c:\\Users\\zhizha\\_vimrc</div><div class=\"line\">mklink /H c:\\Users\\zhizha\\_vimrc &quot;c:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\dotfiles\\vim\\_vimrc&quot;</div><div class=\"line\">mklink /J C:\\Users\\zhizha\\vimfiles &quot;C:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\dotfiles\\vim\\vimfiles&quot;</div><div class=\"line\">mklink /J C:\\Users\\zhizha\\AppData\\Local\\nvim &quot;C:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\dotfiles\\vim\\nvim&quot;</div><div class=\"line\">mklink /J C:\\Users\\zhizha\\vimconfigs &quot;c:\\Users\\zhizha\\localdropbox\\Dropbox (Personal)\\settingsync\\dotfiles\\vim\\vimconfigs&quot;</div><div class=\"line\">mklink /J C:\\Users\\zhizha\\AppData\\Roaming\\vnote\\snippets &quot;C:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\vnote\\snippets&quot;</div><div class=\"line\">mklink /J C:\\Users\\zhizha\\AppData\\Roaming\\vnote\\templates &quot;C:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\vnote\\templates&quot;</div><div class=\"line\">del C:\\Users\\zhizha\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\profiles.json</div><div class=\"line\">mklink /H C:\\Users\\zhizha\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\profiles.json &quot;C:\\Users\\zhizha\\localdropbox\\Dropbox (Personal)\\settingsync\\dotfiles\\profiles.json&quot;</div></pre></td></tr></table></figure>\n<p>这里我们从简单到复杂一步步来，</p>\n<h2 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h2><p>对于visual studio code 也可也直接利用scoop进行安装，<code>scoop install vscode</code>。<br>作为目前使用的几乎最多的一个编辑器，自然装了很多插件以及主题、字体等进行了一番设置，这时候我们可以借助一个神奇的插件 <code>Settings Sync</code>， 其利用Github Gist进行设置的配置。只需要输入正确的Token和Gist id，就轻松的完成了同步，并且可以设置自动更新与下载，这样以后某一天电脑上做一个改动，另一台电脑上也会随之改动。</p>\n<h3 id=\"install-cquery\"><a href=\"#install-cquery\" class=\"headerlink\" title=\"install cquery\"></a>install cquery</h3><p>主要参考<a href=\"https://github.com/cquery-project/cquery/wiki/Visual-Studio-Code\" target=\"_blank\" rel=\"external\">安装指南</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone --recursive https://github.com/cquery-project/cquery.git</div><div class=\"line\">cd cquery</div><div class=\"line\">mkdir build &amp;&amp; cd build</div><div class=\"line\">cmake -DCMAKE_GENERATOR_PLATFORM=x64 .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES</div><div class=\"line\">cmake --build . --config release</div><div class=\"line\">cmake --build . --target install --config release</div></pre></td></tr></table></figure>\n<p>安装后需要根据文档，进行相关配置，提供高亮。</p>\n<h2 id=\"输入法-Rime\"><a href=\"#输入法-Rime\" class=\"headerlink\" title=\"输入法 Rime\"></a>输入法 Rime</h2><p>在Mac 上一直用鼠须管，所有到了Windows下输入法也就相应的选择了小狼毫，虽然在词库方面和主流的像搜狗之类的存在一些差距，但是毕竟省心，不会动不动弹什么又有垃圾需要清理了或者浏览器不快了之类的东西。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/1539004595_4563.png\" alt=\"\"></p>\n<p>这就是一个输入法，并且是一个几乎没有任何卡顿的输入法。他不会干任何其余的事情，而词库方面你也可以自己添加一些词库，网友也做好了很多扩展词库，这个就可以根据自己的需要添加就好了。</p>\n<p>安利完之后，就是设置，其实这个也比较简单，右键打开输入法菜单，选择用户文件夹，所有的配置和你手动添加的词库都在这个地方，直接复制到另外的电脑上就好了，当然 <code>installation.yaml</code> 中，你可以修改同步的位置，然后点击菜单中的同步个人文件夹，你就可以在指定的位置看到这些设置了。利用这种方式也可以共享多台设备之间的用户词典，也就是那些你自己经常输入的词汇。这个在不同的sync id 的用户词典也会进行合并。</p>\n<h2 id=\"ConEmu\"><a href=\"#ConEmu\" class=\"headerlink\" title=\"ConEmu\"></a>ConEmu</h2><p>由于其设置在文件夹目录下，所以直接在官网下载，然后将其放到dropbox同步文件夹内，这样就可以在多台设备上同步了。</p>\n<h2 id=\"Powershell-setting\"><a href=\"#Powershell-setting\" class=\"headerlink\" title=\"Powershell setting\"></a>Powershell setting</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">scoop innstall oh-my-posh</div><div class=\"line\">Install-Module PSColors -Scope CurrentUser -AllowClobber</div><div class=\"line\">Install-Module TabExpansionPlusPlus -Scope CurrentUser -AllowClobber</div><div class=\"line\">Install-Module Find-String</div><div class=\"line\">Install-Module Jump.Location</div><div class=\"line\">Install-Module ZLocation</div><div class=\"line\">Install-Module Get-ChildItemColor</div><div class=\"line\">Install-Module posh-git</div><div class=\"line\">Install-Module PSReadline</div><div class=\"line\">Import-Module oh-my-posh</div></pre></td></tr></table></figure>\n<h3 id=\"install-poweline-fonts\"><a href=\"#install-poweline-fonts\" class=\"headerlink\" title=\"install poweline fonts\"></a>install poweline fonts</h3><p><a href=\"https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Bold%20for%20Powerline.ttf\" target=\"_blank\" rel=\"external\">meslo lg m</a></p>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><p>对于Vim来说，这是一个既有可能简单，也有可能复杂的问题，其实在大部分情况下，直接同步<code>.vimrc</code>或者<code>_vimrc</code>就可以，以及可能根据你的插件依赖选择一个插件管理器放到指定的文件夹下面，然后启动vim，运行相关的plugin install命令既可。<br>但是这个过程对于不同的操作系统会有各种不同的配置，需要特别注意。</p>\n<h2 id=\"字体设置\"><a href=\"#字体设置\" class=\"headerlink\" title=\"字体设置\"></a>字体设置</h2><p>目前在用的编程相关的字体有两份，更纱黑体和pragmatapro，直接利用powershell脚本安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Path=&quot;C:\\Users\\zhizha\\Dropbox (Personal)\\settingsync\\font&quot;</div><div class=\"line\">$FONTS = 0x14</div><div class=\"line\">$objShell = New-Object -ComObject Shell.Application</div><div class=\"line\">$objFolder = $objShell.Namespace($FONTS)</div><div class=\"line\">$Fontdir = dir $Path</div><div class=\"line\">foreach($File in $Fontdir) &#123;</div><div class=\"line\">    If (Test-Path &quot;C:\\Users\\zhizha\\AppData\\Local\\Microsoft\\Windows\\Fonts\\$($File.name)&quot;)</div><div class=\"line\">    &#123; &#125;</div><div class=\"line\">    Else</div><div class=\"line\">    &#123;</div><div class=\"line\">        $objFolder.CopyHere($File.fullname)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"install-nerd-fonts\"><a href=\"#install-nerd-fonts\" class=\"headerlink\" title=\"install nerd-fonts\"></a>install nerd-fonts</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scoop bucket add nerd-fonts</div><div class=\"line\">sudo scoop install 3270-NF</div></pre></td></tr></table></figure>\n<h2 id=\"blog-setting\"><a href=\"#blog-setting\" class=\"headerlink\" title=\"blog setting\"></a>blog setting</h2><p><code>hexo clean &amp;&amp; hexo deploy</code></p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a><br>2018-10-08 21:15:59</p>\n</blockquote>\n"},{"title":"与自己独处","url":"http://code4fun.me/2018/09/12/独处/","content":"<p>今天慢悠悠地骑着电动车走在马路上，突然意识到一个问题，有太久不是与自己独处的时间了。在我看来，不是一个人自己带着，就是与自己独处，而是精神上的一个人。日常没人的时候可能是手机陪你度过、书籍陪你度过，路上的时候可能是音乐陪你度过、播客陪你读过。随着移动互联网的侵入，随时随地可能会有滴滴的响声提醒你要追的剧已经开播了，某个大V又写了新的文章，又有iPhone的泄密了，等等。</p>\n<p>于是，我们越来越少的时间可以达到精神上的独处，也就是发呆。发呆可以是什么都不想把大脑放空，也可以是天马行空，什么都想。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Sep 12, 2018 10:26 PM </p>\n</blockquote>\n"},{"title":"恐惧","url":"http://code4fun.me/2018/09/07/恐惧/","content":"<p>最近听了「冬吴同学会」的第104期「人生的玩家」，这一期是关于电影「头号玩家」的，讲述了里面的三个游戏关卡，当然作为非影评节目，将电影肯定是从里面引申道理出来。其一个重要的观点就是，「事有不成，必有所惧」，听到这句话是宛若有一种柯南踩电门的感觉。</p>\n<p>真的有太多事因为恐惧而无法完成，有些恐惧甚至是没有来由的恐惧，例如害怕对方生气、或者提前对此事预设一个最坏的打算来吓唬自己、乃至有一些事情你都不知道害怕什么。对于我来说，作为一个不标准的宅男，但具备了一个基本上所有宅男都会有的缺点，害怕和人当面打交道，譬如问路。曾经的我，就是宁愿一个人来回走找地方，瞎费很大的功夫，也不想问别人。后来记不得什么情况下学会了一种「精神胜利法」或者说「破罐破摔分析法」，主要思路就是理性分析做这件事的利和弊，就拿问路来说，我成功的好处是知道怎么走了，节省时间和精力，失败了没有任何影响，哪怕对方态度不好，也是要擦肩而过了。另一件比较害怕的事情是演讲，上台前会分析这件事，做成了满堂彩、大家都高兴，失败了反正演讲这件事完成了，大家顶多知道我不擅长演讲这个事实，并不会失去什么。</p>\n<p>克服恐惧的办法应该就是跳出恐惧，用理性思维来对抗恐惧。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Sep 7, 2018 6:25 AM </p>\n</blockquote>\n"},{"title":"一件小事","url":"http://code4fun.me/2018/08/25/20180825/","content":"<p>好久没有技术方面的文章了，突然就不知道该怎么开始了，有了想法却是一想到写一篇文章所需要的时间和精力，就有点退缩了，于是时间就被用到刷B站、即刻、微博上了。</p>\n<p>这么说起来，已经有将近一个月没有学习新的东西了，<code>raft</code> 基本上就停在半路上了，忧伤。</p>\n<p>最近终于开始用<code>notion</code> 这个笔记软件，基本上是和<code>onenote</code>一起用，因为之前一直用，大部分东西也在里面，不过再次能用<code>markdown</code>，还是挺开心的，虽然支持不是很充分。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Aug 25, 2018 7:50 PM </p>\n</blockquote>\n"},{"title":"不愉快的事情","url":"http://code4fun.me/2018/08/19/unhappy things/","content":"<p>今天发生了一件不愉快的事情，详情如下：</p>\n<p>帖子标题主要参考 <a href=\"https://www.v2ex.com/t/457632\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/457632</a></p>\n<p>TLDR;</p>\n<p>5 月 2 日买的手机，5 月 14 日激活，7 月 11 日第一次出现手机没信号现象，然后中间重新购买三次卡贴，在其指定的维修店维修两个星期，说修不了了，最终店家甩锅上游，所以对其 slogan 可信赖的设备交易伙伴 提出质疑。<br>详细经过是这样的：</p>\n<p>在三月份的时候就观望过他们家，觉得有锁机确实比较便宜，有意。后来看到 <a href=\"https://www.v2ex.com/t/457632\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/457632</a> 事情发生，并且店家也致歉（ <a href=\"https://www.v2ex.com/t/457821\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/457821</a> ）并表示</p>\n<blockquote>\n<p>接下来我认为我需要沉淀一段时间，我需要思考一些问题，把这些问题想明白之前我不会再接一个单，大家都知道一句话叫做“不忘初心，方得始终”而这句话的后半句是“初心易得，始终难守”我现在大概就处于一个忘记了“初心”丢掉了“始终”的状态，我一直在试图把责任全部推到上游供应商以及买家身上，而忽略了我自己本身存在的重大问题。</p>\n</blockquote>\n<p>本以为店家确实考虑清楚了这个问题，于是 5 月 2 日就给家里人买了一部有锁的全新 iphone 8，然后我 5 月 14 日到家，帮忙激活，本着对店家的信任，连手机的 IMEI 码什么的都没有查，现在依然没有查过，不过现在是对店家的失望，开始使用，7 月 11 日首次收到家人联系我说手机总是没有信号，然后我就联系店家，于是按照店家的各种方法进行尝试，无果。</p>\n<p>8 月 5 日寄往店家给的维修手机的地址，8 月 18 日维修的告诉我手机无法维修了，要发回。今天联系我问手机什么问题，对于硬件并不了解的我就让他直接和维修的人沟通，这样避免我中间传话也传不清楚，结果店家回答，这个维修的是<strong>上游</strong>介绍的，他们不熟。我说现在手机该怎么办呢，结果是</p>\n<blockquote>\n<p>上游不想管我想管没能力管。<br>事情大致是这样子，其实我也不希望有锁机可以享受和官方机一样的待遇，只是店家的态度确实让人寒心。所以感觉手机还是尽量官网买吧，折腾一个多月，惹一肚子气，不值得。</p>\n</blockquote>\n<p>P.S. 吐槽一下三星的手机维护，清理完手机空间后，发现微信之前的语音和图片都失效了。</p>\n<p>上述内容是发布在<a href=\"https://www.v2ex.com/t/481231\" title=\"v2ex上的帖子\" target=\"_blank\" rel=\"external\"></a>，帖子主要陈述了一些当时的事实，另外就是感觉以后一定不要再干这种事情，还是官方靠谱。这件事情被老婆教育了半天，错误还是要自己承担，唉。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Aug 19, 2018 10:46 PM </p>\n</blockquote>\n"},{"title":"又一个flag立起了","url":"http://code4fun.me/2018/08/04/又一个新的flag/","content":"<p>再次决定写东西，这些天，一直在思考一个问题，在成长的过程中应该是觉得之前sb，当反过来的时候说明你并没有成长，反而变差了。对于写作这件事就出现了相同的情况，每次翻到之前的日记都会觉得不可思议，所以要强迫自己开始写东西了。</p>\n<p>今天开通了公众号，不过发现好难用，不知道能不能坚持下去，不过在这里的体验还继续，希望可以坚持下去。</p>\n<p>有的时候自己挺矛盾，明知道有些事情是错的，但是还是只能做下去。</p>\n<p>入职三个月了，感觉和想象的不太一样，日子过得太清闲，反而会给你带来恐惧，因为总是担心多年之后的生活会变差。</p>\n<p>最近在看福本伸行的开司赌博三部曲，奇异的画风、无处不在的ざわざわ，以及详细的心理描写，真是很优秀。手机的短信铃声都想修改为ざわざわ了。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Aug 4, 2018 8:19 AM </p>\n</blockquote>\n"},{"title":"颠沛流离的欧洲行","url":"http://code4fun.me/2018/06/04/欧洲之旅/","content":"<h2 id=\"Day-1-4-11\"><a href=\"#Day-1-4-11\" class=\"headerlink\" title=\"Day 1  4.11\"></a>Day 1  4.11</h2><p>终于到了出发的日子，晚上九点多从西安到上海，然后再从上海浦东机场转机到巴黎戴高乐机场。定了4点50的顺风车，为什么会这么早呢？这个后文提起。</p>\n<p>临出发前，突然想起欧洲的电话卡并没有带，然后就开始去放卡的地方找，然后发现卡不见了，尴尬。然后就是开始翻箱倒柜找卡，甚至到了翻垃圾桶的地步，仍然没有找到（至今也还没有找到）。中间顺风车司机催了两三次，没办法就赶紧出发去门口坐顺风车，到了之后，当然因为晚点被司机说了几句。后来发现是另外一个拼车的乘客着急去机场。一路堵着车到了机场附近去接那个乘客，然后到了后，司机说胎破了，走不了了，帮我们再叫一辆车，另一个拼车的着急就打了一个出租走，我们就跟着了呗。本以为可以便宜些，结果出租车司机狮子大开口要了100元，也没好意思讨价，就到了机场我们给那个人转了66元钱，顺风车司机给免了单，然后我们给他打赏（其实很不喜欢这个词，但貌似app上就是这个词）了30元，以抚慰其。</p>\n<p>早早到达机场去值机，托运行李，结果发现行李不能直挂，说要到了上海还要取了行李重新托运，后来发现虽然定的联程票，每个航班都被迫重新托运行李，eggache。然后就是无聊的在机场等着飞机的起飞，虽然晚出发了10分钟，可是飞机光荣的提前到了半个小时，等了好久的行李（这几趟飞机托运行李下来，发现等行李真是太费时间了），打电话联系酒店，然后又是漫长的等待酒店来接的过程，终于很晚的入住了酒店。这时候时间已经悄悄地滑到了4月11日的凌晨，本以为可以好好休息一下，结果发现房子没有窗、比较潮，而此时又正好赶上媳妇长湿疹，后果可想而知，当时只顾着图便宜却忘了这件事，折腾到很晚才睡着。</p>\n<h2 id=\"Day-2-4-11\"><a href=\"#Day-2-4-11\" class=\"headerlink\" title=\"Day 2 4.11\"></a>Day 2 4.11</h2><p>由于今日的飞机是下午12点50分的MU569从上海到巴黎戴高乐的飞机，所以就做9点的从酒店去机场的大巴，取登机牌，去托运行李，然后尴尬的事情就发生了，工作人员不给托运行李，原因是签证时间与机票时间不符，顿时感觉很尴尬了。这时候要把镜头切回到4月8日晚上，当时在之前在越南没事看护照的时候就有些对于签证和出行日期生起了一些疑惑，这天又想起这件事就好好的拿签证和机票一对比，发现果然有问题了，飞机会在11日的晚上九点到达巴黎，可是签证的正式生效日期是12日。当看到这个的时候，只能说我的内心是崩溃的。赶紧上网百度这种情况，原来犯傻的不只我一个人，果然是林子大了，什么鸟都有。大部分人的做法呢，当然是改签机票，意思是这样被发现会被遣返，当然也有些人在那边等到了第二天然后出发的，而这些人的意思是，只要航空公司放行，然后过海关的时候会让你签个免责协议就ok了，但是有人的航空公司不放行，因为发现后，被遣返航空公司要赔偿。既然如此，果断给东航的客服电话，然后客服给了一个肯定的答复，说我们东航不会管你签证的问题，同时我也试着问了一下改签的问题，结果说机票不能改签。然后又紧接着给上海的边防打电话，果然和网上的答复一模一样。事情发展到这也就稳住了，感觉没有什么大问题了。</p>\n<p>结果没想到12日当天被拦住了，既然机场的工作人员和客服人员的答复不一样，那好咯，就打电话回去吧。经历了长达1个小时的扯皮，看着我们的航班停止check in，然后最终的结果就是换了一架航班，改成了14日的法国航空AFxxx的航班。扯完皮已经是中午12点多，感觉整个人都要累得瘫痪了，主要是一大早起床没有吃饭，前一天晚上也没吃什么东西，而又花费大量的精力扯皮。好在媳妇贴心的去买了面包，吃了东西，感觉精神好了很多。</p>\n<p>然后在机场休息了一会就是考虑该下面几天该干什么去了，思考一段，果断决定去灵璧找tmq。然后就是原计划中接下来两天应该去法国的尼斯，先把尼斯相关行程中的住宿、火车票（幸好恰逢法国铁路罢工，轻松的退掉票）退掉，然后做地铁去找通哥见了个面、吃了个饭，然后地铁去了火车站。</p>\n<h2 id=\"Day-3-4-12\"><a href=\"#Day-3-4-12\" class=\"headerlink\" title=\"Day 3 4.12\"></a>Day 3 4.12</h2><p>修整，吃饭、睡觉、打豆豆。</p>\n<h2 id=\"Day-4-4-13\"><a href=\"#Day-4-4-13\" class=\"headerlink\" title=\"Day 4 4.13\"></a>Day 4 4.13</h2><p>今天要回上海了，从上海去灵璧的时候高铁班次很多，也就没有操心，提前买回去的票，结果今天一看，合适的都没有票了，然后就是抢票，两个人一起抢就是不好抢，最终只得买了一站的一等座，然后上车补票，人生第一次一等座，结果屁股还没有做热，就到站了，去二等座那站着。站回上海，由于通哥的公司给报销住宿费，所以就蹭了他一晚的住宿。</p>\n<h2 id=\"Day-5-4-14\"><a href=\"#Day-5-4-14\" class=\"headerlink\" title=\"Day 5 4.14\"></a>Day 5 4.14</h2><p>早起去做地铁赶到机场，这次就顺顺利利的托运行李、然后进入候机大厅，然后就是逛日上免税店，然后买了一些东西。</p>\n<p>然后等着登机，飞机还是蛮舒服的，看了追龙和三块广告牌等几部一直想看却没时间看的电影，然后还把之前的账重新整理了一下，一手手机看账单，一手在iPad上把帐记下来，之前一直觉得MoneyWiz很好用，可是用了安卓之后发现跨设备同步真蛋疼，标签貌似同步有问题，导致预算这个完全依赖标签的系统也就不准了，这个问题到了后来才发现，本来以为预算很充足，然后突然就发现预算超了。</p>\n<p>终于到达了巴黎戴高乐机场，继续是漫长的等行李，然后做地铁去市中心转车回酒店，一个人10欧，只能说巴黎的公交真是贵。由于计划第二天去5圈的打折村逛，所以买了1-5圈的周末青年天票，惯性的以为欧洲这边的一天票都是按照24小时这种算法的，结果到了酒店之后才发现原来这个是按照自然天算得，然后等于买的这个票就是白白的浪费掉了，WTF。</p>\n<p>来到埃菲尔铁塔下已经是傍晚了，铁塔在傍晚整点时，会有星光闪耀的表演，顿时整个铁塔会沉浸在闪闪的星光中，这个比白天光秃秃的铁塔好看很多。所以来埃菲尔铁塔的朋友们，如果时间允许可以选择待到晚上。<br>铁塔脚下，可以选择乘坐观光船，在塞纳河畔畅游，一个人是15欧，途径14个景点，包括巴黎的大小皇宫，奥赛艺术中心，巴黎圣母院等等。观光船每半小时一班，每趟是一个小时的观光时间。 </p>\n<h2 id=\"Day-6-4-15（周日）\"><a href=\"#Day-6-4-15（周日）\" class=\"headerlink\" title=\"Day 6 4.15（周日）\"></a>Day 6 4.15（周日）</h2><p>在酒店，美美的睡了一个大觉，准备赶大早去打折村，然后八点多出门发现街上几乎不咋有人，这个和后来去捷克或者布达佩斯早上六点多路上就好多人的情形真是差得有点多。来到法国当然是要吃法棍的，幸亏门口的蛋糕店开得比较早，去买了法棍，然后重新买了一日票，做着地铁就慢慢的前往打折村，由于到的时候还比较早，打折村还没有开门，就在周围随便逛了一逛，那边的天真的是好低。</p>\n<p>「此处应有一幅图」</p>\n<p>在周围逛了一圈然后就是进到里面去逛了，里面真是各种大牌店，本来想着如果有耐克等打折很便宜的鞋就买一双，然后发现里面好像并没有这么便宜的店，「汗」。大牌的驴牌等店门口都排着长队，感觉大家逛这些奢侈品店就像逛一元店一样，等后来到了老佛爷百货，感觉就像大家在逛菜市场了。在这，媳妇买了个包，然后给别人买了钱包做新婚礼物，由于周围人一直提醒说巴黎的治安很乱，为了防止被别人盯上，背着大登山包去的那边，把买来的包的包装都扔了，直接把包放在里面，不过看周围拿着驴牌包四处走的大有人在，顿时感觉我们应该是安全的。买完后，去门口退税，结果被告知时间太长，还不能退，最终只得在五月一日离境的时候在荷兰退税（不过到今天五月十三了还没有收到退的税款）。</p>\n<p>买完东西，就坐车回酒店休息以及啃法棍+辣条+咸菜，在预算有限的情况下，在欧洲生活真是太艰难了。中午休息过后，下午出发去<br><strong>查找免费的博物馆等</strong><br>主要是参观各种博物馆和教堂，从卢浮宫到奥赛博物馆，从凯旋门到圣心教堂，开启了最强暴走模式！中午去吃饭。</p>\n<h2 id=\"Day-7-4-16（周一）\"><a href=\"#Day-7-4-16（周一）\" class=\"headerlink\" title=\"Day 7 4.16（周一）\"></a>Day 7 4.16（周一）</h2><p>先把行李寄存在酒店，去巴黎的市区逛，购，物，从<br>Paris (Bercy Seine), 210 quai de Bercy(22:55)做夜大巴去苏黎世</p>\n<h2 id=\"Day-8-4-17\"><a href=\"#Day-8-4-17\" class=\"headerlink\" title=\"Day 8 4.17\"></a>Day 8 4.17</h2><p>早上9点大巴到达苏黎世Zurich central station (Bus Station Zürich)，本着省钱的想法就步行2公里多前往Gasthaus zum Guten Glück酒店，结果路上就发生了一件很差的事情，在媳妇拿着手机玩的时候，我一挥手真好打上手机，然后手机应声落地，然后看屏幕碎了，本以为是外屏碎，结果一开机竟然发现是内屏碎，而且更蛋疼的是，触控不灵了。也就是说基本上这个手机啥都干不成了，心情瞬间跌落谷底。磕磕碰碰的把行李放到酒店，然后出来想先去修屏幕，就看到一家店，屏幕300多，也还可以接受，结果过去一问价格变成了700多，就问他说网上的价格为啥便宜而这里的贵，原因竟然是这里的是帮你安装上的费用，这就是手工费啊。瞬间无比怀念我大天朝，上门给你安装都只要200多。鉴于这感人的价格只得作罢，于是拍照就变成了利用siri打开相机或者艰难的滑动到相机界面，然后再用音量键来拍。</p>\n<p>就这么逛了一下午，然后就回去了。不得不说苏黎世的物价是真的贵，后来在网上查到这里人的平均月薪全球第一，大约4w人民币，像我等一个月200助研费的人怎么活。路上各种跑车，然后我们发现我俩应该是当地最穷的人，所以立即不再担心被偷或者被抢了，整个人都轻松了起来。</p>\n<p>回酒店前在超市买了面条和面包等，在酒店烧了热水就着红99泡了面条，终于吃了一顿比较偏中式的饭了，虽然面条有点生，但还是吃得很开心。</p>\n<p>第一天，放慢脚步，悠闲地游览市区各个景点。到国家博物馆学历史，在圣彼得教堂，圣母大教堂和苏黎世大教堂体验一下宗教的神圣，去班霍夫大街在名店中流连。   </p>\n<p>交通指南</p>\n<p>苏黎世市区不大，今天所有的景点都在步行可至的范围内。如不想步行，也可以搭乘有轨电车，中心区域的24小时天票为8.4瑞士法郎。<br>第1站：瑞士国家博物馆 ><br>游玩指南 以火车站为起点出发，先去车站旁的国家博物馆，这里是瑞士最大的博物馆，里面陈列了从瑞士出土的各个年份的石器、手工艺品、艺术品以及人文书画等，堪称欧洲上千年历史的剪影。参观1个小时左右。<br>第2站：班霍夫大街 ><br>游玩指南# 然后沿着班霍夫大街可以一路逛过去，这里是全球地价最高的街道之一，遍布世界各地的顶级奢侈品牌和私人银行林立。沿着街道可以找到瑞士最高档的商店，这里拥有从最顶尖的服装设计师到鞋子、皮毛、首饰、瓷器和珠宝等高档选择，当然，还有瑞士手表。逛上1-2个小时，千万不要错过那些精致的巧克力店哦！<br>第3站：奥古斯汀巷 ><br>游玩指南# 之后中午可以从班霍夫大街拐进紧挨着的奥古斯丁巷，这里是苏黎世老城最富有魅力的一条小巷，有着最漂亮的瑞士特色建筑，也是一条富于浪漫情调的小巷。中午就在这里找上一家有氛围的餐厅享用午餐吧，有兴趣的话可以尝试下瑞士特色的芝士火锅。</p>\n<p>第4站：苏黎世圣彼得大教堂 ><br>游玩指南# 午餐之后沿着小巷走到另一头就是苏黎世最古老的圣彼得大教堂了，始建于1534年的教堂塔楼上有欧洲最大的教堂钟指针盘，钟盘面直径有8.7米，时针长3米，分针长4米。据说，这个教堂塔楼曾经用于监视火灾，一旦发生火灾，就有人把一面旗伸向发生火灾的方向，以此警示人们需要救火的位置。游玩约1个小时。<br>第5站：苏黎世圣母大教堂 ><br>游玩指南# 接着往河边的方向走就能看到圣母大教堂，这个宏伟的大教堂因其高高的尖塔而知名，尖塔的顶部为蓝绿色，非常的显著，成为苏黎世上空最显著的风景线。除了尖塔外，大教堂还因5块彩色玻璃窗而闻名瑞士，每一块彩色玻璃窗都有一个主导色彩，极其的精美，每块玻璃窗上还讲述了一个基督教故事。游玩约1个小时，要注意的是教堂内禁止拍照。<br>第6站：苏黎世大教堂 ><br>游玩指南# 从圣母大教堂旁边雕有石狮子的桥，往河对岸望去就是苏黎世大教堂，这座教堂以罗曼式的双塔闻名，并以此作为苏黎世的城市象征。教堂免费开放，登塔需要4瑞士法郎。建议游玩1个小时。<br>第7站：尼德道尔夫 ><br>游玩指南# 傍晚可以选择继续沿着河走到尼德道尔夫小巷，这里有琳琅满目的各种餐厅、首饰店、礼品店、书店、咖啡馆，总之应有尽有，是苏黎世最具老城风情的小巷。晚上就在这里好好逛逛，并且享用晚餐吧！</p>\n<h2 id=\"Day-9-4-18\"><a href=\"#Day-9-4-18\" class=\"headerlink\" title=\"Day 9 4.18\"></a>Day 9 4.18</h2><p>早上前往FIFA总部去看大力神杯以及顺路去苏黎世湖，走到FIFA总部，发现需要买门票，于是就没有进去而是直接去了苏黎世湖。<br>到达苏黎世湖望着那平洁的湖面以及远方的雪山，估计只能用「人间仙境」来形容了，吹着和煦的微风、望着绿水雪山，瞬间感觉整个人都平静下来了。然后就想着，如果能和媳妇在这坐着一直慢慢变老该多好，继而想起来如果在这求婚也很不错啊。然后媳妇突然冒出来一句「要不你和我求婚吧」，然后瞬间感觉整个人都无比尴尬，此种心情真是一言难尽啊。不过考虑到这良辰美景，不求婚真是辜负了。然后为了庆祝这个美好的日子，斥资300多大洋买了两个三明治、一份沙拉和两杯咖啡来到湖边野餐。看着旁边有人在晒日光浴，竟然还有人烧烤，真是悠闲。下一步还是决定买个手机，看了一下这边的三星和国行价格差不多，如果还能退了税的话那价格还能便宜几百块钱，可是最终由于是做大巴从这走的没有退成税。接下来就是花了一段时间在当地的手机店买了一部三星S9+。买完手机终于可以去把湖边的美景拍下来了，于是就在湖边拍照、做着看风景悠悠闲闲的度过了一个下午。<br>晚上20.50 从 zurich,bus-parkplatz sihlquai做夜大巴去布拉格</p>\n<h2 id=\"Day-10-4-19\"><a href=\"#Day-10-4-19\" class=\"headerlink\" title=\"Day 10 4.19\"></a>Day 10 4.19</h2><p>早上 06点25分  到达Praha,Hlavni Nadrazi，由于时间还比较早于是决定先去喝在网上看好的牛肉汤，然后再去Airbnb。到了之后发现一个很尴尬的问题，墙上都是写的捷克文，看不懂啊。然后终于老板给拿了一个带图的菜单，才完成了点餐的问题，不过还是没有搞懂点了个啥，只知道点了个汤，等上汤之后发现是牛肚汤，味道有点太咸了，不过比干面包要强得多。</p>\n<p>吃饱喝足之后，媳妇提议步行去住的地方。然后最后的状态是自己做的决定，哭着也要走完。其实距离的话并不是很远，但是主要问题是那边的路不平，一会上一会下，然后再背着大包就很难受了。不过，经过长途跋涉终于到达了住的地方，女主人很和蔼，房子很干净，还给准备了welcome snack，其中一块一直在包里放到了希腊才吃掉。由于是民宿，没有很严格的入住时间，所以很开心的就提前入住，然后睡了一小觉，下午就开开心心的出去逛了。</p>\n<p>确切的说，应该是去觅食，从Trip Advisor上找了一家评分比较高的店，要了一份牛排、一份大肘子、一杯啤酒，味道很棒，可是太多了，然后啤酒就喝得晕晕的，这个酒真是不能喝啊。所以整个下午前期逛得时候就是觉得特别累，去布拉格的老城广场逛了一下，一年过去了，发现那个著名的天文钟还在修，上次去的时候还能隔着搭的架子看到，现在整体都已经被封起来了，只能看到封的布上的画，然后去菠丹尼买了一些东西以及在施华洛式奇买了些礼物。此时已经累得很了，沿着河边走得时候，看到有人在做游船，于是就去做游船了，瞬间感觉舒服了很多，又轻松又愉悦，欣赏着湖边的风景、静静的坐在传上随波驻流、听着岸边小酒吧的音乐，生活真是惬意啊。</p>\n<p>在船上漂流了一个多小时，夜幕也慢慢要降临了，于是上岸，在桥边看起了日落，虽然远方有些建筑的遮挡，不得不说还是很美的。看完日落，又去了著名的查理大桥，果然人挤人、蛙声一片。</p>\n<h2 id=\"Day-11-4-20\"><a href=\"#Day-11-4-20\" class=\"headerlink\" title=\"Day 11 4.20\"></a>Day 11 4.20</h2><p><img src=\"\" alt=\"\"><br>09.00am 从 Praha, Letiste vaclava havla 出发<br>10.40am 到达 Karlovy vary,trznice，逛，吃，</p>\n<p>19.00 从Karlovy Vary, Dolni nadrazi离开，<br>21.00 到达Praha, Hradcanska，回酒店。<br><img src=\"\" alt=\"\"></p>\n<h2 id=\"Day-12-4-21\"><a href=\"#Day-12-4-21\" class=\"headerlink\" title=\"Day 12 4.21\"></a>Day 12 4.21</h2><p>布拉格逛<br><img src=\"\" alt=\"\"><br>晚上23.00从Praha，UAN Florenc离开</p>\n<h2 id=\"Day-13-4-22\"><a href=\"#Day-13-4-22\" class=\"headerlink\" title=\"Day 13 4.22\"></a>Day 13 4.22</h2><p><img src=\"\" alt=\"\"><br>到达 Budapest, Kelenfold vasutallomas etele ter，去酒店(Das Nest Budapest)(1072 Budapest, Akácfa utca 10, Hungary)放行李，<br><img src=\"\" alt=\"\"><br>逛市区，</p>\n<h2 id=\"Day-14-4-23\"><a href=\"#Day-14-4-23\" class=\"headerlink\" title=\"Day 14 4.23\"></a>Day 14 4.23</h2><p><img src=\"\" alt=\"\"><br>去机场，10.10am飞机起飞<br>下午1.10pm到达雅典，去酒店放行李，在市区逛<br><img src=\"\" alt=\"\"></p>\n<h2 id=\"Day-15-4-24\"><a href=\"#Day-15-4-24\" class=\"headerlink\" title=\"Day 15 4.24\"></a>Day 15 4.24</h2><p>在雅典市区逛</p>\n<h2 id=\"Day-16-4-25\"><a href=\"#Day-16-4-25\" class=\"headerlink\" title=\"Day 16 4.25\"></a>Day 16 4.25</h2><p>由于船的Check in时间为 06:55，所以早上起了一个大早去Piraeus港口做前往圣托里尼的船，提前定好了Blue Star的船，然后正常的换了票，然后登船的时候出现bug了，那个人说是票错了，拿票仔细一看果然有问题，票是4月18号的，也就是说买了一周前的票，于是赶紧跑到换票的地方去看能不能改，去了之后竟然直接改了，工作人员说我们比较Lucky，然后没听清什么原因，反正就可以免费直接改签了，开心，毕竟一张票要40欧元，要是直接作废了就尴尬了。</p>\n<p>然后就顺利的登船，买的船票是没有座位的，就随便找了个地方坐下，中间去甲板上看了一下爱琴海，真的和之前见到的海不一样，之前泰国和越南的海都主要是在海滩上看得，就算出岛也没有走到很深的地方，而当初在北欧的时候，到了深海地带不知是由于晚上的原因还是什么看到的海是偏黑的，而这边却是那种平静的蓝色，真的很美。</p>\n<p>下午14:55 到达圣托里尼，酒店老板一位十分个性的老头和一只小狗去接我们去了，从海港往外的方向是向上的上路，从山上往下看的时候感觉是一种不真实的美丽，蔚蓝的海面上，停泊着几艘白色的帆船，像一幅美丽的画卷一样。<br>到了酒店之后，修整片刻，就在旁边的饭店吃了饭，希腊特色沙拉+土耳其烤肉卷。饭后就赶着公交去伊亚这个号称拥有最美日落的地方看日落，<br>我看了评价之后选择了，这是一家很大的公司，他家的船很大很大……船大了就非常平稳，即使在风大浪急的一月份的爱琴海上也完全没有感觉到颠簸。<br>定了比较早的7：25出发的船，担心港口船太多找不到所以我们很早就到了，到港口只需要坐其中一条地铁坐到终点站Piraeus就可以啦（具体是哪条忘记了……）港口就叫，出了地铁站马上就可以看到停泊的船</p>\n<p>Check-in Date/Time: Wed 18 Apr 2018</p>\n<p> 早上 坐船去圣托里尼，到达圣托里尼，逛看海，<br>Wed 18/04/2018 </p>\n<h2 id=\"Day-17-4-26\"><a href=\"#Day-17-4-26\" class=\"headerlink\" title=\"Day  17 4.26\"></a>Day  17 4.26</h2><p>在圣托里尼逛<br>晚上9:55pm从机场坐飞机，</p>\n<h2 id=\"Day-18-4-27\"><a href=\"#Day-18-4-27\" class=\"headerlink\" title=\"Day 18 4.27\"></a>Day 18 4.27</h2><p>12:35am 到达阿姆斯特丹，在机场睡一小会。<br><strong>荷兰的ATM机较少，可以选择在其余地区多取一些</strong><br><img src=\"\" alt=\"\"></p>\n<h2 id=\"Day-19-4-27\"><a href=\"#Day-19-4-27\" class=\"headerlink\" title=\"Day 19 4.27\"></a>Day 19 4.27</h2><p>9点，去酒店放行李，参加国王节庆典。</p>\n<h2 id=\"Day-20-4-28\"><a href=\"#Day-20-4-28\" class=\"headerlink\" title=\"Day 20 4.28\"></a>Day 20 4.28</h2><p> 逛郁金香公园，梵高博物馆，阿姆斯特丹游船</p>\n<h2 id=\"Day-21-4-29\"><a href=\"#Day-21-4-29\" class=\"headerlink\" title=\"Day 21 4.29\"></a>Day 21 4.29</h2><p>可以乘火车。火车站的站台也有自助购票机，自助购票也可以，最保守的做法就是去火车站售票处买票。<br>阿姆斯特丹（Amsterdam Centrum）到海牙（Den Haag Centrum），NS - Intercity城际：51.5公里，行程48分钟，票价11.50欧元/人。<br>海牙（Den Haag）和鹿特丹（Rotterdam）之间有地铁（Metro），E线（深蓝色），车程33分钟，票价4.43欧元/人。运营时间：周一至周五05:26—00:11。周六06:11—00:11。周日：07:26—00:11。均为10—15分钟1班。刷OV卡，或自助购票机上买票。<br><img src=\"\" alt=\"\"><br>早上从阿姆思特丹去鹿特丹，看小孩提防，海牙+ 台夫特，烏特勒支，Utrecht</p>\n<h2 id=\"Day-21-4-30\"><a href=\"#Day-21-4-30\" class=\"headerlink\" title=\"Day 21 4.30\"></a>Day 21 4.30</h2><p> 从鹿特丹去风车村，当天来回<br>第一种方式：在鹿特丹中央火车站（rotterdam centraal)乘坐metro E或D号线，单程票价为3，5欧–开往slinge方向(单程票可以在两个小时内使用)在leuvehaven站下车，下车之后往插着很多国家国旗方向行走，会看见一个yellow tower的前方就有一个售票亭(boottocht）在那儿花费15欧就可以买一张往返于鹿特丹和风车村的往返票，小孩是12欧，注意时间船的始发时间是从12点开始到16点，船上附有荷兰语和英语的景点解释，比如防堤大坝，erasmus大桥全景，推荐试一下船上的咖啡和一种用水果来做的蛋糕。<br>第二种方式：在从kinderdijk回鹿特丹的路上遇到了把已拥有往返票的回程船做掉了，在好心荷兰人的帮助下转了一次船回鹿特丹，第二种方式还是先要从中央火车站坐地铁前往leuvehaven，在位于erasmus桥的左侧有一个乘坐waterbus的地方（就是一种轮船，上面提供Wi-Fi），选择waterbus到Ridderkerk费用4欧，之后到了Ridderkerk换乘小黄船，只坐两个站就到了Kinderdijk，这种方式比起第一种来说，更实惠，在11欧左右可以往返鹿特丹，而第二种方式花时比较少，船上又有Wi-Fi使用，相当不错：<br>鹿特丹Waterbus——Ridderkerk—–Kinderdijik 风车村 ，总共11欧</p>\n<h2 id=\"Day-22-5-1\"><a href=\"#Day-22-5-1\" class=\"headerlink\" title=\"Day 22 5.1\"></a>Day 22 5.1</h2><p> 从鹿特丹去阿姆斯特丹<br><img src=\"\" alt=\"\"><br>17:20pm 坐飞机离开阿姆斯特丹</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Aug 4, 2018 8:19 AM </p>\n</blockquote>\n"},{"title":"Git常用命令","url":"http://code4fun.me/2018/05/01/git_command/","content":"<blockquote>\n<p>假如全世界的工具你只能保留一个在电脑，你的选择是什么？Git.<br>—《我的老大是屌丝》摘</p>\n</blockquote>\n<p>从设计转型开发的第一天起，老大只教我一件事，使用 Git。</p>\n<p>比起一上来就给我各种任务写 HTML/CSS/JS 调各种 Bug, 让我熟练掌握 Git 这件事至今我都非常感激。<br>毫无疑问地说，Git 是当今编程学习里最基本的必备技能。<br>Git 的强大一本书都不足以全部说明，更何况一篇博客。<br>本文记录了我 3 年来使用 Git 最频繁的命令（不包括最基本的add/commit/push/pull等），<br>很负责地说，学会这些基本也就能快乐地玩转 Git 了 <strong>（持续整理更新中）</strong> 。</p>\n<p>Hope you enjoy!</p>\n<h2 id=\"1-超实用-Alias\"><a href=\"#1-超实用-Alias\" class=\"headerlink\" title=\"1. 超实用 Alias\"></a><strong>1. 超实用 Alias</strong></h2><h2 id=\"2-取回远端-master-与本地-master分支合并\"><a href=\"#2-取回远端-master-与本地-master分支合并\" class=\"headerlink\" title=\"2. 取回远端 master 与本地 master分支合并\"></a><strong>2. 取回远端 <code>master</code> 与本地 <code>master</code>分支合并</strong></h2><h2 id=\"3-推送分支到远端\"><a href=\"#3-推送分支到远端\" class=\"headerlink\" title=\"3. 推送分支到远端\"></a><strong>3. 推送分支到远端</strong></h2><p>假设现在所在的分支是 <code>import</code> ，指定推送到远端分支 <code>liujin-import</code></p>\n<p>假如远端的 <code>liujin-import</code> 分支已经不需要，可以直接覆盖掉</p>\n<h2 id=\"4-追加文件到某个-commit\"><a href=\"#4-追加文件到某个-commit\" class=\"headerlink\" title=\"4. 追加文件到某个 commit\"></a><strong>4. 追加文件到某个 commit</strong></h2><p>有时候修完某功能并提交了 commit 之后才发现还有一点小修改，这时候又不想再提交一个commit，可以追加这个文件到前一个commit，步骤如下：</p>\n<h2 id=\"5-查找包含某文件的-commit\"><a href=\"#5-查找包含某文件的-commit\" class=\"headerlink\" title=\"5. 查找包含某文件的 commit\"></a><strong>5. 查找包含某文件的 commit</strong></h2><p>或者</p>\n<p>Ref: List all commit for a specific file</p>\n<h2 id=\"6-把一个-commit-分拆为两个-commit\"><a href=\"#6-把一个-commit-分拆为两个-commit\" class=\"headerlink\" title=\"6. 把一个 commit 分拆为两个 commit\"></a><strong>6. 把一个 commit 分拆为两个 commit</strong></h2><p>老大常说要养成一个小改动对应一个commit的习惯，但是有时候写得太乱懒得去分割就把很多改动做成了一个commit，这样子增加了以后维护的难度，所以要把一个 commit 分拆为多个 commit 怎么办呢？</p>\n<ul>\n<li><p>首先把你要分拆的 file reset 了：</p>\n</li>\n<li><p>接着修改当前这个 commit 的 message，命令是：</p>\n</li>\n<li><p>然后就可以把 reset 出来那个 file 新建一个 commit，命令是：</p>\n</li>\n</ul>\n<p>这样就把一个 commit 分拆为两个啦，^_^</p>\n<h2 id=\"7-删除某些-commit\"><a href=\"#7-删除某些-commit\" class=\"headerlink\" title=\"7. 删除某些 commit\"></a><strong>7. 删除某些 commit</strong></h2><h2 id=\"8-追加修改到之前某个-commit\"><a href=\"#8-追加修改到之前某个-commit\" class=\"headerlink\" title=\"8. 追加修改到之前某个 commit\"></a><strong>8. 追加修改到之前某个 commit</strong></h2><p>假如 <code>gst</code> 发现已经有文件被修改，这时候需要把修改暂存起来。</p>\n<p>接着找到你需要追加修改的那个commit id，如 <code>4b739bb</code></p>\n<p>这时候会自动打开编辑器，把你需要修改的 commit 前面的 <code>pick</code> 改成 <code>edit</code> ，保存，关闭编辑器，这时候会回到终端，再输入:</p>\n<p>把暂存的修改读出来，然后做修改， <code>g add .</code> ，最后</p>\n<h2 id=\"9-查找含有特定关键字的-commit\"><a href=\"#9-查找含有特定关键字的-commit\" class=\"headerlink\" title=\"9. 查找含有特定关键字的 commit\"></a><strong>9. 查找含有特定关键字的 commit</strong></h2><ul>\n<li><code>git log --grep</code></li>\n<li><p>最基本的用法</p>\n</li>\n<li><p><code>git log --grep=frotz --grep=nitfol --since=1.month</code></p>\n</li>\n<li><p>查找一个月以内commit log message里含有 <code>frotz</code> 或者 <code>nitfol</code> 的 commits</p>\n</li>\n<li><p><code>git log --grep=frotz --author=Linus</code></p>\n</li>\n<li><p>查找指定作者</p>\n</li>\n<li><p><code>git grep -l -e frotz --and -e nitfol</code></p>\n</li>\n<li><p>查找同一行含有 <code>frotz</code> 和 <code>nitfol</code> 的文件</p>\n</li>\n<li><p><code>git grep -l --all-match -e frotz -e nitfol</code></p>\n</li>\n<li>查找文件里面含有 <code>frotz</code> 和 <code>nitfol</code> 的文件（不局限于同一行）</li>\n</ul>\n<h2 id=\"10-清空-git-working-copy-还没追踪的文件\"><a href=\"#10-清空-git-working-copy-还没追踪的文件\" class=\"headerlink\" title=\"10. 清空 git working copy 还没追踪的文件\"></a><strong>10. 清空 git working copy 还没追踪的文件</strong></h2><ul>\n<li><p><code>git clean -f</code></p>\n</li>\n<li><p><code>git clean -f -d</code></p>\n</li>\n<li><p>如果还想删除目录</p>\n</li>\n<li><p><code>git clean -f -X</code></p>\n</li>\n<li><p>如果只是想删除忽略的文件</p>\n</li>\n<li><p><code>git clean -f -x</code></p>\n</li>\n<li>如果想删除忽略和非忽略的文件</li>\n</ul>\n<h2 id=\"11-清理本地仓库\"><a href=\"#11-清理本地仓库\" class=\"headerlink\" title=\"11. 清理本地仓库\"></a><strong>11. 清理本地仓库</strong></h2><p>长时间做一个项目，经常需要 <code>git fetch</code> ，这样做每次都会拉回远端的全部分支。<br>即使远端有些分支已经删除，但是运行 <code>git branch -a</code> 还是会显示已删除的分支，<br>长时间下来这个列表就会很长很长，这时候就需要清理一下本地的仓库了：</p>\n<h2 id=\"12-创建追踪远端分支的本地分支\"><a href=\"#12-创建追踪远端分支的本地分支\" class=\"headerlink\" title=\"12. 创建追踪远端分支的本地分支\"></a><strong>12. 创建追踪远端分支的本地分支</strong></h2><h2 id=\"13-分支移动\"><a href=\"#13-分支移动\" class=\"headerlink\" title=\"13. 分支移动\"></a><strong>13. 分支移动</strong></h2><h2 id=\"14-Revert一个-Merge\"><a href=\"#14-Revert一个-Merge\" class=\"headerlink\" title=\"14. Revert一个 Merge\"></a><strong>14. Revert一个 Merge</strong></h2><p><code>git revert -m 1 M</code> -&gt; W</p>\n<h2 id=\"15-获取短的-commit-hash\"><a href=\"#15-获取短的-commit-hash\" class=\"headerlink\" title=\"15. 获取短的 commit hash\"></a><strong>15. 获取短的 commit hash</strong></h2><h2 id=\"16-commit-了以后才记起来忘了创建-gitignore-垃圾文件都已经提交\"><a href=\"#16-commit-了以后才记起来忘了创建-gitignore-垃圾文件都已经提交\" class=\"headerlink\" title=\"16. commit 了以后才记起来忘了创建 .gitignore, 垃圾文件都已经提交\"></a><strong>16. commit 了以后才记起来忘了创建 <code>.gitignore</code>, 垃圾文件都已经提交</strong></h2><p>比如说一个nodejs项目，一开始的时候就忘记了创建 <code>.gitnore</code> 文件忽略掉 <code>node_modules</code> 的内容，所以其中的内容就已经被提交了。</p>\n<p>即使紧接着你在 <code>.gitignore</code> 加了一行 <code>node_modules</code>, 已经被提交的文件是不会自动删除的。</p>\n<p>这时候你就需要做的就是：</p>\n<h2 id=\"17-提交所有被删除的文件\"><a href=\"#17-提交所有被删除的文件\" class=\"headerlink\" title=\"17. 提交所有被删除的文件\"></a><strong>17. 提交所有被删除的文件</strong></h2><p>这个命令告诉 git 自动更新已跟踪的文件, 包括被删除的已跟踪文件。</p>\n<p>如果你用的是 git 2.0</p>\n<p>友情提示：从 git 2.0(2013年中)开始，以上命令会 stage 整个 working tree 的文件。<br>如果你只是想 stage 当前目录的文件，应该这么用：</p>\n<p>详情可以去搜 ““git add -A” 和 “git add .” 的区别”.</p>\n<p>Ref: StackOverflow</p>\n<h2 id=\"18-撤销上一次-git-add-操作\"><a href=\"#18-撤销上一次-git-add-操作\" class=\"headerlink\" title=\"18. 撤销上一次 git add .操作\"></a><strong>18. 撤销上一次 <code>git add .</code>操作</strong></h2><p>这种情况通常是因为忘记添加 <code>.gitignore</code> 文件，或者一时手快把一些非必要的文件（如 <code>node_modules</code> )跟踪了, 解决办法：</p>\n<p>该命令会 unstage 你上一个 commit 增加的所有文件。</p>\n<p>如果你只想 unstage 某些文件:</p>\n<p>还可以 unstage 文件里某处的改动：</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:42:13</p>\n</blockquote>\n"},{"title":"some thinkings in old days","url":"http://code4fun.me/2018/05/01/dailynote_history/","content":"<h2 id=\"自勉\"><a href=\"#自勉\" class=\"headerlink\" title=\"自勉\"></a>自勉</h2><p>有些事要根据需求来确定目标，有些事要根据目标来确定需求。前者譬如买电脑，你要根据你买电脑的目的来确定买什么电脑，而不是先确定买什么电脑再根据电脑调整自己的需求，这样只会让自己为物所奴役。而后者譬如成长，你不应该根据现在的情况去预期你十年后的成就，而应该根据你打算十年后成为什么样的人，而去确定今天需要干什么。切莫本末倒置！自勉。</p>\n<h2 id=\"那么远，那么近\"><a href=\"#那么远，那么近\" class=\"headerlink\" title=\"那么远，那么近\"></a>那么远，那么近</h2><p>To LD:</p>\n<p>看了视频，一种恍如隔世，又恰似昨日的感觉。虽然分开只有一个多月的时间，距离视频拍摄也就半年的时间，可是一切却是感觉那么遥远，好久没有那种简单的搂着你两个人心有灵犀的一吻的感觉了；可是，一切又是那么近，仿佛唇齿间还残留着你的甜蜜、指尖还是轻轻拂去你发丝的感觉。</p>\n<p>小别胜新婚的感觉早有体会，见面时候的激动、那相拥的甜蜜，就像之前放假临开学前，每次都是不断思念着、幻想着见面时的美好，一幕幕再内心中想了无数遍。可是却宁可不要这种感觉，虽然激动但是缺少了平淡的美好，一直待在一起多么美好，何苦这些别后重逢的喜悦。</p>\n<p>有的时候，真的感觉很无力，就想歌曲《一无所有》里面那种感觉一样，明明知道你很难受，需要我，可是就是远在天边，过不去，什么都做不了，所以前一段时间萌生了让你先找个男朋友的想法，曾经记得有人说过爱是自私的、爱一个人是不希望他和别人幸福的，曾经以为就是这样的，可是现在感觉就是，看着那个人在那难受，而你自己什么都干不了，真的是不好过。不管内心里有多少不满意，还是不想看你在那受委屈。不过还好，已经过去了。</p>\n<p>我们在一起也经历了这么多风雨了，能闹的基本也都闹过了，该经历的也已经都经历过了，我们会守的云开见月明的。</p>\n<p>Love U</p>\n<p>爱你的老公</p>\n<h2 id=\"记梦\"><a href=\"#记梦\" class=\"headerlink\" title=\"记梦\"></a>记梦</h2><p>好吧。床上没笔了。<br>貌似梦到kindle寄过来了，然后就忘了。</p>\n<h2 id=\"禅与摩托车维修店\"><a href=\"#禅与摩托车维修店\" class=\"headerlink\" title=\"禅与摩托车维修店\"></a>禅与摩托车维修店</h2><p>禅与摩托车维修</p>\n<p>罗伯特•M•波西格</p>\n<p>闲来无事，在火车站等火车，于是乎写个读书笔记。</p>\n<p>首先，吐槽一下张国辰的翻译，庞加莱竟然给翻译成彭加列，我说怎么可以这些熟悉的成果会在这么莫名的一个人身上。</p>\n<p>此书讲的是作者一边骑摩托旅行一边进行肖陶扩的双线事情。一条线就是作者在骑摩托路上的所见所感，和一同行者约翰对摩托修理的不同认知，从而导致两人之间的矛盾，自然引出另外一条线索，菲德洛对良质的探索。基本上就是一本带着叙事线索的哲学书籍。</p>\n<p>在摩托车维修部分，告诉哦了我们一种解决问题的方法就是开始写出出现的问题，然后就是你的一些对此问题的猜想，然后对这个猜想逐渐排查验证。譬如你的电脑显示器不亮了，那是什么问题呢？也许是显示器与主机排线送了，当然更简单的也许你的显示器电源处松动了等等。把这些都列在纸上，然后逐个排查。或者拆解重装也一样，按照一定的次序慢慢来，当然在哲学观点上这种行为不具有完善性，但是对我们现实生活还是很有指导意义的。这让我想起了之前看的《鲁宾逊漂流记》，虽然书中的大部分情节都忘记了，但是当时鲁滨逊一种判断事情好坏的方法让我依然记忆犹新，也许这就是读书的一点好处吧，就是首先把那件事写在顶部，下面分两栏，一栏写这样的好处，一种写这样的坏处，虽然当时这种行为被认为是典型的资产阶级观点，但是确实对于一些你觉得两难的决定很有帮助。</p>\n<p>嗯 跳过这一话题，在菲德洛追寻良质的过程中，去探索东方文明的时候发现了道德经，还好这个没有按英文直译过来，而是道德经原文。也就是把他所追寻的良质和道划上了等号。后来又追溯到古希腊时期的智者，发现良质本质上就是卓越，就像古时候那些智者一样都是精通各种东西的大牛。大意就是一堆后来的哲学家用辩证法把大家蒙蔽了，过于提高了真理（人为的鬼魂）的地位，所以使良质的地位降低了。</p>\n<p>书刚刚看完，说实话读的懵懵懂懂，先借此梳理一下思路。<br>感觉比较怪怪的一点就是，菲德洛是一个修辞学老师，和哲学研究有什么关系呢？</p>\n<h2 id=\"社交恐惧\"><a href=\"#社交恐惧\" class=\"headerlink\" title=\"社交恐惧\"></a>社交恐惧</h2><p>好久没弄博客了，do的网速太渣了。</p>\n<p>一直在思考一个问题，那就是如果人与人之间一直是透明的，并且是可以衡量的，那样会怎样。</p>\n<h2 id=\"热力学零度无法达到\"><a href=\"#热力学零度无法达到\" class=\"headerlink\" title=\"热力学零度无法达到\"></a>热力学零度无法达到</h2><h2 id=\"梦3\"><a href=\"#梦3\" class=\"headerlink\" title=\"梦3\"></a>梦3</h2><p>梦发生的地点是家西，屋子外面。</p>\n<p>开始貌似是卖电动三轮，说卖了一个大灯的，比较高兴，当然是因为这个是旧的了，可是不一会，那几个人就回来换了，说是开起来晃悠，应该是一男两女，男的年纪比较大了，可是当时三轮车看上去相当旧，当时我的感觉就是，这都能买， 他们要换，老兄当然不想给换，于是乎，就和那两个女的说是心理作用，就去给那个男的在电机那块塞了个东西，于是就去和那个男的试车。</p>\n<p>镜头也戛然而止，地点没换，在门口有一个躺椅，好像是二饭店的老板拿了个抹布顺了一下头发，就是从下到上，从额头开始往后的。还说了句“什么什么my hair”， 貌似老爸还夸了句说英语都比你好。</p>\n<p>中间还有一段，在里屋的，老爸说了我“考试考的很好之类的”，我当时说这是夸我还是损我？老爸好像是说看着办。你自己理解，然后就囧爆了。。。</p>\n<h2 id=\"梦6\"><a href=\"#梦6\" class=\"headerlink\" title=\"梦6\"></a>梦6</h2><p>昨晚又怒做一梦咯，貌似是两个人在河边走。擦，有点扯淡。</p>\n<h2 id=\"12-30\"><a href=\"#12-30\" class=\"headerlink\" title=\"12.30\"></a>12.30</h2><p>严于律己，宽以待人。可以说很难做到，出了问题时习惯苛责别人没做好，仿佛都是别人的错。有些东西我们总是希望别人能做到很好，尤其是站着说话不腰疼的时候。譬如，在图书馆总是希望别人可以随手关门，把书放回原位置，而自己有的时候却忽略这和问题。</p>\n<p>不要总是摆出一副很忙的样子，或是对于一个问题总说不好弄之类的。有什么就去扛，做事最忌讳的是开始前低估问题，开始后高估问题。</p>\n<h2 id=\"2013-01-26\"><a href=\"#2013-01-26\" class=\"headerlink\" title=\"2013.01.26\"></a>2013.01.26</h2><p>应该是回到了高中时代，大家在准备考试，我睡着了。周围的人是帅鸡，祥子der猪，就记住这三个，貌似里面还有别人，班主任是老贾。我上课的时候睡着了……那天提前放心还，然后直接睡到放心。可是我还什么都不会呢……当时想的是，要不要去通宵自习室学习，这是大学的特征啊。</p>\n<h2 id=\"2012-9-25-0-28-08\"><a href=\"#2012-9-25-0-28-08\" class=\"headerlink\" title=\"2012-9-25 0:28:08\"></a>2012-9-25 0:28:08</h2><ul>\n<li>[x] 鱼的带球有大问题 代码要重新修改</li>\n<li>[x] 思路应该没问题 重要的是重新修改那些角度判断 存在漏洞</li>\n<li>[x] 估计跑位也有问题 交换场地后 是否还应该重写代码呢？</li>\n</ul>\n<p>原来这个的录音，也可以用哎，真有意思……果然还是很强大的软件，就是屏幕是白的不太爽……最近还真乱哎，做班徽什么的，说好的高数复习呢……后天要考试了有木有……太懒了……</p>\n<p>睡吧%</p>\n<h2 id=\"2012-11-8\"><a href=\"#2012-11-8\" class=\"headerlink\" title=\"2012/11/8\"></a>2012/11/8</h2><p>依旧存在的问题：</p>\n<ol>\n<li>点球  //判D定??条??件t增?加??对?方??三?y号?鱼??z坐??标???大???于???0<a href=\"\">//拍数策略有问题……不走啊</a></li>\n<li>中场4，5，2，3的策略</li>\n<li>屏蔽ceshi函数</li>\n<li>争球函数 需要改进……</li>\n<li>paishu是什么东西？</li>\n<li><del>.调整各个函数的位置 防止相互覆盖</del><h2 id=\"2012-11-6\"><a href=\"#2012-11-6\" class=\"headerlink\" title=\"2012/11/6\"></a>2012/11/6</h2></li>\n<li>开局时由于点球的原因，我们会比对方晚动。待解决//加上距离的判定</li>\n<li>大问题：更换dribble与456……</li>\n<li>争球需要进一步完善</li>\n<li>strategy45变了，变为在球两侧，且距离加大 原来不明显</li>\n<li>2,3号中场策略改变<h2 id=\"2015-08-24-17-06-52\"><a href=\"#2015-08-24-17-06-52\" class=\"headerlink\" title=\"2015-08-24-17-06-52\"></a>2015-08-24-17-06-52</h2>Urlreference可以用windows.history实现<h2 id=\"2012下总结\"><a href=\"#2012下总结\" class=\"headerlink\" title=\"2012下总结\"></a>2012下总结</h2>一学期了，总是要那么总结一次。</li>\n</ol>\n<p>如果用两个字来形容的话，肯定是失败。当然不需要去赘诉用别的个数的字形容了。</p>\n<p>既然只有自己看，那就不需要什么隐藏的了。</p>\n<p>这学期首先是喜欢的女生有了男朋友……-_-||，不用表情无以表达我的感情，好吧，刚开学的时候皇上还说那孩子比较幼稚，让我能耐得住去等待，我想好啊，随意，不就等嘛，哥没问题。可是，然后，后来她就告诉我她有男朋友了。好吧，后来见过几次她们两个在一起，那个男生看起来就是很一般，虽然没看到正脸，就是一个背影，但是至少不是很高。。。唉。不吐槽了，败了肯定有败了的理由的，感觉自己就是那种适合当女生的异性朋友，到绝对很难成为她们的男朋友的人。</p>\n<p>然后学习这学期也水爆了，为啥会是这样呢？先是计算方法计算器抽风，然后大物哪里不会考哪里，不知道别的咋样？不过确实之前太松懈，电脑瞎折腾浪费了好多时间，导致各科都属于没有学的状态。然后期末就只能临时抱佛脚了……知识肯定没掌握牢，出现问题也正常……妹的，下学期千万不能这样了！！！</p>\n<p>下学期学雅思，估计还要拉课……不要半途而废了……</p>\n<h2 id=\"2013、3、16\"><a href=\"#2013、3、16\" class=\"headerlink\" title=\"2013、3、16\"></a>2013、3、16</h2><ol>\n<li>angel有问题</li>\n<li>调角部分可以不用让tcode=0；</li>\n<li>分段做法<h2 id=\"2013-2-2\"><a href=\"#2013-2-2\" class=\"headerlink\" title=\"2013.2.2\"></a>2013.2.2</h2>昨天早睡，直接导致的就是今天睡不着啊，一小会就醒，突然什么都不想干了，好累。</li>\n</ol>\n<p>中间这一小阵做了个好穿越的梦，有小王，有李毅兰，有爷爷……额……应该是突然有事，必须去参加聚会。然后，我就和老妈一起去了。然后，小王给上了节英语课。可是，要赶车回家。于是去和小王请假，说让先写个计划，第一项是吃，然后第二涉及到睡觉，玩 ，第三项没啥印象了。当时小王在老大旁边，我还找她借了张纸写这个，可是 在等笔，等了好久也没有就会自己座位上写，当时我在特别后一排，他在特别前面的地方。然后就写计划，无非是多吃，好好玩之类的。可是貌似写字的时候小博在旁边……囧。</p>\n<h2 id=\"2013-01-16\"><a href=\"#2013-01-16\" class=\"headerlink\" title=\"2013.01.16\"></a>2013.01.16</h2><p>昨天晚上梦里见我和亚涛成了大盗，就像十二生肖里面成龙干的那些事一样。</p>\n<p>最后是去一个比较险恶的地方偷东西。我躲进了一件屋子，然后就发现这是非常不明智的选择。因为敌人，可以把门口封住，然后我就被他们捉住了。他们门口不断出现各种人。我被虐惨了……后来他们貌似发现钥匙丢了，就混乱了……我就趁机跑了出来。然后我再往回跑的路上看到了亚谈，他说钥匙是他偷的，就在老大的皮夹克了 。此时发现貌似我的作用就是一个诱饵，去吸引敌人的注意力，然后亚谈能够趁乱偷出钥匙……</p>\n<h2 id=\"2014年4月11日\"><a href=\"#2014年4月11日\" class=\"headerlink\" title=\"2014年4月11日\"></a>2014年4月11日</h2><p>在一起已经一年了，走过了多少风风雨雨。从最初阴差阳错都来到西工大，再到能够一步步走到一起，想想命运还是挺神奇的东西。</p>\n<p>这一年来，我们逐步加深对彼此的了解，有过开始的天真，当时的天空是童话般的蓝，以为可以这么美好的一生，没有争吵，只有相亲相爱。</p>\n<p>当然生活就是生活，有柴米油盐酱醋茶，不是所有东西都是美好的，你有你的看法，我有我的理解，并且越在乎就越容易生气，硝烟逐渐生起，我们开始吵架，愈演愈烈，乃至到了三天一大吵，一天一小炒的地步。</p>\n<p>忘了是什么时候开始喜欢叫你老婆的了，记得在高中或者初中的时候，看班上谈恋爱的男女之间喜欢这么叫，当时就觉得咋可以这么矫情，又没有结婚呢。后来和你在一起之后发现原来当你真的想和一个人在一起之后，你就会自然的想这么称呼，这种称呼里是满满的甜蜜。</p>\n<p>一直不喜欢去问你的过去之类的，主要是在我看来过去的就归过去吧，过去是没什么意义的，就像和人聊天时，基本不会聊我的过去，这东西嘛，我就是觉得过去的辉煌也不能弥补今天的煞笔，而过去的错误也不能说明今天的不对。所以我就不太愿意去问你的过去，怪只怪我更晚的出现在你的生命之中，对于那些我已无力回天。并不是我不关心你。</p>\n<h2 id=\"hello-stranger\"><a href=\"#hello-stranger\" class=\"headerlink\" title=\"hello stranger\"></a>hello stranger</h2><p>继初恋那件小事之后又看了这不泰国电影，看后乱乱的。</p>\n<p>想起来放假后闲着无聊在d8看的一个帖子，开始很搞笑后来很悲伤的帖子。</p>\n<p>有些关系真的搞不懂是怎么回事，you want to stay with her,but is IT love？呵呵，电影结尾没有说两个人是否在一起，这个故事注定是个悲剧。一边是喜欢了8年的女朋友，并且之前悲剧了，然后对方又愿意和你结婚了。另一边仍然牵肠挂肚，难以释怀。</p>\n<p>这关系，……怕毁了，……</p>\n<h2 id=\"2012-9-30-11-05-11\"><a href=\"#2012-9-30-11-05-11\" class=\"headerlink\" title=\"2012-9-30 11:05:11\"></a>2012-9-30 11:05:11</h2><ol>\n<li>用step来约束某些if语句的执行次数</li>\n<li>sometimes the 小鱼不按照code跑，关了重开……</li>\n<li>根据上一拍速度，确定这一拍速度<h2 id=\"2012年9月29日1-05-50\"><a href=\"#2012年9月29日1-05-50\" class=\"headerlink\" title=\"2012年9月29日1:05:50\"></a>2012年9月29日1:05:50</h2>1，撞球而不用非要把球，球门，鱼调整到三点共线。2.那个，球从危险区域出去不用调整角度直接调用跑位函数，跑到球上方或是下方的一个点即可。<h2 id=\"2012年10月2日9-27-50\"><a href=\"#2012年10月2日9-27-50\" class=\"headerlink\" title=\"2012年10月2日9:27:50\"></a>2012年10月2日9:27:50</h2>1.编程时注意将多次引用的长名称变量重新定义一个名字可靠的短名称。<h2 id=\"2012年10月13日20-28-55\"><a href=\"#2012年10月13日20-28-55\" class=\"headerlink\" title=\"2012年10月13日20:28:55\"></a>2012年10月13日20:28:55</h2>1.看金陵的貌似是大家撞得都是一个点，所以容易出现3条鱼齐头并进的情况。好吗？待考察……2.防守鱼注意不要停在禁区外<br>3.抢球有待提高<br>4.跑位函数貌似有问题 总是会停在某地调整 很慢很慢<br>5.进攻是否可以边卫<h2 id=\"2012-10-1-9-43-55\"><a href=\"#2012-10-1-9-43-55\" class=\"headerlink\" title=\"2012-10-1 9:43:55\"></a>2012-10-1 9:43:55</h2>1.角度以及距离都可以进行决策变换，不要总是拘泥于某一个2.注意带球时可以调整鱼的实际速度，以及撞击点距离，而来使得调整不是很频繁，从而提高速度，而不是一味的提高调整速度。<br>3.当鱼在接近球门，由于角度问题，出现偏差时，我们可以把带球点设到球场外……(貌似那样的话 鱼容易把球带到墙上去)（貌似效果也不是很好的……）<br>4.鱼靠墙边走，时间长了会被弹开。<br>5.球在偏左的时候，会出问题？why？貌似是角度问题……距离近 比较陡<br>6.该平台函数从上到下运行，中间的会被覆盖，只考虑最后的结果<h2 id=\"2012年10月20日9-17-25\"><a href=\"#2012年10月20日9-17-25\" class=\"headerlink\" title=\"2012年10月20日9:17:25\"></a>2012年10月20日9:17:25</h2>不断看比赛，找出会出问题的情况，然后删之。带球调整角度非常慢！！！<br><del>forbiddendefence中的函数调不了！！</del><br>鱼的扯淡情况<br><del>1.捣乱 向相反方向撞</del><br>.敌方三条鱼在前，我们跟在后面，帮助他们顶球<br>不要三条鱼一起边界带球&amp;……<br>3.不管球，去把鱼撞开。。。<h2 id=\"2012年10月26日19-56-12\"><a href=\"#2012年10月26日19-56-12\" class=\"headerlink\" title=\"2012年10月26日19:56:12\"></a>2012年10月26日19:56:12</h2><del>1.擦 5号鱼在抽风，抽风，打静止就抽</del> 因为点球的缘故，屏蔽之！@<h2 id=\"2012年10月27日10-36-13\"><a href=\"#2012年10月27日10-36-13\" class=\"headerlink\" title=\"2012年10月27日10:36:13\"></a>2012年10月27日10:36:13</h2>1.后场调用了n多另外的dribble之类的函数，why？2.点球到底是什么情况  几条鱼去跑?重新加判定?<h2 id=\"2013年3月30日9-57-13\"><a href=\"#2013年3月30日9-57-13\" class=\"headerlink\" title=\"2013年3月30日9:57:13\"></a>2013年3月30日9:57:13</h2>1.角度标准化函数，返回的是标准化后得到的值，所以使用的时候是angle = compute.format(angle)，的格式<h2 id=\"2013年3月28日19-45-36\"><a href=\"#2013年3月28日19-45-36\" class=\"headerlink\" title=\"2013年3月28日19:45:36\"></a>2013年3月28日19:45:36</h2>1.好吧，以后要注意代码保持，不要直接在源代码上进行修改，对于已经写好的函数，要进行保留。2.电脑不同，对点球的影响还是相当大的……有点麻烦这个问题<br>3.仿金陵，貌似是用鱼头坐标去判断是否该 去转角，并且速度比较大，角速度也取比较大的。<h2 id=\"2012年10月30日20-37-48\"><a href=\"#2012年10月30日20-37-48\" class=\"headerlink\" title=\"2012年10月30日20:37:48\"></a>2012年10月30日20:37:48</h2>1.在上下边界 当鱼往外捞球的时候 拒绝从右半场 捞的情况<h2 id=\"2013年3月20日19-44-33\"><a href=\"#2013年3月20日19-44-33\" class=\"headerlink\" title=\"2013年3月20日19:44:33\"></a>2013年3月20日19:44:33</h2>1.那个angle函数里面的x，z坐标直接用的平台返回值，改成去除误差的样子也许会好一些。2.以同样的速度角速度跑出来的每拍运动后坐标是相同的？嗯 坐标是准确的……<br>3.其实当前速度是可以估计的 因为知道这一拍以及前一拍的坐标 然后除以一拍的时间就可以了啊<br>4.在某一特定时期，x距离的小数点后几位基本相同，而在有的时期，又差很多？为啥呢？貌似是以中线作为分界线，中线前是一个数，中线后是一个数，中线附近会有变动。（然后在中线左边，末尾基本为0或者。9999，然而过了中线就会变化，中线有波动？）（好吧，这个问题是因为之前在中线放了个球，过中线时候会碰上球，所以就有变化。o(╯□╰)o）<br>5.速度小时z大小表示直走时不变；<br>6.无论速度大小，x步进均为整数。好吧，z步进也为整数。也即当不受影响自己跑的时候，x还可以理解，z为啥也变化整数呢？<br>7.数据记录法貌似不可行，碰上球之后会用变化，当然没有球的话是可以的这个东西……<br>8.当用记录数据的方法跑前面的时候还可以 可是到了后面貌似反应会延迟……<h2 id=\"2013年3月21日19-42-12\"><a href=\"#2013年3月21日19-42-12\" class=\"headerlink\" title=\"2013年3月21日19:42:12\"></a>2013年3月21日19:42:12</h2>1.同一个dll一次26，一次28，一次32，还有一次没进……这是什么节奏？这个以后测试要多测几次……2.不消除误差的情况下，点球会慢很多，但是5月份比赛的时候，金陵的后面的三条鱼都在转，但是仍然跑的很快，why？是还有别的消除误差的方法，还是什么？<br>3.vs中 ctrl+M 然后再M 全都展开 ctrl+M 然后再O 全部合上<br>4.初始鱼头位置（-210，-90）<h2 id=\"2013年3月23日9-45-40\"><a href=\"#2013年3月23日9-45-40\" class=\"headerlink\" title=\"2013年3月23日9:45:40\"></a>2013年3月23日9:45:40</h2>1.不管角度直接进行角速度赋值的方法不太靠谱，，每次结果都不一样，所以还是要留判定条件进行。2.鱼有两个方向，鱼体和速度方向，但是这俩方向有时差距还蛮大的……<br>3.可不可以带球时，是带一个区域，只要把鱼带的方向在那个扇形区域里面就不调角……<h2 id=\"2013年3月27日19-04-43\"><a href=\"#2013年3月27日19-04-43\" class=\"headerlink\" title=\"2013年3月27日19:04:43\"></a>2013年3月27日19:04:43</h2>1.禁区4s，但是貌似会带到角上去，不算进啊！！！！2.然后，状况是角度有问题，总是到调角的时候已经带的有点大了……所以就容易带歪，或者就是过于小而导致一直保持在较低的速度水平上。<br>3.那种区域带球有可能导致鱼一直带在边线上，目前的解决方案是一次调角的时候至少调10拍。<h2 id=\"201307总结\"><a href=\"#201307总结\" class=\"headerlink\" title=\"201307总结\"></a>201307总结</h2>走过了又一学期，不禁再次感慨时光的飞逝，想起入学时，郑导开小班班会的场景还有在眼前，记得当时说这学期目标很简单就是要好好上课好好听课，好好写作业，就是这么简单的目标都没有完成，难道就是什么在乎其上，得乎其中的道理？开学时还打算认真学雅思的。还在教b占了一个座位，然后开始去的还比较多，后来就再也没去过……于是期末当然就华丽丽的水了，不过加分貌似不少的样子……</li>\n</ol>\n<p>这学期最大的收获就是有了妹子吧，当然实际上她比我略大一点……但这个水果不知道为啥一直对姐弟恋耿耿于怀，这个有那么严重吗？不就不小心比他小了那么几天吗？</p>\n<h2 id=\"notebook\"><a href=\"#notebook\" class=\"headerlink\" title=\"notebook\"></a>notebook</h2><p>一个笔记本，像Kindle一样，功能单一，像一个硬件版的EverNote一样，但是手写，复制粘贴等功能很好。。<br>还可以导入文件，拍照等功能……</p>\n<h2 id=\"reflector修改代码\"><a href=\"#reflector修改代码\" class=\"headerlink\" title=\"reflector修改代码\"></a>reflector修改代码</h2><p>安装插件reflexil……然后就好了</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:41:05</p>\n</blockquote>\n"},{"title":"php 环境配置","url":"http://code4fun.me/2018/05/01/php_environment/","content":"<h2 id=\"安装相关软件\"><a href=\"#安装相关软件\" class=\"headerlink\" title=\"安装相关软件\"></a>安装相关软件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apache2</div><div class=\"line\">sudo apt-get install libapache2-mod-php5</div><div class=\"line\">sudo apt-get install mysql-server libapache2-mod-auth-mysql php5-mysql</div><div class=\"line\">sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt</div><div class=\"line\">sudo apt-get install php5-gd</div><div class=\"line\">sudo a2enmod rewrite</div></pre></td></tr></table></figure>\n<h2 id=\"配置文件修改\"><a href=\"#配置文件修改\" class=\"headerlink\" title=\"配置文件修改\"></a>配置文件修改</h2><ul>\n<li><p>vi config/hopeconfig.php<br>修改相关信息</p>\n</li>\n<li><p>sudo vi /etc/apache2/sites-enabled/wmx.conf</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">\tServerAdmin wmx@localhost</div><div class=\"line\">\tDocumentRoot /var/www/wm_whoisthebear_server</div><div class=\"line\"></div><div class=\"line\">\tErrorLog $&#123;APACHE_LOG_DIR&#125;/wmx_error.log</div><div class=\"line\">\tCustomLog $&#123;APACHE_LOG_DIR&#125;/wmx_access.log combined</div></pre></td></tr></table></figure>\n<ul>\n<li>sudo vi /etc/apache2/apache2.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div></pre></td><td class=\"code\"><pre><div class=\"line\"># This is the main Apache server configuration file.  It contains the</div><div class=\"line\"># configuration directives that give the server its instructions.</div><div class=\"line\"># See http://httpd.apache.org/docs/2.4/ for detailed information about</div><div class=\"line\"># the directives and /usr/share/doc/apache2/README.Debian about Debian specific</div><div class=\"line\"># hints.</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\"># Summary of how the Apache 2 configuration works in Debian:</div><div class=\"line\"># The Apache 2 web server configuration in Debian is quite different to</div><div class=\"line\"># upstream&apos;s suggested way to configure the web server. This is because Debian&apos;s</div><div class=\"line\"># default Apache2 installation attempts to make adding and removing modules,</div><div class=\"line\"># virtual hosts, and extra configuration directives as flexible as possible, in</div><div class=\"line\"># order to make automating the changes and administering the server as easy as</div><div class=\"line\"># possible.</div><div class=\"line\"></div><div class=\"line\"># It is split into several files forming the configuration hierarchy outlined</div><div class=\"line\"># below, all located in the /etc/apache2/ directory:</div><div class=\"line\">#</div><div class=\"line\">#\t/etc/apache2/</div><div class=\"line\">#\t|-- apache2.conf</div><div class=\"line\">#\t|\t`--  ports.conf</div><div class=\"line\">#\t|-- mods-enabled</div><div class=\"line\">#\t|\t|-- *.load</div><div class=\"line\">#\t|\t`-- *.conf</div><div class=\"line\">#\t|-- conf-enabled</div><div class=\"line\">#\t|\t`-- *.conf</div><div class=\"line\"># \t`-- sites-enabled</div><div class=\"line\">#\t \t`-- *.conf</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\"># * apache2.conf is the main configuration file (this file). It puts the pieces</div><div class=\"line\">#   together by including all remaining configuration files when starting up the</div><div class=\"line\">#   web server.</div><div class=\"line\">#</div><div class=\"line\"># * ports.conf is always included from the main configuration file. It is</div><div class=\"line\">#   supposed to determine listening ports for incoming connections which can be</div><div class=\"line\">#   customized anytime.</div><div class=\"line\">#</div><div class=\"line\"># * Configuration files in the mods-enabled/, conf-enabled/ and sites-enabled/</div><div class=\"line\">#   directories contain particular configuration snippets which manage modules,</div><div class=\"line\">#   global configuration fragments, or virtual host configurations,</div><div class=\"line\">#   respectively.</div><div class=\"line\">#</div><div class=\"line\">#   They are activated by symlinking available configuration files from their</div><div class=\"line\">#   respective *-available/ counterparts. These should be managed by using our</div><div class=\"line\">#   helpers a2enmod/a2dismod, a2ensite/a2dissite and a2enconf/a2disconf. See</div><div class=\"line\">#   their respective man pages for detailed information.</div><div class=\"line\">#</div><div class=\"line\"># * The binary is called apache2. Due to the use of environment variables, in</div><div class=\"line\">#   the default configuration, apache2 needs to be started/stopped with</div><div class=\"line\">#   /etc/init.d/apache2 or apache2ctl. Calling /usr/bin/apache2 directly will not</div><div class=\"line\">#   work with the default configuration.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Global configuration</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># ServerRoot: The top of the directory tree under which the server&apos;s</div><div class=\"line\"># configuration, error, and log files are kept.</div><div class=\"line\">#</div><div class=\"line\"># NOTE!  If you intend to place this on an NFS (or otherwise network)</div><div class=\"line\"># mounted filesystem then please read the Mutex documentation (available</div><div class=\"line\"># at &lt;URL:http://httpd.apache.org/docs/2.4/mod/core.html#mutex&gt;);</div><div class=\"line\"># you will save yourself a lot of trouble.</div><div class=\"line\">#</div><div class=\"line\"># Do NOT add a slash at the end of the directory path.</div><div class=\"line\">#</div><div class=\"line\">#ServerRoot &quot;/etc/apache2&quot;</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># The accept serialization lock file MUST BE STORED ON A LOCAL DISK.</div><div class=\"line\">#</div><div class=\"line\">Mutex file:$&#123;APACHE_LOCK_DIR&#125; default</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># PidFile: The file in which the server should record its process</div><div class=\"line\"># identification number when it starts.</div><div class=\"line\"># This needs to be set in /etc/apache2/envvars</div><div class=\"line\">#</div><div class=\"line\">PidFile $&#123;APACHE_PID_FILE&#125;</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># Timeout: The number of seconds before receives and sends time out.</div><div class=\"line\">#</div><div class=\"line\">Timeout 300</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># KeepAlive: Whether or not to allow persistent connections (more than</div><div class=\"line\"># one request per connection). Set to &quot;Off&quot; to deactivate.</div><div class=\"line\">#</div><div class=\"line\">KeepAlive On</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># MaxKeepAliveRequests: The maximum number of requests to allow</div><div class=\"line\"># during a persistent connection. Set to 0 to allow an unlimited amount.</div><div class=\"line\"># We recommend you leave this number high, for maximum performance.</div><div class=\"line\">#</div><div class=\"line\">MaxKeepAliveRequests 100</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># KeepAliveTimeout: Number of seconds to wait for the next request from the</div><div class=\"line\"># same client on the same connection.</div><div class=\"line\">#</div><div class=\"line\">KeepAliveTimeout 5</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># These need to be set in /etc/apache2/envvars</div><div class=\"line\">User $&#123;APACHE_RUN_USER&#125;</div><div class=\"line\">Group $&#123;APACHE_RUN_GROUP&#125;</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># HostnameLookups: Log the names of clients or just their IP addresses</div><div class=\"line\"># e.g., www.apache.org (on) or 204.62.129.132 (off).</div><div class=\"line\"># The default is off because it&apos;d be overall better for the net if people</div><div class=\"line\"># had to knowingly turn this feature on, since enabling it means that</div><div class=\"line\"># each client request will result in AT LEAST one lookup request to the</div><div class=\"line\"># nameserver.</div><div class=\"line\">#</div><div class=\"line\">HostnameLookups Off</div><div class=\"line\"></div><div class=\"line\"># ErrorLog: The location of the error log file.</div><div class=\"line\"># If you do not specify an ErrorLog directive within a &lt;VirtualHost&gt;</div><div class=\"line\"># container, error messages relating to that virtual host will be</div><div class=\"line\"># logged here.  If you *do* define an error logfile for a &lt;VirtualHost&gt;</div><div class=\"line\"># container, that host&apos;s errors will be logged there and not here.</div><div class=\"line\">#</div><div class=\"line\">ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># LogLevel: Control the severity of messages logged to the error_log.</div><div class=\"line\"># Available values: trace8, ..., trace1, debug, info, notice, warn,</div><div class=\"line\"># error, crit, alert, emerg.</div><div class=\"line\"># It is also possible to configure the log level for particular modules, e.g.</div><div class=\"line\"># &quot;LogLevel info ssl:warn&quot;</div><div class=\"line\">#</div><div class=\"line\">LogLevel warn</div><div class=\"line\"></div><div class=\"line\"># Include module configuration:</div><div class=\"line\">IncludeOptional mods-enabled/*.load</div><div class=\"line\">IncludeOptional mods-enabled/*.conf</div><div class=\"line\"></div><div class=\"line\"># Include list of ports to listen on</div><div class=\"line\">Include ports.conf</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Sets the default security model of the Apache2 HTTPD server. It does</div><div class=\"line\"># not allow access to the root filesystem outside of /usr/share and /var/www.</div><div class=\"line\"># The former is used by web applications packaged in Debian,</div><div class=\"line\"># the latter may be used for local directories served by the web server. If</div><div class=\"line\"># your system is serving content from a sub-directory in /srv you must allow</div><div class=\"line\"># access here, or in any related virtual host.</div><div class=\"line\">&lt;Directory /&gt;</div><div class=\"line\">\tOptions FollowSymLinks</div><div class=\"line\">\tAllowOverride None</div><div class=\"line\">\tRequire all denied</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;Directory /usr/share&gt;</div><div class=\"line\">\tAllowOverride None</div><div class=\"line\">\tRequire all granted</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\">##########################################</div><div class=\"line\">&lt;Directory /var/www/&gt;</div><div class=\"line\">\tOptions Indexes FollowSymLinks</div><div class=\"line\">\tAllowOverride All</div><div class=\"line\">\tRequire all granted</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\">#########################################</div><div class=\"line\">#&lt;Directory /srv/&gt;</div><div class=\"line\">#\tOptions Indexes FollowSymLinks</div><div class=\"line\">#\tAllowOverride None</div><div class=\"line\">#\tRequire all granted</div><div class=\"line\">#&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AccessFileName: The name of the file to look for in each directory</div><div class=\"line\"># for additional configuration directives.  See also the AllowOverride</div><div class=\"line\"># directive.</div><div class=\"line\">#</div><div class=\"line\">#########################################</div><div class=\"line\">AccessFileName .htaccess</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># The following lines prevent .htaccess and .htpasswd files from being</div><div class=\"line\"># viewed by Web clients.</div><div class=\"line\">#</div><div class=\"line\">&lt;FilesMatch &quot;^\\.ht&quot;&gt;</div><div class=\"line\">\tRequire all denied</div><div class=\"line\">&lt;/FilesMatch&gt;</div><div class=\"line\">#########################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># The following directives define some format nicknames for use with</div><div class=\"line\"># a CustomLog directive.</div><div class=\"line\">#</div><div class=\"line\"># These deviate from the Common Log Format definitions in that they use %O</div><div class=\"line\"># (the actual bytes sent including headers) instead of %b (the size of the</div><div class=\"line\"># requested file), because the latter makes it impossible to detect partial</div><div class=\"line\"># requests.</div><div class=\"line\">#</div><div class=\"line\"># Note that the use of %&#123;X-Forwarded-For&#125;i instead of %h is not recommended.</div><div class=\"line\"># Use mod_remoteip instead.</div><div class=\"line\">#</div><div class=\"line\">LogFormat &quot;%v:%p %h %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%&#123;Referer&#125;i\\&quot; \\&quot;%&#123;User-Agent&#125;i\\&quot;&quot; vhost_combined</div><div class=\"line\">LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%&#123;Referer&#125;i\\&quot; \\&quot;%&#123;User-Agent&#125;i\\&quot;&quot; combined</div><div class=\"line\">LogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %O&quot; common</div><div class=\"line\">LogFormat &quot;%&#123;Referer&#125;i -&gt; %U&quot; referer</div><div class=\"line\">LogFormat &quot;%&#123;User-agent&#125;i&quot; agent</div><div class=\"line\"></div><div class=\"line\"># Include of directories ignores editors&apos; and dpkg&apos;s backup files,</div><div class=\"line\"># see README.Debian for details.</div><div class=\"line\"></div><div class=\"line\"># Include generic snippets of statements</div><div class=\"line\">IncludeOptional conf-enabled/*.conf</div><div class=\"line\"></div><div class=\"line\"># Include the virtual host configurations:</div><div class=\"line\">IncludeOptional sites-enabled/*.conf</div><div class=\"line\"></div><div class=\"line\"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</div></pre></td></tr></table></figure>\n<p>重点关注用 <code>#</code> 包围起来的部分</p>\n<h2 id=\"权限修改\"><a href=\"#权限修改\" class=\"headerlink\" title=\"权限修改\"></a>权限修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir upload</div><div class=\"line\">cd upload/</div><div class=\"line\">mkdir goods</div><div class=\"line\">chmod -R 777 wm_whoisthebear_server/</div><div class=\"line\">sudo chmod 644 .htaccess</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:39:58</p>\n</blockquote>\n"},{"title":"这些Git技能够你用一年了","url":"http://code4fun.me/2018/05/01/git_for_one_year/","content":"<p>用git有一年了，下面是我这一年来的git使用总结，覆盖了日常使用中绝大多数的场景。嗯，至少是够用一年了，整理出来分享给大家，不明白的地方可以回复交流。</p>\n<p><strong>创建和使用git ssh key</strong></p>\n<p>首先设置git的user name和email：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@gmail.com&quot;</div></pre></td></tr></table></figure>\n<p>查看git配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<p><strong>然后生成SHH密匙：</strong></p>\n<p>查看是否已经有了ssh密钥： <code>cd ~/.ssh</code><br>如果没有密钥则不会有此文件夹，有则备份删除<br>生存密钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;xxx@gmail.com&quot;</div></pre></td></tr></table></figure>\n<p>按3个回车，密码为空这里一般不使用密钥。<br>最后得到了两个文件：id_rsa和id_rsa.pub<br>注意：密匙生成就不要改了，如果已经生成到 <code>~/.ssh</code> 文件夹下去找。</p>\n<p> <strong>git变更项目地址</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote set-url origin git@192.168.6.70:res_dev_group/test.gitgit remote -v</div></pre></td></tr></table></figure>\n<p><strong>查看某个文件的修改历史</strong></p>\n<p>git log –pretty=oneline 文件名 # 显示修改历史<br>git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e # 查看更改</p>\n<p><strong>git push 时报错 warning: push.default is unset;</strong></p>\n<p>‘matching’参数是 Git 1.x 的默认行为，其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。<br>根据提示，修改git push的行为:<br>git config –global push.default matching<br>再次执行git push 得到解决。</p>\n<p> <strong>git submodule的使用拉子项目代码</strong></p>\n<p>开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。今天无意中发现了git的 <code>git submodule</code> 命令，之前的问题迎刃而解了。<br>添加</p>\n<p>为当前工程添加submodule，命令如下：</p>\n<p><code>git submodule add 仓库地址 路径</code></p>\n<p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</p>\n<p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。<br>删除</p>\n<p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行 <code>git rm –cached</code> 命令将子模块所在的文件从git中删除。<br>下载的工程带有submodule</p>\n<p>当使用 <code>git clone</code> 下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p>\n<p><code>git submodule update --init --recursive</code></p>\n<p>即可将子模块内容下载下来后工程才不会缺少相应的文件。</p>\n<p> <strong>git add文件取消</strong></p>\n<p>在git的一般使用中，如果发现错误的将不想提交的文件add进入index之后，想回退取消，则可以使用命令： <code>git reset HEAD &lt;file&gt;...</code> ，同时git add完毕之后，git也会做相应的提示。</p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/yaoming168/article/details/38777763\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yaoming168/article/details/38777763</a></p>\n</blockquote>\n<p> <strong>git删除文件：</strong></p>\n<p>删除文件跟踪并且删除文件系统中的文件file1 <code>git rm file1</code><br>提交刚才的删除动作，之后git不再管理该文件 <code>git commit</code></p>\n<p>删除文件跟踪但不删除文件系统中的文件file1 <code>git rm --cached file1</code><br>提交刚才的删除动作，之后git不再管理该文件。但是文件系统中还是有file1。 <code>git commit</code></p>\n<p><strong>版本回退</strong></p>\n<p>版本回退用于线上系统出现问题后恢复旧版本的操作。<br>回退到的版本 <code>git reset --hard 248cba8e77231601d1189e3576dc096c8986ae51</code><br>回退的是所有文件，如果后悔回退可以git pull就可以了。</p>\n<p> <strong>历史版本对比</strong></p>\n<p>查看日志 <code>git log</code><br>查看某一历史版本的提交内容 <code>git show 4ebd4bbc3ed321d01484a4ed206f18ce2ebde5ca</code> ，这里能看到版本的详细修改代码。<br>对比不同版本 <code>git diff c0f28a2ec490236caa13dec0e8ea826583b49b7a 2e476412c34a63b213b735e5a6d90cd05b014c33</code></p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/lxlzhn/article/details/9356473\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lxlzhn/article/details/9356473</a></p>\n</blockquote>\n<p> <strong>分支的意义与管理</strong></p>\n<p>创建分支可以避免提交代码后对主分支的影响，同时也使你有了相对独立的开发环境。分支具有很重要的意义。<br>创建并切换分支，提交代码后才能在其它机器拉分支代码 <code>git checkout -b new_branch</code><br>查看当前分支 <code>git branch</code><br>切换到master分支 <code>git checkout master</code><br>合并分支到当前分支 <code>git merge new_branch</code> ，合并分支的操作是从new_branch合并到master分支，当前环境在master分支。<br>删除分支 <code>git branch -d new_branch</code></p>\n<p><strong>git冲突文件编辑</strong></p>\n<p>冲突文件冲突的地方如下面这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a123&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADb789=======b45678910&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dccc</div></pre></td></tr></table></figure>\n<p>冲突标记&lt;&lt;&lt;&lt;&lt;&lt;&lt; （7个&lt;）与=======之间的内容是我的修改，=======与&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的内容是别人的修改。<br>此时，还没有任何其它垃圾文件产生。<br>你需要把代码合并好后重新走一遍代码提交流程就好了。</p>\n<p><strong>不顺利的代码提交流程</strong></p>\n<p>在 <code>git push</code> 后出现错误可能是因为其他人提交了代码，而使你的本地代码库版本不是最新。<br>这时你需要先 <code>git pull</code> 代码后，检查是否有文件冲突。<br>没有文件冲突的话需要重新走一遍代码提交流程 <code>add —&gt; commit —&gt; push</code> 。<br>解决文件冲突在后面说。</p>\n<p> <strong>git顺利的提交代码流程</strong></p>\n<p>查看修改的文件 <code>git status</code> ；<br>为了谨慎检查一下代码 <code>git diff</code> ；<br>添加修改的文件 <code>git add dirname1/filename1.py dirname2/filenam2.py</code> ，新加的文件也是直接add就好了；<br>添加修改的日志 <code>git commit -m &quot;fixed:修改了上传文件的逻辑&quot;</code> ；<br>提交代码 <code>git push</code> ，如果提交失败的可能原因是本地代码库版本不是最新。</p>\n<p><strong>理解github的pull request</strong> 有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2,。然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。如果被审核通过并正式合并，这样你就为项目A做贡献了。</p>\n<blockquote>\n<p><a href=\"http://zhidao.baidu.com/question/1669154493305991627.html\" target=\"_blank\" rel=\"external\">http://zhidao.baidu.com/question/1669154493305991627.html</a></p>\n</blockquote>\n<p> <strong>一些错误处理</strong> <strong>“pathspec ‘branch’ did not match any file(s) known to git.”错误</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout mastergit pullgit checkout new_branch</div></pre></td></tr></table></figure>\n<p><strong>使用git提交比较大的文件的时候可能会出现这个错误</strong></p>\n<p>error: RPC failed; result=22, HTTP code = 411<br>fatal: The remote end hung up unexpectedly<br>fatal: The remote end hung up unexpectedly<br>Everything up-to-date</p>\n<p>这样的话首先改一下git的传输字节限制</p>\n<p>git config http.postBuffer 524288000<br>然后这时候在传输或许会出现另一个错误</p>\n<p>error: RPC failed; result=22, HTTP code = 413<br>fatal: The remote end hung up unexpectedly<br>fatal: The remote end hung up unexpectedly<br>Everything up-to-date</p>\n<p>这两个错误看上去相似，一个是411，一个是413</p>\n<p>下面这个错误添加一下密钥就可以了</p>\n<p>首先key-keygen 生成密钥</p>\n<p>然后把生成的密钥复制到git中自己的账号下的相应位置</p>\n<p>git push ssh://192.168.64.250/eccp.git branch</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:38:53</p>\n</blockquote>\n"},{"title":"深入浅出REST","url":"http://code4fun.me/2018/05/01/rest/","content":"<p>不知你是否意识到，围绕着什么才是实现异构的应用到应用通信的“正确”方式，一场争论正进行的如火如荼：虽然当前主流的方式明显地集中在基于SOAP、WSDL和WS-*规范的Web Services领域，但也有少数人用细小但洪亮的声音主张说更好的方式是REST，表述性状态转移（REpresentational State Transfer）的简称。在本文中，我不会涉及争论的话题，而是尝试对REST和RESTful HTTP应用集成做实用性的介绍。以我的经验，有些话题一旦触及就会引来众多的讨论，当涉及到这方面话题的时候，我会深入详细地阐述。</p>\n<h2 id=\"REST关键原则\"><a href=\"#REST关键原则\" class=\"headerlink\" title=\"REST关键原则\"></a>REST关键原则</h2><p>大部分对REST的介绍是以其正式的定义和背景作为开场的。但这儿且先按下不表，我先提出一个简单扼要的定义：REST定义了应该如何正确地使用（这和大多数人的实际使用方式有很大不同）Web标准，例如HTTP和URI。如果你在设计应用程序时能坚持REST原则，那就预示着你将会得到一个使用了优质Web架构（这将让你受益）的系统。总之，五条关键原则列举如下：</p>\n<ul>\n<li>为所有“事物”定义ID</li>\n<li>将所有事物链接在一起</li>\n<li>使用标准方法</li>\n<li>资源多重表述</li>\n<li>无状态通信</li>\n</ul>\n<p>下面让我们进一步审视这些原则。</p>\n<h2 id=\"为所有“事物”定义ID\"><a href=\"#为所有“事物”定义ID\" class=\"headerlink\" title=\"为所有“事物”定义ID\"></a>为所有“事物”定义ID</h2><p>在这里我使用了“事物”来代替更正式准确的术语“资源”，因为一条如此简单的原则，不应该被淹没在术语当中。思考一下人们构建的系统，通常会找到一系列值得被标识的关键抽象。每个事物都应该是可标识的，都应该拥有一个明显的ID——在Web中，代表ID的统一概念是：URI。URI构成了一个全局命名空间，使用URI标识你的关键资源意味着它们获得了一个唯一、全局的ID。</p>\n<p>对事物使用一致的命名规则（naming scheme）最主要的好处就是你不需要提出自己的规则——而是依靠某个已被定义，在全球范围中几乎完美运行，并且能被绝大多数人所理解的规则。想一下你构建的上一个应用（假设它不是采用RESTful方式构建的）中的任意一个高级对象（high-level object），那就很有可能看到许多从使用唯一标识中受益的用例。比如，如果你的应用中包含一个对顾客的抽象，那么我可以相当肯定，用户会希望将一个指向某个顾客的链接，能通过电子邮件发送到同事那里，或者加入到浏览器的书签中，甚至写到纸上。更透彻地讲：如果在一个类似于Amazon.com的在线商城中，没有用唯一的ID（一个URI）标识它的每一件商品，可想而知这将是多么可怕的业务决策。</p>\n<p>当面对这个原则时，许多人惊讶于这是否意味着需要直接向外界暴露数据库记录（或者数据库记录ID）——自从多年以来面向对象的实践告诫我们，要将持久化的信息作为实现细节隐藏起来之后，哪怕是刚有点想法都常会使人惊恐。但是这条原则与隐藏实现细节两者之间并没有任何冲突：通常，值得被URI标识的事物——资源——要比数据库记录抽象的多。例如，一个定单资源可以由定单项、地址以及许多其它方面（可能不希望作为单独标识的资源暴露出来）组成。标识所有值得标识的事物，领会这个观念可以进一步引导你创造出在传统的应用程序设计中不常见的资源：一个流程或者流程步骤、一次销售、一次谈判、一份报价请求——这都是应该被标识的事物的示例。同样，这也会导致创建比非RESTful设计更多的持久化实体。</p>\n<p>下面是一些你可能想到的URI的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://example.com/customers/1234 </div><div class=\"line\">http://example.com/orders/2007/10/776654 http://example.com/products/4554 </div><div class=\"line\">http://example.com/processes/salary-increase-234</div></pre></td></tr></table></figure>\n<p>正如我选择了创建便于阅读的URI——这是个有用的观点，尽管不是RESTful设计所必须的——应该能十分容易地推测出URI的含义：它们明显地标识着单一“数据项”。但是再往下看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://example.com/orders/2007/11 </div><div class=\"line\">http://example.com/products?color=green</div></pre></td></tr></table></figure>\n<p>首先，这两个URI看起来与之前的稍有不同——毕竟，它们不是对一件事物的标识，而是对一类事物集合的标识（假定第一个URI标识了所有在2007年11月份提交的定单，第二个则是绿颜色产品的集合）。但是这些集合自身也是事物（资源），也应该被标识。</p>\n<p>注意，使用唯一、全局统一的命名规则的好处，既适用于浏览器中的Web应用，也适用于机对机（machine-to-machine，m2m）通信。</p>\n<p>来对第一个原则做下总结：使用URI标识所有值得标识的事物，特别是应用中提供的所有“高级”资源，无论这些资源代表单一数据项、数据项集合、虚拟亦或实际的对象还是计算结果等。</p>\n<h2 id=\"将所有事物链接在一起\"><a href=\"#将所有事物链接在一起\" class=\"headerlink\" title=\"将所有事物链接在一起\"></a>将所有事物链接在一起</h2><p>接下来要讨论的原则有一个有点令人害怕的正式描述：“超媒体被当作应用状态引擎（Hypermedia as the engine of application state）”，有时简写为HATEOAS。（严格地说，这不是我说的。）这个描述的核心是 <strong>超媒体</strong> 概念，换句话说：是 <strong>链接</strong> 的思想。链接是我们在HTML中常见的概念，但是它的用处绝不局限于此（用于人们网络浏览）。考虑一下下面这个虚构的XML片段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;order self=&quot;http://example.com/customers/1234&quot;&gt; </div><div class=\"line\">&lt;amount&gt;23&lt;/amount&gt; </div><div class=\"line\">&lt;product ref=&quot;http://example.com/products/4554&quot;&gt; </div><div class=\"line\">&lt;customer ref=&quot;http://example.com/customers/1234&quot;&gt; </div><div class=\"line\">&lt;/customer&gt; &lt;/product&gt;&lt;/order&gt;</div></pre></td></tr></table></figure>\n<p>如果你观察文档中product和customer的链接，就可以很容易地想象到，应用程序（已经检索过文档）如何“跟随”链接检索更多的信息。当然，如果使用一个遵守专用命名规范的简单“id”属性作为链接，也是可行的—— <strong>但是仅限于应用环境之内</strong> 。使用URI表示链接的优雅之处在于，链接可以指向由不同应用、不同服务器甚至位于另一个大陆上的不同公司提供的资源——因为URI命名规范是全球标准，构成Web的所有资源都可以互联互通。</p>\n<p>超媒体原则还有一个更重要的方面——应用“状态”。简而言之，实际上服务器端（如果你愿意，也可以叫服务提供者）为客户端（服务消费者）提供一组链接，使客户端能通过链接将应用从一个状态改变为另一个状态。稍后我们会在另一篇文章中探究这个方面的影响；目前，只需要记住：链接是构成动态应用的非常有效的方式。</p>\n<p>对此原则总结如下：任何可能的情况下，使用链接指引可以被标识的事物（资源）。也正是超链接造就了现在的Web。</p>\n<h2 id=\"使用标准方法\"><a href=\"#使用标准方法\" class=\"headerlink\" title=\"使用标准方法\"></a>使用标准方法</h2><p>在前两个原则的讨论中暗含着一个假设：接收URI的应用程序可以通过URI明确地 <strong>做</strong> 一些有意义的事情。如果你在公共汽车上看到一个URI，你可以将它输入浏览器的地址栏中并回车——但是你的浏览器如何知道需要对这个URI做些什么呢？</p>\n<p>它知道如何去处理URI的原因在于所有的资源都支持同样的接口，一套同样的方法（只要你乐意，也可以称为操作）集合。在HTTP中这被叫做动词（verb），除了两个大家熟知的（GET和POST）之外，标准方法集合中还包含PUT、DELETE、HEAD和OPTIONS。这些方法的含义连同行为许诺都一起定义在HTTP规范之中。如果你是一名OO开发人员，就可以想象到RESTful HTTP方案中的所有资源都继承自类似于这样的一个类（采用类Java、C # 的伪语法描述，请注意关键的方法）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Resource &#123; </div><div class=\"line\">Resource(URI u); </div><div class=\"line\">Response get(); </div><div class=\"line\">Response post(Request r); </div><div class=\"line\">Response put(Request r); </div><div class=\"line\">Response delete(); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于所有资源使用了同样的接口，你可以依此使用GET方法检索一个 <strong>表述</strong> （representation）——也就是对资源的描述。因为规范中定义了GET的语义，所以可以肯定当你调用它的时候不需要对后果负责——这就是为什么可以“安全”地调用此方法。GET方法支持非常高效、成熟的缓存，所以在很多情况下，你甚至不需要向服务器发送请求。还可以肯定的是，GET方法具有 <strong>幂等性</strong> [译注：指多个相同请求返回相同的结果]——如果你发送了一个GET请求没有得到结果，你可能不知道原因是请求未能到达目的地，还是响应在反馈的途中丢失了。幂等性保证了你可以简单地再发送一次请求解决问题。幂等性同样适用于PUT（基本的含义是“更新资源数据，如果资源不存在的话，则根据此URI创建一个新的资源”）和DELETE（你完全可以一遍又一遍地操作它，直到得出结论——删除不存在的东西没有任何问题）方法。POST方法，通常表示“创建一个新资源”，也能被用于调用任意过程，因而它既不安全也不具有幂等性。</p>\n<p>如果你采用RESTful的方式暴露应用功能（如果你乐意，也可以称为服务功能）， <strong>那这条原则和它的约束同样也适用于你</strong> 。如果你已经习惯于另外的设计方式，则很难去接受这条原则——毕竟，你很可能认为你的应用包含了超出这些操作表达范围的逻辑。请允许我花费一些时间来让你相信不存在这样的情况。</p>\n<p>来看下面这个简单的采购方案例子：</p>\n<p>[image:79A10003-EA20-46E5-BCAE-B2EB238B3C25-98444-0000E8FFDC1EC4AC/figure1.jpg]<br>可以看到，例子中定义了两个服务程序（没有包含任何实现细节）。这些服务程序的接口都是为了完成任务（正是我们讨论的OrderManagement和CustomerManagement服务）而定制的。如果客户端程序试图使用这些服务，那它必须针对这些特定接口进行编码——不可能在这些接口定义之前，使用客户程序去有目的地和接口协作。这些接口定义了服务程序的应用协议（application protocol）。</p>\n<p>在RESTful HTTP方式中，你将通过组成 <strong>HTTP应用协议</strong> 的通用接口访问服务程序。你可能会想出像这样的方式：</p>\n<p>[image:01E1B47D-5FEF-420D-82D1-5D952990DAF9-98444-0000E901C3490CA3/figure2.jpg]<br>可以看到，服务程序中的特定操作被映射成为标准的HTTP方法——为了消除歧义，我创建了一组全新的资源。“这是骗人的把戏”，我听见你叫嚷着。不，这不是欺骗。标识一个顾客的URI上的GET方法正好相当于getCustomerDetails操作。有人用三角形形象化地说明了这一点：</p>\n<p>[image:2CDF0860-3C8A-4E20-A110-9E4D8F7EA0DD-98444-0000E902291203B7/figure3.jpg]<br>把三个顶点想象为你可以调节的按钮。可以看到在第一种方法中，你拥有许多操作，许多种类的数据以及固定数量的“实例”（本质上和你拥有的服务程序数量一致）。在第二种方法中，你拥有固定数量的操作，许多种类的数据和许多调用固定方法的对象。它的意义在于，证明了通过这两种方式，你基本上可以表示任何你喜欢的事情。</p>\n<p>为什么使用标准方法如此重要？从根本上说，它使你的应用成为Web的一部分——应用程序为Web变成Internet上最成功的应用所做的贡献，与它添加到Web中的资源数量成比例。采用RESTful方式，一个应用可能会向Web中添加数以百万计的客户URI；如果采用CORBA技术并维持应用的原有设计方式，那它的贡献大抵只是一个“端点（endpoint）”——就好比一个非常小的门，仅仅允许有钥匙的人进入其中的资源域。</p>\n<p>统一接口也使得所有理解HTTP应用协议的组件能与你的应用交互。通用客户程序（generic client）就是从中受益的组件的例子，例如curl、wget、代理、缓存、HTTP服务器、网关还有Google、Yahoo!、MSN等等。</p>\n<p>总结如下：为使客户端程序能与你的资源相互协作，资源应该正确地实现默认的应用协议（HTTP），也就是使用标准的GET、PUT、POST和DELETE方法。</p>\n<h2 id=\"资源多重表述\"><a href=\"#资源多重表述\" class=\"headerlink\" title=\"资源多重表述\"></a>资源多重表述</h2><p>到目前为止我们一直忽略了一个稍微复杂的问题：客户程序如何知道该怎样处理检索到的数据，比如作为GET或者POST请求的结果？原因是，HTTP采取的方式是允许数据处理和操作调用之间关系分离的。换句话说，如果客户程序知道如何处理一种特定的数据格式，那就可以与所有提供这种表述格式的资源交互。让我们再用一个例子来阐明这个观点。利用HTTP内容协商（content negotiation），客户程序可以请求一种特定格式的表述：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /customers/1234 HTTP/1.1 </div><div class=\"line\">Host: example.com </div><div class=\"line\">Accept: application/vnd.mycompany.customer+xml</div></pre></td></tr></table></figure>\n<p>请求的结果可能是一些由公司专有的XML格式表述的客户信息。假设客户程序发送另外一个不同的请求，就如下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /customers/1234 HTTP/1.1 </div><div class=\"line\">Host: example.com </div><div class=\"line\">Accept: text/x-vcard</div></pre></td></tr></table></figure>\n<p>结果则可能是VCard格式的客户地址。（在这里我没有展示响应的内容，在其HTTP Content-type头中应该包含着关于数据类型的元数据。）这说明为什么理想的情况下，资源表述应该采用标准格式——如果客户程序对HTTP应用协议和一组数据格式都有所“了解”，那么它就可以用一种有意义的方式 <strong>与世界上任意一个RESTful HTTP应用交互</strong> 。不幸的是，我们不可能拿到所有东西的标准格式，但是，或许我们可以想到在公司或者一些合作伙伴中使用标准格式来营造一个小环境。当然以上情况不仅适用于从服务器端到客户端的数据，反之既然——倘若从客户端传来的数据符合应用协议，那么服务器端就可以使用特定的格式处理数据，而不去关心客户端的类型。</p>\n<p>在实践中，资源多重表述还有着其它重要的好处：如果你为你的资源提供HTML和XML两种表述方式，那这些资源不仅可以被你的应用所用，还可以被任意标准Web浏览器所用——也就是说，你的应用信息可以被所有会使用Web的人获取到。</p>\n<p>资源多重表述还有另外一种使用方式：你可以将应用的Web UI纳入到Web API中——毕竟，API的设计通常是由UI可以提供的功能驱动的，而UI也是通过API执行动作的。将这两个任务合二为一带来了令人惊讶的好处，这使得使用者和调用程序都能得到更好的Web接口。</p>\n<p>总结：针对不同的需求提供资源多重表述。</p>\n<h2 id=\"无状态通信\"><a href=\"#无状态通信\" class=\"headerlink\" title=\"无状态通信\"></a>无状态通信</h2><p><strong>无状态通信</strong> 是我要讲到的最后一个原则。首先，需要着重强调的是，虽然REST包含无状态性（statelessness）的观念，但这并不是说暴露功能的应用不能有状态——<br>事实上，在大部分情况下这会导致整个做法没有任何用处。REST要求状态要么被放入资源状态中，要么保存在客户端上。或者换句话说，服务器端不能保持除了单次请求之外的，任何与其通信的客户端的通信状态。这样做的最直接的理由就是可伸缩性—— 如果服务器需要保持客户端状态，那么大量的客户端交互会严重影响服务器的内存可用空间（footprint）。（注意，要做到无状态通信往往需要需要一些重新设计——不能简单地将一些session状态绑缚在URI上，然后就宣称这个应用是RESTful。）</p>\n<p>但除此以外，其它方面可能显得更为重要：无状态约束使服务器的变化对客户端是不可见的，因为在两次连续的请求中，客户端并不依赖于同一台服务器。一个客户端从某台服务器上收到一份包含链接的文档，当它要做一些处理时，这台服务器宕掉了，可能是硬盘坏掉而被拿去修理，可能是软件需要升级重启——如果这个客户端访问了从这台服务器接收的链接，它不会察觉到后台的服务器已经改变了。</p>\n<h2 id=\"理论上的REST\"><a href=\"#理论上的REST\" class=\"headerlink\" title=\"理论上的REST\"></a>理论上的REST</h2><p>我承认：以上我所说的REST不是真正的REST，而且我可能有点过多地热衷于简单化。但因为我想有一个与众不同的开场，所以没有在一开始就介绍其正式的定义和背景。现在就让我们稍微简要地介绍一下这方面的内容。</p>\n<p>首先，先前我并没有明确地区分HTTP、RESTful HTTP和REST。要理解这些不同方面之间的关系，我们要先来看看REST的历史。</p>\n<p><a href=\"http://www.ics.uci.edu/%7Efielding/\" target=\"_blank\" rel=\"external\">Roy T. Fielding</a> 在他的 <a href=\"http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\" target=\"_blank\" rel=\"external\">博士学位论文</a> （实际上你应该访问这个链接——至少对于一篇学术论文来说，它是相当易读的。此论文已被翻译成 <a href=\"http://www.redsaga.com/opendoc/REST_cn.pdf\" target=\"_blank\" rel=\"external\">中文</a> ）中定义了术语REST。Roy曾是许多基本Web协议的主要设计者，其中包括HTTP和URIs，并且他在论文中对这些协议提出了很多想法。（这篇论文被誉为“REST圣经”，这是恰当的——毕竟，是作者发明了这个术语，所以在定义上，他写的任何内容都被认为是权威的。）在论文中，Roy首先定义一种方法论来谈论 <strong>架构风格</strong> ——高级、抽象的模式，来表达架构方法背后的核心理念。每一个架构风格由一系列的 <strong>约束</strong> （constraints）定义形成。架构风格的例子包括“没有风格”（根本没有任何约束）、管道和过滤器（pipe and filter）、客户端/服务器、分布式对象以及——你猜到它了——REST。</p>\n<p>如果对你来说这些听起来都太抽象了，那就对了——REST在本质上是一个可以被许多不同技术实现的高层次的风格，而且可以被实例化——通过为它的抽象特性赋上不同的值。比如，REST中包含资源和统一接口的概念——也就是说，所有资源都应该对这些相同的方法作出反应。但是REST并没有说明是哪些方法，或者有多少方法。</p>\n<p>REST风格的一个“化身”便是HTTP（以及一套相关的一套标准，比如URI），或者稍微抽象一些：Web架构自身。接着上面的例子，HTTP使用HTTP动词作为REST统一接口的“实例”。由于Fielding是在Web已经（或者至少是大部分）“完善”了之后才定义的REST风格，有人可能会争论两者是不是100%的匹配。但是无论如何，整体上来说Web、HTTP和URI仅仅是REST风格的一个主要实现。不过，由于Roy Fielding即是REST论文的作者，又对Web架构设计有过深远的影响，两者相似也在情理之中。</p>\n<p>最后，我在前面一次又一次地使用着术语“RESTful HTTP”，原因很简单：许多使用HTTP的应用因为一些理由并没有遵循REST原则，有人会说使用HTTP而不遵循REST原则就等同于滥用HTTP。当然这听起来有点狂热——事实上违反REST约束的原因通常是，仅仅因为每个约束带来的设计权衡可能不适合于一些特殊情况。但通常，违背REST约束的原因可归咎于对其好处认知的缺乏。来看一个明显的反面案例：使用HTTP GET调用类似于删除对象的操作，这违反了REST的安全约束和一般性常识（客户程序不应为此负责，服务器端开发人员大概不是有意而为之）。但在随后的文章中，我会提及更多这样或那样的对HTTP的滥用。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文试图对REST（Web架构）背后的概念提供快速的介绍。RESTful HTTP暴露功能的方式与RPC、分布式对象以及Web Services是不相同的；要真正理解这些不同是需要一些心态的转变。不管你构建的应用是仅仅想暴露Web UI还是想把API变成Web的一份子，了解下REST的原则还是有好处的。</p>\n<p><strong>查看英文原文</strong> ： <a href=\"http://www.infoq.com/articles/rest-introduction\" target=\"_blank\" rel=\"external\">A Brief Introduction to REST</a></p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:35:10</p>\n</blockquote>\n"},{"title":"Auto Layout 小记","url":"http://code4fun.me/2018/05/01/autolayout/","content":"<h2 id=\"什么是-Auto-Layout\"><a href=\"#什么是-Auto-Layout\" class=\"headerlink\" title=\"什么是 Auto Layout\"></a>什么是 Auto Layout</h2><p>在 iOS 开发过程，我们总是认为通过托拽产生的界面是 Auto Layout，然而并不仅仅是这样的。 并不是仅仅在 storyboard 中通过 Interface Builder（IB）得到的才是 Auto Layout。其本质上是一种新的创建用户界面的方式，通过约束来描述视图与内容相互之间的关系。其有以下几个原则[1]：</p>\n<ul>\n<li>Auto Layout 是声明性的（通过向系统添加规则来表达界面布局）</li>\n<li>Auto Layout 最小化了计算（指定布局，而不是特定的点和像素）</li>\n<li>Auto Layout 设计是非直接的，但是它也很灵活（视图为已改变的窗口集合请求更少的更新，而且它们很容易分解为可维护的布局组件）</li>\n<li>Auto Layout 是几何驱动的（它的基本属于都是自然的几何属性，例如edge、center和size）</li>\n<li>Auto Layout 聚焦于关系（使用几何上的等量和非等量关系，将视图相互关联起来，从绝对关系切换到相对关系）</li>\n<li>Auto Layout 允许甚至鼓励冲突的规则（其组件可以携带不同的优先级，可以添加高优先级的边界限制和低优先级的回退条件）</li>\n<li>Auto Layout 表现自然内容（内在视图内容驱动尺寸设置和对齐，让内容成为布局中的一个关键角色）</li>\n<li>Auto Layout 寻找最佳方案</li>\n<li>Auto Layout 是分布式的</li>\n</ul>\n<h2 id=\"Auto-Layout-布局约束法则\"><a href=\"#Auto-Layout-布局约束法则\" class=\"headerlink\" title=\"Auto Layout 布局约束法则\"></a>Auto Layout 布局约束法则</h2><p>既然上面已经提到，其主要是通过约束来描述视图间关系来形成界面的，所以我们需要了解一些Auto Layout 布局约束的基本法则：</p>\n<ul>\n<li>约束是有优先级的，相同优先级的约束同时考虑，如果需要优先处理某个约束，就要赋予该约束更高的优先级。</li>\n<li>布局约束是关系，没有方向。</li>\n<li>布局约束可以取近似值</li>\n<li>布局约束可以循环，也即可以交叉引用。</li>\n<li>可以冗余</li>\n<li>可以引用兄弟视图</li>\n<li>约束必须至少引用一个视图。</li>\n</ul>\n<h2 id=\"IB-基本元素介绍\"><a href=\"#IB-基本元素介绍\" class=\"headerlink\" title=\"IB 基本元素介绍\"></a>IB 基本元素介绍</h2><p><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121583524Screen Shot 2016-12-15 at 9.35.56 PM.png\" alt=\"2016121583524Screen Shot 2016-12-15 at 9.35.56 PM.png\"><br><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121523802Screen Shot 2016-12-15 at 9.36.05 PM.png\" alt=\"2016121523802Screen Shot 2016-12-15 at 9.36.05 PM.png\"><br><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121551112Screen Shot 2016-12-15 at 9.36.14 PM.png\" alt=\"2016121551112Screen Shot 2016-12-15 at 9.36.14 PM.png\"><br><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121533105Screen Shot 2016-12-15 at 9.36.24 PM.png\" alt=\"2016121533105Screen Shot 2016-12-15 at 9.36.24 PM.png\"><br><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121588295Screen Shot 2016-12-15 at 9.36.34 PM.png\" alt=\"2016121588295Screen Shot 2016-12-15 at 9.36.34 PM.png\"><br><img src=\"http://of9yc6abb.bkt.clouddn.com/2016121553770Screen Shot 2016-12-15 at 9.36.44 PM.png\" alt=\"2016121553770Screen Shot 2016-12-15 at 9.36.44 PM.png\"></p>\n<h2 id=\"使用-IB-添加约束\"><a href=\"#使用-IB-添加约束\" class=\"headerlink\" title=\"使用 IB 添加约束\"></a>使用 IB 添加约束</h2><h3 id=\"托拽\"><a href=\"#托拽\" class=\"headerlink\" title=\"托拽\"></a>托拽</h3><h3 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h3><h2 id=\"处理约束冲突\"><a href=\"#处理约束冲突\" class=\"headerlink\" title=\"处理约束冲突\"></a>处理约束冲突</h2><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:33:32</p>\n</blockquote>\n"},{"title":"CNN知识脉络梳理","url":"http://code4fun.me/2018/05/01/cnn/","content":"<p>这里梳理了一些CNN的知识脉络。</p>\n<p>用来构建CNN的各种层</p>\n<p>数据输入层/Input layer<br>去均值；归一化；PCA/白化<br>卷积计算层/CONV layer<br>局部关联；窗口（receptive field）滑动；参数共享机制；深度/depth、步长/stride、填充值/zero-padding<br>ReLU激励层/ReLU layer<br>Sigmoid、Tanh（双曲正切）、ReLU（优选）、Leaky ReLU（次优选）、ELU、Maxout（次优选）；梯度消失问题<br>池化层/Pooling layer<br>下采样、压缩数据和参数量、减小过拟合；Max pooling、average pooling<br>全连接层/FC layer<br>Batch Normalization layer(Option)<br>输出层/Softmax layer(Option)<br>CNN训练算法</p>\n<p>第一步，先定义Loss function<br>找到最小化损失函数的W和b，CNN中用的算法是SGD<br>SGD需要计算W和b的偏导<br>BP算法是计算偏导用的，其核心是求导链式法则<br>CNN优缺点</p>\n<p>优点： </p>\n<ul>\n<li>权重共享，极大减少参数量 </li>\n<li>特征是训练出来的，无需手动选取 </li>\n<li>层次深、抽取图像信息丰富，表达效果好<br>缺点： </li>\n<li>需要调参，需要大样本量，硬件GPU </li>\n<li>物理含义不明确</li>\n</ul>\n<p>正则化与Dropout</p>\n<p>传统机器学习正则化算法：L1、L2正则化<br>Dropout(随机失活)正则化：防止过拟合；集成学习的思想<br>典型CNN网络</p>\n<p>LeNet(上世纪90年代)、AlexNet(2012)、ZFNet(2013)、GoogLeNet(2014)、VGGNet(2014)、ResNet(2015)</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:32:30</p>\n</blockquote>\n"},{"title":"PEP8 Python 编码规范整理","url":"http://code4fun.me/2018/05/01/pep8_python/","content":"<p>决定开始Python之路了，利用业余时间，争取更深入学习Python。编程语言不是艺术，而是工作或者说是工具，所以整理并遵循一套编码规范是十分必要的。所以今天下午我根据PEP 8整理了一份，以后都照此编码了，还会持续更新。</p>\n<h2 id=\"代码编排\"><a href=\"#代码编排\" class=\"headerlink\" title=\"代码编排\"></a>代码编排</h2><p>1 缩进。4个空格的缩进（编辑器都可以完成此功能），不使用Tap，更不能混合使用Tap和空格。<br>2 每行最大长度79，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。<br>3 类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</p>\n<h2 id=\"文档编排\"><a href=\"#文档编排\" class=\"headerlink\" title=\"文档编排\"></a>文档编排</h2><p>1 模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、三方和自己编写顺序依次排放，之间空一行。<br>2 不要在一句import中多个库，比如import os, sys不推荐。<br>3 如果采用from XX import XX引用库，可以省略‘module.’，都是可能出现命名冲突，这时就要采用import XX。</p>\n<h2 id=\"空格的使用\"><a href=\"#空格的使用\" class=\"headerlink\" title=\"空格的使用\"></a>空格的使用</h2><p>总体原则，避免不必要的空格。<br>1 各种右括号前不要加空格。<br>2 逗号、冒号、分号前不要加空格。<br>3 函数的左括号前不要加空格。如Func(1)。<br>4 序列的左括号前不要加空格。如list[2]。<br>5 操作符左右各加一个空格，不要为了对齐增加空格。<br>6 函数默认参数使用的赋值符左右省略空格。<br>7 不要将多句语句写在同一行，尽管使用‘；’允许。<br>8 if/for/while语句中，即使执行语句只有一句，也必须另起一行。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>总体原则，错误的注释不如没有注释。所以当一段代码发生变化时，第一件事就是要修改注释！<br>注释必须使用英文，最好是完整的句子，首字母大写，句后要有结束符，结束符后跟两个空格，开始下一句。如果是短语，可以省略结束符。<br>1 块注释，在一段代码前增加的注释。在‘ # ’后加一空格。段落之间以只有‘ # ’的行间隔。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Description : Module config.</div><div class=\"line\">#</div><div class=\"line\"> # Input : None</div><div class=\"line\">#</div><div class=\"line\"> # Output : None</div></pre></td></tr></table></figure>\n<p>2 行注释，在一句代码后加注释。比如：<code>x = x + 1 # Increment x</code><br>但是这种方式尽量少使用。<br>3 避免无谓的注释。</p>\n<h2 id=\"文档描述\"><a href=\"#文档描述\" class=\"headerlink\" title=\"文档描述\"></a>文档描述</h2><p>1 为所有的共有模块、函数、类、方法写docstrings；非共有的没有必要，但是可以写注释（在def的下一行）。<br>2 如果docstring要换行，参考如下例子,详见PEP 257</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;&quot;&quot;Return a foobang</div><div class=\"line\">Optional plotz says to frobnicate the bizbaz first.</div><div class=\"line\">&quot;&quot;&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。<br>1 尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。<br>2 模块命名尽量短小，使用全部小写的方式，可以使用下划线。<br>3 包命名尽量短小，使用全部小写的方式，不可以使用下划线。<br>4 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。<br>5 异常命名使用CapWords+Error后缀的方式。<br>6 全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是<strong>all</strong>机制;二是前缀一个下划线。<br>7 函数命名使用全部小写的方式，可以使用下划线。<br>8 常量命名使用全部大写的方式，可以使用下划线。<br>9 类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。<br>9 类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。<br>11 类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。<br>12 为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明<strong>a,访问时，只能通过Foo._Foo</strong>a，避免歧义。如果子类也叫Foo，那就无能为力了。<br>13 类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。</p>\n<h2 id=\"编码建议\"><a href=\"#编码建议\" class=\"headerlink\" title=\"编码建议\"></a>编码建议</h2><p>1 编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。<br>2 尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。<br>3 使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。<br>4 异常中不要使用裸露的except，except后跟具体的exceptions。<br>5 异常中try的代码尽可能少。比如：<br>try:<br>value = collection[key]<br>except KeyError:<br>return key_not_found(key)<br>else:<br>return handle_value(value)<br>要优于<br>try:</p>\n<h1 id=\"Too-broad\"><a href=\"#Too-broad\" class=\"headerlink\" title=\"Too broad!\"></a>Too broad!</h1><p>return handle_value(collection[key])<br>except KeyError:</p>\n<h1 id=\"Will-also-catch-KeyError-raised-by-handle-value\"><a href=\"#Will-also-catch-KeyError-raised-by-handle-value\" class=\"headerlink\" title=\"Will also catch KeyError raised by handle_value()\"></a>Will also catch KeyError raised by handle_value()</h1><p>return key_not_found(key)<br>6 使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如：<br>Yes: if foo.startswith(‘bar’):优于<br>No: if foo[:3] == ‘bar’:<br>7 使用isinstance()比较对象的类型。比如<br>Yes: if isinstance(obj, int): 优于<br>No: if type(obj) is type(1):<br>8 判断序列空或不空，有如下规则<br>Yes: if not seq:<br>if seq:<br>优于<br>No: if len(seq)<br>if not len(seq)<br>9 字符串不要以空格收尾。<br>10 二进制数据判断使用 if boolvalue的方式。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:28:56</p>\n</blockquote>\n"},{"title":"我的硕士生涯","url":"http://code4fun.me/2018/03/13/硕士生涯/","content":"<p>转眼间硕士生活就要这么过去了，本来想在致谢里写一个潇潇洒洒的长文，不过后来还是作罢了，一篇充满抱怨的致谢好像并不是很讨喜。</p>\n<p>硕士期间，感觉做了很多事，但又感觉什么都没有做。教研室里开始看变分贝叶斯，可是并没有看懂，就结束了。后来又利用能量的观点做目标跟踪，跟踪出结果来了，然后就不了了之了。还用多假设做多路径目标跟踪，成了某篇文章的对比算法，还是不了了之了。用RANSAC做航迹起始，发了篇会议，结果还不是一作。又做项目，用深度学习，虽然出来了结果，却好多地方说不出个123。粗看起来，有不少专利、文章，但又有什么用呢。另外还帮人一直维护网页，写PHP，可好多代码都是东拼西凑，用用框架，完全空手写个东西还是很难。。。</p>\n<p>一个两年半过去了，回过头去，到底收获了什么呢？在教研室干了那么多活，又从里面获得了什么呢？知识？大部分都只是皮毛，没有深入进去。思维方式？写程序、看文献的能力，感觉并没有比本科多出多少。工作？和教研室的所学所做没有任何关系。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>Mar 13, 2018 9:57 PM </p>\n</blockquote>\n"},{"title":"C++算法模板（下）","url":"http://code4fun.me/2018/01/11/C++算法模板/","content":"<h1 id=\"最短路问题：\"><a href=\"#最短路问题：\" class=\"headerlink\" title=\"最短路问题：\"></a>最短路问题：</h1><h2 id=\"Flored-warshall-算法-n-3\"><a href=\"#Flored-warshall-算法-n-3\" class=\"headerlink\" title=\"Flored-warshall 算法(n^3)\"></a>Flored-warshall 算法(n^3)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++)</div><div class=\"line\">\t</div><div class=\"line\">\t          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\">\t</div><div class=\"line\">\t            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</div><div class=\"line\">\t</div><div class=\"line\">\t          <span class=\"keyword\">if</span>((dis[i][j]&gt;dis[i][k]+dis[k][j]) &amp;&amp; (i!=k) &amp;&amp; (i!=j) &amp;&amp; (k!=j))</div><div class=\"line\">\t</div><div class=\"line\">\t          &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t                  dis[i][j]=dis[i][k]+dis[k][j];</div><div class=\"line\">\t</div><div class=\"line\">\t                  pre[i][j]=pre[k][j];</div><div class=\"line\">\t</div><div class=\"line\">\t          &#125;</div><div class=\"line\">```\t</div><div class=\"line\">输出路径函数：</div><div class=\"line\">在调用处加上：`<span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;” ”;   <span class=\"comment\">//s为起点；`</span></div><div class=\"line\"></div><div class=\"line\">```<span class=\"function\">cpp</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title\">print</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></div><div class=\"line\">\t</div><div class=\"line\">\t &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">if</span>(pre[s][x]==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</div><div class=\"line\">\t</div><div class=\"line\">\t         print(pre[s][x]);</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"-&gt;\"</span>&lt;&lt;x;</div><div class=\"line\">\t</div><div class=\"line\">\t &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"dijkstra算法-n-2\"><a href=\"#dijkstra算法-n-2\" class=\"headerlink\" title=\"dijkstra算法(n^2)\"></a>dijkstra算法(n^2)</h2><p>无优化，用了现写的快读搞定。洛谷的模板题P3371.用cin流最后一个点超时，scanf和快读都是可以过的。当数据规模比较大的时候用scanf好咯。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 10010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 500010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> num,minl,k,n,m,s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> v[maxn],dis[maxn],head[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> out=<span class=\"number\">0</span>,fh=<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> cc=getchar();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (cc==<span class=\"string\">'-'</span>)fh=<span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(cc&gt;<span class=\"string\">'9'</span>||cc&lt;<span class=\"string\">'0'</span>)cc=getchar();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(cc&gt;=<span class=\"string\">'0'</span>&amp;&amp;cc&lt;=<span class=\"string\">'9'</span>)&#123;out=out*<span class=\"number\">10</span>+cc-<span class=\"string\">'0'</span>;cc=getchar();&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> out*fh;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*void write(int x)</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">if(x==0)&#123;</div><div class=\"line\"></div><div class=\"line\">putchar('0');</div><div class=\"line\"></div><div class=\"line\">return;&#125;</div><div class=\"line\"></div><div class=\"line\">int num=0;char c[15];</div><div class=\"line\"></div><div class=\"line\">while(x)c[++num]=(x%10)+48,x/=10;</div><div class=\"line\"></div><div class=\"line\">while(num) putchar(c[num--]);</div><div class=\"line\"></div><div class=\"line\">putchar(' ');&#125;  */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> Edge</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> next;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> to;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> dis;</div><div class=\"line\"></div><div class=\"line\">&#125;edge[maxm];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span> <span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">num++;</div><div class=\"line\"></div><div class=\"line\">edge[num].next=head[u];</div><div class=\"line\"></div><div class=\"line\">edge[num].to=v;</div><div class=\"line\"></div><div class=\"line\">edge[num].dis=w;</div><div class=\"line\"></div><div class=\"line\">head[u]=num;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijstra</span> <span class=\"params\">(<span class=\"keyword\">int</span> v0)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\"> dis[i]=<span class=\"number\">2147483647</span>;</div><div class=\"line\"></div><div class=\"line\">dis[v0]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">           minl=<span class=\"number\">2147483647</span>;</div><div class=\"line\"></div><div class=\"line\">           k=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</div><div class=\"line\"></div><div class=\"line\">           &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span>(v[j]==<span class=\"number\">0</span> &amp;&amp; minl&gt;dis[j])</div><div class=\"line\"></div><div class=\"line\">                    &#123;</div><div class=\"line\"></div><div class=\"line\">                             minl=dis[j];</div><div class=\"line\"></div><div class=\"line\">                             k=j;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           v[k]=<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[k];i!=<span class=\"number\">0</span>;i=edge[i].next)</div><div class=\"line\"></div><div class=\"line\">           &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span>(v[edge[i].to]==<span class=\"number\">0</span> &amp;&amp; minl+edge[i].dis&lt;dis[edge[i].to])</div><div class=\"line\"></div><div class=\"line\">                    dis[edge[i].to]=minl+edge[i].dis;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">int</span> u,v,w;</div><div class=\"line\"></div><div class=\"line\">           u=read();</div><div class=\"line\"></div><div class=\"line\">           v=read();</div><div class=\"line\"></div><div class=\"line\">           w=read();</div><div class=\"line\"></div><div class=\"line\">           add_edge(u,v,w);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dijstra(s);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Dijkstra-堆优化\"><a href=\"#Dijkstra-堆优化\" class=\"headerlink\" title=\"Dijkstra(堆优化):\"></a>Dijkstra(堆优化):</h2><p>实测516ms; 堆优化是指在寻找最近点时,用堆log时间复杂度取点,用priority_queue(堆/优先队列)实现;<br>较朴素算法,利用了堆,能更快取得最近点;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">2147483647</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm=<span class=\"number\">500000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n,m,s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> Node &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> d,id;</div><div class=\"line\"></div><div class=\"line\">    Node()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    Node(<span class=\"keyword\">int</span> d,<span class=\"keyword\">int</span> id):d(d),id(id)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> d&gt;rhs.d;<span class=\"comment\">//重载&lt;,方便堆</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> dis[maxn],vis[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) dis[i]=INF; dis[s]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    priority_queue&lt;Node&gt;Q;</div><div class=\"line\"></div><div class=\"line\">    Q.push(Node(<span class=\"number\">0</span>,s));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty()) &#123;</div><div class=\"line\"></div><div class=\"line\">        Node u=Q.top(); Q.pop();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(vis[u.id]) <span class=\"keyword\">continue</span>;<span class=\"comment\">//若某个点已经被更新到最优,就不用再次更新其他点</span></div><div class=\"line\"></div><div class=\"line\">        vis[u.id]=<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=fir[u.id];e;e=nxt[e]) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> v=to[e],w=val[e];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(u.d+w&lt;dis[v]) &#123;</div><div class=\"line\"></div><div class=\"line\">                dis[v]=u.d+w;</div><div class=\"line\"></div><div class=\"line\">                Q.push(Node(dis[v],v));</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u,v,w,i=<span class=\"number\">0</span>;i&lt;m;i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w);</div><div class=\"line\"></div><div class=\"line\">        add_edge(u,v,w);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Dijkstra(s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,dis[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"SPFA-无优化\"><a href=\"#SPFA-无优化\" class=\"headerlink\" title=\"SPFA(无优化):\"></a>SPFA(无优化):</h2><p>766ms;</p>\n<p>耗时主要原因是可能某个能将更多点尽可能优化的,却放进了队尾;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">2147483647</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm=<span class=\"number\">500000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n,m,s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> dis[maxn],inq[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) dis[i]=INF; dis[s]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q;Q.push(s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty()) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> u=Q.front(); Q.pop();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=fir[u];e;e=nxt[e]) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> v=to[e],w=val[e];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(dis[u]+w&lt;dis[v]) &#123;</div><div class=\"line\"></div><div class=\"line\">                dis[v]=dis[u]+w;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!inq[v]) Q.push(v);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u,v,w,i=<span class=\"number\">0</span>;i&lt;m;i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w);</div><div class=\"line\"></div><div class=\"line\">        add_edge(u,v,w);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    SPFA(s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,dis[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"SPFA-SLF优化\"><a href=\"#SPFA-SLF优化\" class=\"headerlink\" title=\"SPFA(SLF优化):\"></a>SPFA(SLF优化):</h2><p>实测497ms; SLF优化是指,当前进队的dis值与队首的dis值比较,若&lt;=进队首,否则进队尾,用deque(双向队列)实现;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">2147483647</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm=<span class=\"number\">500000</span>+<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n,m,s;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> dis[maxn],inq[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) dis[i]=INF; dis[s]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;Q;</div><div class=\"line\"></div><div class=\"line\">    Q.push_front(s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty()) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> u=Q.front(); Q.pop_front(); inq[u]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=fir[u];e;e=nxt[e]) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> v=to[e],w=val[e];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(dis[u]+w&lt;dis[v]) &#123;</div><div class=\"line\"></div><div class=\"line\">                dis[v]=dis[u]+w;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!inq[v]) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span>(Q.empty()||dis[v]&lt;=dis[Q.front()]) Q.push_front(v);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">else</span> Q.push_back(v);</div><div class=\"line\"></div><div class=\"line\">                    inq[v]=<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u,v,w,i=<span class=\"number\">0</span>;i&lt;m;i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w);</div><div class=\"line\"></div><div class=\"line\">        add_edge(u,v,w);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    SPFA(s);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,dis[i]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结: 对于此题而言,时间效率:SPFA(ELF优化)&gt;Dijkstra(堆优)&gt;SPFA&gt;Dijkstra;<br>实际上SPFA的时间复杂度不够稳定,有些时候易被出题人卡常数,建议使用更稳定的Dijkstra;</p>\n<h1 id=\"最小环问题\"><a href=\"#最小环问题\" class=\"headerlink\" title=\"最小环问题\"></a>最小环问题</h1><p>ans为最小环的最优值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++)</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;k;i++)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;k;i++)</div><div class=\"line\"></div><div class=\"line\">           ans=min(ans,dis[i][k]+dis[k][j]+dis[i][j]);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</div><div class=\"line\"></div><div class=\"line\">              dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</div></pre></td></tr></table></figure>\n<h1 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h1><h2 id=\"“并”：\"><a href=\"#“并”：\" class=\"headerlink\" title=\"“并”：\"></a>“并”：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionn</span> <span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t         x=find(x);</div><div class=\"line\">\t</div><div class=\"line\">\t         y=find(y);</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">if</span>(x!=y) </div><div class=\"line\">\t</div><div class=\"line\">\t         pre[x]=y; </div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"“查”：\"><a href=\"#“查”：\" class=\"headerlink\" title=\"“查”：\"></a>“查”：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">if</span>(pre[x]!=x)                  <span class=\"comment\">//路径压缩算法，如果不需要可以这样写</span></div><div class=\"line\">\t</div><div class=\"line\">\t           pre[x]=find(pre[x]);       <span class=\"comment\">//if(x!=y) return find(pre[x]);</span></div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">return</span> pre[x];               <span class=\"comment\">//else return x;</span></div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"集\"><a href=\"#集\" class=\"headerlink\" title=\"集\"></a>集</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span>  <span class=\"comment\">//判断是否连通，可以直接写在代码里不用另写函数。</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t         x=find(x);             </div><div class=\"line\">\t</div><div class=\"line\">\t         y=find(y);</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">if</span>(x==y) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t         <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"MST-最小生成树\"><a href=\"#MST-最小生成树\" class=\"headerlink\" title=\"MST(最小生成树)\"></a>MST(最小生成树)</h1><h2 id=\"prim算法\"><a href=\"#prim算法\" class=\"headerlink\" title=\"prim算法\"></a>prim算法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 5010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 200010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[maxn][maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> e[maxm];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> v[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n,x,y,w,m;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">memset</span>(e,<span class=\"number\">0x7f</span>,<span class=\"keyword\">sizeof</span>(e));</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"built_in\">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"built_in\">map</span>[x][y]=<span class=\"built_in\">map</span>[y][x]=w;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">e[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>((v[j]==<span class=\"number\">0</span>) &amp;&amp; (e[j]&lt;e[k]))</div><div class=\"line\"></div><div class=\"line\">              k=j;</div><div class=\"line\"></div><div class=\"line\">           v[k]=<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>((v[j]==<span class=\"number\">0</span>) &amp;&amp; (<span class=\"built_in\">map</span>[k][j]&lt;e[j]))</div><div class=\"line\"></div><div class=\"line\">              e[j]=<span class=\"built_in\">map</span>[k][j];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\"> sum+=e[i];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2.</span>      kruskal算法</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 5010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 200010</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n,k,m,sum,pre[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> point</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">int</span> x;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">int</span> y;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">int</span> v;</div><div class=\"line\"></div><div class=\"line\">&#125;a[maxm];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionn</span> <span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         x=find(x);</div><div class=\"line\"></div><div class=\"line\">         y=find(y);</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(x!=y) </div><div class=\"line\"></div><div class=\"line\">         pre[x]=y; </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(pre[x]!=x)          </div><div class=\"line\"></div><div class=\"line\">           pre[x]=find(pre[x]);  </div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">return</span> pre[x];     </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> point &amp;a,<span class=\"keyword\">const</span> point &amp;b)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(a.v&lt;b.v)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</div><div class=\"line\"></div><div class=\"line\">         &#123;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"built_in\">cin</span>&gt;&gt;a[i].x;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"built_in\">cin</span>&gt;&gt;a[i].y;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"built_in\">cin</span>&gt;&gt;a[i].v;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">           pre[i]=i;</div><div class=\"line\"></div><div class=\"line\">         sort(a+<span class=\"number\">1</span>,a+<span class=\"number\">1</span>+m,cmp);</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</div><div class=\"line\"></div><div class=\"line\">         &#123;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">if</span>(find(a[i].x)!=find(a[i].y))</div><div class=\"line\"></div><div class=\"line\">                   &#123;</div><div class=\"line\"></div><div class=\"line\">                            unionn(a[i].x,a[i].y);</div><div class=\"line\"></div><div class=\"line\">                            sum+=a[i].v;</div><div class=\"line\"></div><div class=\"line\">                            k++;</div><div class=\"line\"></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">if</span>(k==n<span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">101</span>][<span class=\"number\">101</span>],c[<span class=\"number\">101</span>],r[<span class=\"number\">101</span>],ans[<span class=\"number\">101</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> i,j,tot,temp,num,n,m;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"built_in\">cin</span>&gt;&gt;n;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">         &#123;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">do</span></div><div class=\"line\"></div><div class=\"line\">                   &#123;</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"built_in\">cin</span>&gt;&gt;j;</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"keyword\">if</span>(j!=<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">                            &#123;</div><div class=\"line\"></div><div class=\"line\">                                     c[i]++;</div><div class=\"line\"></div><div class=\"line\">                                     a[i][c[i]]=j;</div><div class=\"line\"></div><div class=\"line\">                                     r[j]++;</div><div class=\"line\"></div><div class=\"line\">                            &#125;</div><div class=\"line\"></div><div class=\"line\">                   &#125;<span class=\"keyword\">while</span>(j!=<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span>(r[i]==<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">           ans[++tot]=i;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">do</span></div><div class=\"line\"></div><div class=\"line\">         &#123;</div><div class=\"line\"></div><div class=\"line\">                   temp=ans[tot];</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"built_in\">cout</span>&lt;&lt;temp&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\"></div><div class=\"line\">                   tot--;</div><div class=\"line\"></div><div class=\"line\">                   num++;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c[temp];i++)</div><div class=\"line\"></div><div class=\"line\">                   &#123;</div><div class=\"line\"></div><div class=\"line\">                            r[a[temp][i]]--;</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"keyword\">if</span>(r[a[temp][i]]==<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">                             ans[++tot]=a[temp][i];</div><div class=\"line\"></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">         &#125;<span class=\"keyword\">while</span>(num!=n);</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h1><h2 id=\"求出每个点的最早发生的时间，正序求得\"><a href=\"#求出每个点的最早发生的时间，正序求得\" class=\"headerlink\" title=\"求出每个点的最早发生的时间，正序求得\"></a>求出每个点的最早发生的时间，正序求得</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Earliest[<span class=\"number\">1</span>…n]=max(Earliest[<span class=\"number\">1</span>…n+<span class=\"built_in\">map</span>[pre][ <span class=\"number\">1</span>…n])</div></pre></td></tr></table></figure>\n<h2 id=\"求出每个点最迟发生的时间，逆序求得\"><a href=\"#求出每个点最迟发生的时间，逆序求得\" class=\"headerlink\" title=\"求出每个点最迟发生的时间，逆序求得\"></a>求出每个点最迟发生的时间，逆序求得</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Last[n…<span class=\"number\">1</span>]=min(Last[n…<span class=\"number\">1</span>]-<span class=\"built_in\">map</span>[n…<span class=\"number\">1</span>][pre])</div></pre></td></tr></table></figure>\n<h2 id=\"最迟－最早的的余量如果为0，则此点为关键点，项连得路径叫做关键路径。\"><a href=\"#最迟－最早的的余量如果为0，则此点为关键点，项连得路径叫做关键路径。\" class=\"headerlink\" title=\"最迟－最早的的余量如果为0，则此点为关键点，项连得路径叫做关键路径。\"></a>最迟－最早的的余量如果为0，则此点为关键点，项连得路径叫做关键路径。</h2><h1 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h1><h2 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> a / b = b / a%b；</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> gcd (<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> a;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\"></div><div class=\"line\">      gcd(b,a%b);</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>也可以用来求最小公倍数，lcm=a/gcd(a,b)*b。先除后乘的原因是为了避免乘法溢出。</p>\n<h2 id=\"唯一分解定理：一个数可以分成若干个素数相乘的形式。\"><a href=\"#唯一分解定理：一个数可以分成若干个素数相乘的形式。\" class=\"headerlink\" title=\"唯一分解定理：一个数可以分成若干个素数相乘的形式。\"></a>唯一分解定理：一个数可以分成若干个素数相乘的形式。</h2><h2 id=\"素数定理：π-x-x-lnx-求出有多少个小于x的素数。\"><a href=\"#素数定理：π-x-x-lnx-求出有多少个小于x的素数。\" class=\"headerlink\" title=\"素数定理：π(x)~x/lnx.求出有多少个小于x的素数。\"></a>素数定理：π(x)~x/lnx.求出有多少个小于x的素数。</h2><h2 id=\"Eratosthenes筛素数\"><a href=\"#Eratosthenes筛素数\" class=\"headerlink\" title=\"Eratosthenes筛素数\"></a>Eratosthenes筛素数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Int m=<span class=\"built_in\">sqrt</span>(n+<span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\"> For（<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++）</div><div class=\"line\"></div><div class=\"line\">  If(vis[i]==<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">   For(<span class=\"keyword\">int</span> j=i*i;j&lt;=n;j++)</div><div class=\"line\"></div><div class=\"line\">Vis[j]=<span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>还要确定1不是素数，2是素数。如果标记为1则i不为素数，如果未标记则为素数。</p>\n<h2 id=\"扩展欧几里得算法\"><a href=\"#扩展欧几里得算法\" class=\"headerlink\" title=\"扩展欧几里得算法\"></a>扩展欧几里得算法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\">Void <span class=\"title\">gcd</span> <span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> &amp;d,<span class=\"keyword\">int</span> &amp;x,<span class=\"keyword\">int</span> &amp;y)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  If(b==<span class=\"number\">0</span>)  &#123;d=a; x=<span class=\"number\">1</span>; y=<span class=\"number\">0</span>;&#125;</div><div class=\"line\"></div><div class=\"line\">  Else &#123; gcd(b,a%b,y,x);</div><div class=\"line\"></div><div class=\"line\">        Y-=x*(a/b);</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>求出一组解来，其他部分可写为(x0+kb’,y0-ka’),a’=a/gcd(a,b),b’=b/gcd(a,b);k是整数。</p>\n<p>G=gcd(g/b)  若ax+bx=c 若c不为g的倍数是，则此方程无整数解。</p>\n<h2 id=\"幂取模\"><a href=\"#幂取模\" class=\"headerlink\" title=\"幂取模\"></a>幂取模</h2><p>a^n %m 的值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\">Int <span class=\"title\">mod</span> <span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> m)</span></span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">If(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"> Int x=mod(a,n/<span class=\"number\">2</span>,m);</div><div class=\"line\"></div><div class=\"line\"> Long <span class=\"keyword\">long</span> ans=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)x*x %m;</div><div class=\"line\"></div><div class=\"line\">If(n%<span class=\"number\">2</span>==<span class=\"number\">1</span>) ans=ans*a % m;</div><div class=\"line\"></div><div class=\"line\">Return (<span class=\"keyword\">int</span>) ans;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"同余与模运算：\"><a href=\"#同余与模运算：\" class=\"headerlink\" title=\"同余与模运算：\"></a>同余与模运算：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(a+b)%n=((a %n)+(b%n))%n</div><div class=\"line\">\t</div><div class=\"line\">(a-b)%n=((a%n)-(b%n)+n)%n</div><div class=\"line\">\t</div><div class=\"line\">ab%n=(a%n)(b%n)%n</div></pre></td></tr></table></figure>\n<h2 id=\"杨辉三角：\"><a href=\"#杨辉三角：\" class=\"headerlink\" title=\"杨辉三角：\"></a>杨辉三角：</h2><pre><code>             1\n\n          1    1\n\n         1   2   1\n\n      1    3    3   1\n\n    1    4   6    4    1\n\n  1   5    10  10   5    1  \n\n1   6   15    20  15   6    1\n</code></pre><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C[i]=c[i+<span class=\"number\">1</span>]*(n-i+<span class=\"number\">1</span>)/i;</div><div class=\"line\"></div><div class=\"line\">C[i]=n!/i!(n<span class=\"number\">-1</span>)!;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:49 PM </p>\n</blockquote>\n"},{"title":"面试内容整理--数据库","url":"http://code4fun.me/2018/01/11/面试内容整理--数据库/","content":"<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p>B+树 哈希表</p>\n<h3 id=\"SQL语句（阿里157、8习题）\"><a href=\"#SQL语句（阿里157、8习题）\" class=\"headerlink\" title=\"SQL语句（阿里157、8习题）\"></a>SQL语句（阿里157、8习题）</h3><p>数据分组(max,min,avg,sum,count)<br>    SQL&gt;SELECT MAX(sal),MIN(age),AVG(sal),SUM(sal) from emp;<br>    SQL&gt;SELECT <em> FROM emp where sal=(SELECT MAX(sal) from emp));<br>    SQL&gt;SELEC COUNT(</em>) FROM emp;<br>group by（用于对查询结果的分组统计） 和 having子句（用于限制分组显示结果）<br>    SQL&gt;SELECT deptno,MAX(sal),AVG(sal) FROM emp GROUP BY deptno;<br>    SQL&gt;SELECT deptno, job, AVG(sal),MIN(sal) FROM emp group by deptno,job having AVG(sal)<2000; 对于数据分组的总结：=\"\" a.=\"\" 分组函数只能出现在选择列表、having、order=\"\" by子句中（不能出现在where中）=\"\" b.=\"\" 如果select语句中同时包含有group=\"\" by,=\"\" having,=\"\" order=\"\" by，那么它们的顺序是group=\"\" by。=\"\" c.=\"\" 在选择列中如果有列、表达式和分组函数，那么这些列和表达式必须出现在group=\"\" by子句中，否则就是会出错。=\"\" 使用group=\"\" by不是使用having的前提条件。=\"\" 多表查询=\"\" sql=\"\">SELECT e.name,e.sal,d.dname FROM emp e, dept d WHERE e.deptno=d.deptno order by d.deptno;<br>    SQL&gt;SELECT e.ename,e.sal,s.grade FROM emp e,salgrade s WHER e.sal BETWEEN s.losal AND s.hisal;</2000;></p>\n<h3 id=\"数据库调优（索引，mongodb）\"><a href=\"#数据库调优（索引，mongodb）\" class=\"headerlink\" title=\"数据库调优（索引，mongodb）\"></a>数据库调优（索引，mongodb）</h3><p>11、一次更新多条记录比分多次更新每次一条快,就是说批处理好</p>\n<p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要.<br>  2、纵向、横向分割表，减少表的尺寸(<code>sp_spaceuse</code>)<br>  3、升级硬件<br>  4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段<br>  5、提高网速;<br>  6、扩大服务器的内存,Windows 2000和SQL server 2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行 Microsoft SQL Server 2000 时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的 1.5 倍。如果另外安装了全文检索功能，并打算运行 Microsoft 搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的 3 倍。将 SQL Server max server memory 服务器配置选项配置为物理内存的 1.5 倍（虚拟内存大小设置的一半）。<br>  7、增加服务器CPU个数;但是必须明白并行处理串行处理更需要资源例如内存。使用并行还是串行程是MsSQL自动评估选择的。单个任务分解成多个任务， 就可以在处理器上运行。例如耽搁查询的排序、连接、扫描和GROUP BY字句同时执行，SQL SERVER根据系统的负载情况决定最优的并行等级，复杂的需要消耗大量的CPU的查询最适合并行处理。但是更新操作 UPDATE,INSERT，DELETE还不能并行处理。<br>  8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。 like ‘a%’ 使用索引 like ‘%a’ 不使用索引用 like ‘%a%’ 查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。<br>  9、DB Server 和APPLication Server 分离；OLTP和OLAP分离<br>  10、分布式分区视图可用于实现数据库服务器联合体。联合体是一组分开管理的服务器，但它们相互协作分担系统的处理负荷。这种通过分区数据形成数据库服务 器联合体的机制能够扩大一组服务器，以支持大型的多层 Web 站点的处理需要。有关更多信息，参见设计联合数据库服务器。（参照SQL帮助文件’分区视图’）<br>  a、在实现分区视图之前，必须先水平分区表<br>  b、在创建成员表后，在每个成员服务器上定义一个分布式分区视图，并且每个视图具有相同的名称。这样，引用分布式分区视图名的查询可以在任何一个成员服务 器上运行。系统操作如同每个成员服务器上都有一个原始表的复本一样，但其实每个服务器上只有一个成员表和一个分布式分区视图。数据的位置对应用程序是透明 的。<br>  11、重建索引 DBCC REINDEX ,DBCC INDEXDEFRAG,收缩数据和日志 DBCC SHRINKDB,DBCC SHRINKFILE. 设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。 在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的：<br>  1、 查询语句的词法、语法检查<br>  2、 将语句提交给DBMS的查询优化器<br>  3、 优化器做代数优化和存取路径的优化<br>  4、 由预编译模块生成查询规划<br>  5、 然后在合适的时间提交给系统处理执行<br>  6、 最后将执行结果返回给用户其次，看一下SQL SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。  </p>\n<h3 id=\"数据库五范式\"><a href=\"#数据库五范式\" class=\"headerlink\" title=\"数据库五范式\"></a>数据库五范式</h3><p>第一范式：<br>对于表中的每一行，必须且仅仅有唯一的行值.在一行中的每一列仅有唯一的值并且具有原子性.<br>（第一范式是通过把重复的组放到每个独立的表中，把这些表通过一对多关联联系起来这种方式来消除重复组的。）<br>第二范式：<br>第二范式要求非主键列是主键的子集，非主键列活动必须完全依赖整个主键。主键必须有唯一性的元素,一个主键可以由一个或更多的组成唯一值的列组成。一旦创建，主键无法改变，外键关联一个表的主键。主外键关联意味着一对多的关系.<br>（第二范式处理冗余数据的删除问题。当某张表中的信息依赖于该表中其它的不是主键部分的列的时候，通常会违反第二范式。）<br>第三范式：<br>第三范式要求非主键列互不依赖.<br>（第三范式规则查找以消除没有直接依赖于第一范式和第二范式形成的表的主键的属性。我们为没有与表的主键关联的所有信息建立了一张新表。每张新表保存了来自源表的信息和它们所依赖的主键。）<br>第四范式：<br>第四范式禁止主键列和非主键列一对多关系不受约束<br>第五范式：<br>第五范式将表分割成尽可能小的块，为了排除在表中所有的冗余. </p>\n<h3 id=\"sqlite和服务器数据库的区别\"><a href=\"#sqlite和服务器数据库的区别\" class=\"headerlink\" title=\"sqlite和服务器数据库的区别\"></a>sqlite和服务器数据库的区别</h3><p>SQLITE是单机数据库。功能简约，小型化，追求最大磁盘效率<br>MYSQL是完善的服务器数据库。功能全面，综合化，追求最大并发效率<br>MYSQL、Sybase、Oracle等这些都是适用于服务器数据量大功能多需要安装，例如网站访问量比较大的。而sqlite是一款小型数据库，简单移植性好无需安装只需要几个文件。一般手机，终端等用的比较多</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:49 PM </p>\n</blockquote>\n"},{"title":"C++算法模板（上）","url":"http://code4fun.me/2018/01/11/C++算法模板 - 2/","content":"<pre><code>基础算法模板：\n\n1.高精算法：\n\n加法：\n\nwhile(i&lt;=a加数的位数|| i&lt;=b加数的位数)\n\n  {    c[i]=a[i]+b[i]+x;\n\n      x=c[i]/10;\n\n      c[i]%=10;\n\n      i++;\n\n}\n\n   注意：加法需要逆序储存，因为如果正序储存，那么当加数相加会超过数组的范围。\n\n减法：\n\n   While(lenc&lt;=lena||lenc&lt;=lenb)\n\n{\n\nIf(a[i]&lt;b[i])\n\n{\n\n  a[i]+=10;\n\n  a[i+1]--;\n\n}\n\nc[i]=a[i]-b[i];\n\ni++;\n}\n\n乘法：\n\nfor(i=1;i&lt;=lena;i++)\n\n{\n\n  x=0;\n\n  for(j=1;j&lt;=lenb；j++)\n\n{\n\nc[i+j-1]=a[i]*b[j]+x+c[i+j-1];\n\nx=c[i+j-1]/10;\n\nc[i+j-1]%10;\n}\n\nc[i+lenb]=x;\n\n}\n\nLenc=lena+lenb;\n\n2.排序\n\n&lt;1&gt;桶排序\n\n #include&lt;iostream&gt;\n\nusing namespace std;\n\nint a[10001];\n\nint n,k;\n\nint main()\n\n{\n\n   cin&gt;&gt;n;\n\n   for(int i=1;i&lt;=n;i++)\n\n   {\n\n          cin&gt;&gt;k;\n\n          a[k]++;\n\n   }\n\n   for(int i=1;i&lt;=10000;i++)\n\n   {\n\n          while(a[i]&gt;0)\n\n          {\n\n                   cout&lt;&lt;i&lt;&lt;&quot; &quot;;\n\n                   a[i]--;\n\n      }\n\n   }\n\n   return 0;\n\n}\n\n桶排序算法，复杂度为常数。特别快但是要注意空间。适当的时候用哈希的思想来解决。比如排序：1 4 100000000 7.一共就4个元素但是如果用正常的桶排序的话就要开一个100000001的数组，太费空间。不如就哈希一下。\n\n&lt;2&gt;快排\n\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nvoid qsort(int,int);\n\nint n;\n\nint a[1001];\n\nint main()\n\n{\n\n   cin&gt;&gt;n;\n\n   for(int i=1;i&lt;=n;i++)\n\n         cin&gt;&gt;a[i];\n\n    qsort(1,n);\n\n    for(int i=1;i&lt;=n;i++)\n\n    cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;\n\n    return 0;\n\n}\n\nvoid qsort(int l,int r)\n\n{\n\n   int i,j,mid,p;\n\n   i=1;\n\n   j=r;\n\n   mid=a[(l+r)/2];\n\n   do\n\n   {\n\n            while(a[i]&lt;mid) i++;\n\n            while(a[j]&gt;mid) j--;\n\n            if(i&lt;=j)\n\n            {\n\n                     p=a[i];\n\n                     a[i]=a[j];\n\n                     a[j]=p;\n\n                     i++;\n\n                     j--;\n\n            }\n\n   }while(i&lt;=j);\n\n   if(1&lt;j) qsort(l,j); //这里是一不是L\n\n   if(i&lt;r) qsort(i,r);\n\n}\n\n快排的思想在于首先是把数先正好顺序的排列一下。然后一个从头找，一个从找，当前面的大于中间值，后面的小于中间值。这两个交换。当然就有疑问当后面值交换过来比前面的值小怎么办。后面的两个if语句就可以解决这种情况。\n\n&lt;3&gt;归并排序\n\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nint a[101],r[101];\n\nvoid mergesort (int ,int);\n\nint main()\n\n{\n\n   int n,i;\n\n   cin&gt;&gt;n;\n\n   for(i=1;i&lt;=n;i++)\n\n    cin&gt;&gt;a[i];\n\n   mergesort(1,n);\n\n   for(i=1;i&lt;=n;i++)\n\n    cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;\n\n    return 0;    \n\n}\n\nvoid mergesort (int s,int t)\n\n{\n\n   int m,i,j,k;\n\n   if(s==t) return ;\n\n   m=(s+t)/2;\n\n   mergesort(s,m);\n\n   mergesort(m+1,t);\n\n   i=s;\n\n   j=m+1;\n\n   k=s;\n\n   while(i&lt;=m &amp;&amp; j&lt;=t)\n\n   {\n\n            if(a[i]&lt;=a[j])\n\n            {\n\n                     r[k]=a[i];\n\n                     i++;\n\n                     k++;\n\n            }\n\n            else\n\n            {\n\n                     r[k]=a[j];\n\n                     j++;\n\n                     k++;\n\n            }\n\n   }\n\n   while(i&lt;=m)\n\n   {\n\n            r[k]=a[i];\n\n            i++;\n\n            k++;\n\n   }\n\n   while(j&lt;=t)\n\n   {\n\n            r[k]=a[j];\n\n            j++;\n\n            k++;\n\n   }\n\n   for(i=s;i&lt;=t;i++) a[i]=r[i];\n\n}\n\n归并排序在于利用另一个数组进行排序。利用二分查找的思想来实现。一开始二分二分从第一个开始在一个范围里进行排序，使得在这一个区域里所有的数字以升序排列。返回这个序列给上一次调用，然后与上一层调用在以升序。以此类推到最后则调用结束。\n\n3.递推\n\n&lt;1&gt;斐波那契数列：\n\nF[x]=f[x-1]+f[x-2];\n\n边界条件：f[0]=0,f[1]=1;\n\n前几项数据：0,1,1,2,3,5,8,13,21……\n\n&lt;2&gt;汉罗塔问题：\n\n H[n]=2*H[n-1]+1;\n\n边界：H[1]=1;\n\n前几项数据：1,3,7,15,31,63……\n\n&lt;3&gt;平面分割问题：\n\nA[n]=A[n-1]+2*(n-1);\n\n边界：A[1]=1;\n\n前几项数据：1,3,7,13,21,31……\n\n&lt;4&gt;Catalan数\n\n\n\n&lt;5&gt;第二类Stirling数\n\n\n\n4.搜索与回溯\n\n int dfs(int k)\n\n{\n\n         for(int i=1;i&lt;=n;i++)\n\n         {\n\n                   if(符合要求 )\n\n                   {\n\n                            进行标记\n\n                            if(到达目的地)\n\n                            输出\n\n                            else\n\n                            dfs（）；\n\n                            恢复标记。\n\n                   }\n\n         }\n\n}\n\nint dfs(int k)\n\n{\n\n         if(到达目的地)\n\n                            输出\n\n         for(int i=1;i&lt;=n;i++)\n\n         {\n\n                   if(符合条件 )\n\n                   {\n\n                            保存标记\n\n                            dfs();\n\n                            取消标记\n\n                   }\n\n         }\n\n}\n\n5.贪心与分治\n\n贪心思想：贪心是局部最优解最后推算到全局最优解得过程对最终结果无影响则可以使用。必须给出严格的数学证明。\n\n分治思想：把一个大问题化解成多个小问题，然后在把问题的解合起来组成最后的解。例如归并排序。\n\n6.广度优先搜索\n\nint bfs()\n\n{\n\n         int head,tail;\n\n         head=0;tail=1;\n\n         while(head&lt;tail)\n\n         {\n\n                   head++\n\n                   for(int i=1;i&lt;=目标 ;i++)\n\n                            if(v[i]==0 &amp;&amp; map[a[head]][i]==0)\n\n                            {\n\n                                     tail++;\n\n                                     a[tail]=i;\n\n                                     b[tail]=head;\n\n                                     v[i]=1;\n\n                                     if(i==目标 )\n\n                                     {\n\n                                               输出解\n\n                                               head=tail;\n\n                                               break;\n\n                                     }}}}\n\n}\n\n7.动态规划\n\nfor(int i=1;i&lt;=目标 ;i++)\n\n         for(int j=1;j&lt;= 目标;j++)\n\n         for(int k=1;k&lt;=目标 ;k++)\n\n          f[j]=max(f[j],f[j-v[i]]+k*w[i]);\n\n          cout&lt;&lt;f[n]&lt;&lt;endl;\n\n0-1背包：注意为倒序\n\n完全背包：为正序\n\n多重背包：为倒序多个添加一个循环\n\n说实话对于动态规划的话，没有什么固定的算法，因为他只是一种思想，没错就是一种思想。所谓的动归，也是一种搜索的系列。只不过它的每一次搜索都会进行储存，但跟记忆化搜索不一样。比如说你有78元钱，我问你这78元钱有多少种组成方案？记忆化搜索一般跟递归搭配。思想不就是，首先从1开始，然后将搜索到的内容存到一个数组里，当再次调用时出来就ok了。而动归的思想在于，我78元钱我不知道怎么分，但是1块钱我知道块分。1块钱的组成方案不就是1张一块的。然后到2块钱，2张1块。以此类推，后一种阶段需要前一种阶段的解读。这样当我知道78元的方案，同时在76的方案数我也计算出来了。这样可以将大规模的数据进行压缩。当然每一次的选择要找最优的（并不是局部最优），例如：当我有abcde五个点，a可以到b，c，c可以到d，b也可以到d。而d可以到e。因为bc两个点都可以到c所以， 比较b，c两条路的长度，选择最优的，因为这样就可以与后面的决策无关。从而选出最优的一条路。这也是dijskra的单源最短路算法的思想。\\\n\n栈、队列\n\n关于栈的定义就是说，只能在一段进行插入或删除的特殊线性表。\n\n进栈：\n\n If(top&lt;=n)    //栈是否溢出？\n\n{\n\nTop++;\n\nS[top]=x;   //入栈\n\n}\n\n退栈：\n\n If(top&gt;=0)  //判断栈是否为空？\n\n {\n\n    X=s[top];\n\n    Top--;   //出栈；\n\n}\n\n队列是指在限定的一段进行插入，另一端进行删除的特殊线性表。\n\n常和BFS进行搭配。\n\n图论\n\n&lt;1&gt;有向图邻接矩阵存储：map[x][y]=z;\n\n无向图邻接矩阵储存：map[x][y]= map[y][x]=z;\n\nDouble memset(map,127,sizeof(map));\n\nInt  memset(map,0x7f,sizeof(map);\n\n&lt;2&gt;强连通分量：1à2à3à1\n\n在邻接矩阵中： 01102\n\n               00102\n\n               00022\n\n               00002\n\n上面的有向图邻接矩阵共有两个连通分量。后面有关于代码的实现。\n\n&lt;3&gt;邻接表储存\n\n#include&lt;iostream&gt;\n\n#define maxn 1001\n\nusing namespace std;\n\nstruct Edge\n\n{\n\n         int next;//下一个点；\n\n         int to;//这条边所到达的点；\n\n         int dis;//边的长度；\n\n}edge[maxn];\n\nint head[maxn],num,n,m,u,v,d;\n\nvoid add_edge(int from,int to,int dis)\n\n{\n\n         num++;\n\n         edge[num].next=head[from];\n\n         edge[num].to=to;\n\n         edge[num].dis=dis;\n\n         head[from]=num;\n\n}\n\nint main()\n\n{\n\n         num=0;\n\n         cin&gt;&gt;n&gt;&gt;m;\n\n         for(int i=1;i&lt;=m;i++)\n\n         {\n\n                   cin&gt;&gt;u&gt;&gt;v&gt;&gt;d;\n\n                   add_edge(u,v,d);\n\n         }\n\n         for(int i=head[i];i!=0;i=edge[i].next)\n\n         {\n\n                   //add 其他代码；\n\n         }\n\n         return 0;\n\n}\n\n本方法的储存方法比较费脑子，有一点逻辑思维。存储时为正序存储，读取时为逆序。\n\nNext\n\nTo\n\nDis\n\n0\n\n2\n\n6\n\n1\n\n3\n\n5\n\n2\n\n4\n\n11\n\nHead[from]=0\n\nHead[from]=1\n\nHead[from]=2\n\n读入的样例：1     2     6\n\n             1     3     5\n\n              1     4     11\n\n&lt;4&gt;图论的遍历\n\nDfs（）；从一个点开始，访问一个点，并把此点标记，递归访问下一个，并回朔一步。\n\n关于连通分量的代码：\n\nfor(int i=1;i&lt;=n;i++)\n\n                   if(v[i]==0)\n\n                   {\n\n                            dfs(i);             //bfs(i)枚举一个点进行访问，并标记。\n\n                            sum++;\n\n                   }\n\n&lt;4&gt;欧拉道路问题：\n\n定理1：存在欧拉路的条件：图是连通的，并且有2个奇点；\n\n定理2：存在欧拉回路的条件：图是连通的：有0个奇点；\n\n（ps：奇点是连接此点边数有奇数个。）\n\n算法模板：\n\n#include&lt;iostream&gt;\n\n#include&lt;cstring&gt;\n\n#define maxn 1001\n\nusing namespace std;\n\nint n,m,start,map[maxn][maxn],x,y,len,c[maxn],ans[maxn];\n\nvoid dfs (int i)\n\n{\n\n         for(int j=1;j&lt;=n;j++)\n\n         {\n\n                   if(map[i][j]==1)\n\n                   {\n\n                            map[i][j]=map[j][i]=0;\n\n                                dfs(j);\n\n                   }\n\n         }\n\n         len++;\n\n         ans[len]=i;\n\n}\n\nint main()\n\n{\n\n         memset(map,0,sizeof(map));\n\n         cin&gt;&gt;n&gt;&gt;m;\n\n         for(int i=1;i&lt;=m;i++)\n\n         {\n\n                   cin&gt;&gt;x&gt;&gt;y;\n\n                   map[x][y]=map[y][x]=1;\n\n                   c[x]++;\n\n                   c[y]++;\n\n         }\n\n\n\n         start=1;\n\n         for(int i=1;i&lt;=n;i++)\n\n          if(c[i]%2==1)\n\n            start=i;\n\n         len=0;\n\n         dfs(start);\n\n         for(int i=1;i&lt;=len;i++)\n\n          cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;;\n\n          return 0;\n\n}\n\n&lt;5&gt;哈密尔顿环\n\n算法模板：\n\n#include&lt;iostream&gt;\n\n#include&lt;cstring&gt;\n\n#define maxn 1001\n\nusing namespace std;\n\nint len,x,y,ans[maxn],map[maxn][maxn];\n\nint v[maxn],vis[maxn],num[maxn],n,m,start;\n\nvoid dfs (int last,int i)\n\n{\n\n         vis[i]=1;\n\n         v[i]=1;\n\n         len++;\n\n         ans[len]=i;\n\n         for(int j=1;j&lt;=num[i];j++)\n\n         {\n\n                   if(map[i][j]==start &amp;&amp; map[i][j]!=last)\n\n                   {\n\n                            ans[len+1]=start;\n\n                            for(int i=1;i&lt;=len+1;i++)\n\n                             cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;;\n\n                            break;\n\n                   }\n\n                   if(vis[map[i][j]]==0) dfs(i,map[i][j]);\n\n         }\n\n         len--;\n\n         vis[i]=0;\n\n}\n\nint main()\n\n{\n\n         cin&gt;&gt;n&gt;&gt;m;\n\n         for(int i=1;i&lt;=m;i++)\n\n         {\n\n                   cin&gt;&gt;x&gt;&gt;y;\n\n                   map[x][++num[x]]=y;\n\n                   map[y][++num[y]]=x;\n\n         }\n\n         for(start=1;start&lt;=n;start++)\n\n         {\n\n                   if(v[start]==0)\n\n                   {\n\n                            len=0;\n\n                            dfs(0,start);\n\n                   }\n\n         }\n\n         return 0;\n\n    }\n</code></pre><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:49 PM </p>\n</blockquote>\n"},{"title":"地图的匹配问题","url":"http://code4fun.me/2018/01/11/地图匹配理解/","content":"<p>在查找文献的过程中，发现地图匹配（map matching）主要是基于GPS信号等获取到的地理坐标信息和实际的地图信息来进行匹配，好像和我们的问题并不是一样的，所以我就没有查找这方面的，而是将其当作一个图像问题。（唐进君, 曹凯. 一种自适应轨迹曲线地图匹配算法<a href=\"\">J</a>. 測繪學報, 2008, 37(3): 308-315.）（Chen W, Li Z, Yu M, et al. An integrated map-match algorithm with position feedback and shape-based mismatch detection and correction<a href=\"\">J</a>. Journal of Intelligent Transportation Systems, 2008, 12(4): 168-175.）</p>\n<p>对于普通的图像问题，有两类相关的问题：图像匹配（image matching）和图像配准(image registration)。图像匹配是寻找与一幅图相似的图像（不对寻找到的图像做矫正）；而图像配准是寻找相似图像但是变形后的图像（需要做一些旋转之类的校正变换）。图像配准一般是指针对与同一个传感器在不同的时间、不同的视角或者不同的传感器所获取的图像进行叠加（或者说是融合）的过程，所以其必然会考虑图像的畸变以及对原始图像进行优化。其基本包括四个步骤（Zitova B, Flusser J. Image registration methods: a survey<a href=\"\">J</a>. Image and vision computing, 2003, 21(11): 977-1000.）：</p>\n<ul>\n<li>feature detection</li>\n<li>feature matching </li>\n<li>mapping function design</li>\n<li>image transformation and resampling</li>\n</ul>\n<p>对于前两个步骤，这是和图像匹配过程是相近的。由于我们的地图匹配问题，不需要配准的过程，所以下面主要叙述图像匹配方面的内容。</p>\n<p>图像匹配一般分为两类：基于灰度的匹配和基于特征的匹配，由于我们的问题中并不存在颜色特征，故只可以使用基于特征的匹配方法。特征方面，在地图匹配中，由于地图只有形状信息，故只考虑基于特征的匹配方法。当不考虑图形的颜色、纹理等问题后，我们相当于可以将一副图形抽象为一个形状(shape)，所以这个问题可以近似为形状匹配（Shape matching）</p>\n<h2 id=\"Shape-matching\"><a href=\"#Shape-matching\" class=\"headerlink\" title=\"Shape matching\"></a>Shape matching</h2><p>对于该问题可以将其拆分为两个方面，一个是图形的特征值部分（也即shape representation and description），另一个就是根据特征进行匹配的算法。</p>\n<p>对于图形的特征部分，传统的分类方法（Zhang D, Lu G. Review of shape representation and description techniques<a href=\"\">J</a>. Pattern recognition, 2004, 37(1): 1-19.）将特征分为基于轮廓（contour-based）和基于区域(region-based)两类，同时每一类中又根据是选取整体还是分段选取而分为structural 和 global 两类，其分类图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/14818178326192.jpg\" alt=\"\"></p>\n<p>随着越来越多的形状特征描述方法被提出，并且各种方法之间的融合也被提出，简单的按照获取特征的方法进行分类不再合适（例如对于矩-moments，即包括boundary moments也包括region moments如代数不变矩等）。于是参考文献（Yang M, Kpalma K, Ronsin J. A survey of shape feature extraction techniques<a href=\"\">J</a>. Pattern recognition, 2008: 43-90.）根据过程提出了下面的分类：</p>\n<p><img src=\"https://raw.githubusercontent.com/zhangzhishan/blogpics/dev/14818178491237.jpg\" alt=\"\"></p>\n<p>该文献详细介绍了各种shape 以及 shape feature 的表示方法并在最后总结了各种 feature 针对于不变性（旋转、平移、伸缩、仿射变换）和鲁棒性（噪声、遮挡、畸变）。可以作为一个重要的参考资料。由于，现在无法确定最终的地理轮廓样式，所以无法确定对于 feature 的最终旋转，不过在对基本表达公式分析可以发现应该大部分是可以使用的。</p>\n<p>借助上面的特征然后添加较为简单的代价函数就可以进行形状匹配，如（饶芮菱, 金雪峰, 鲁怀伟. 基于链码的二维碎片轮廓匹配算法<a href=\"\">J</a>. 計算技術與自動化, 2007, 26(2): 34-37.）（赵东保, 贺添, 张卡. 基于复数矩的形状轮廓描述与匹配方法<a href=\"\">J</a>. 四川大学学报: 工程科学版, 2011, 43(2): 109-115.）（朱延娟, 周来水, 张丽艳, 等. 基于 Hausdorff 距离的多尺度轮廓匹配算法<a href=\"\">J</a>. 中国机械工程, 2004, 15(17): 1553-1556.）（王琼, 袁建英, 李柏林. 一种融合特征点与轮廓信息的匹配算法<a href=\"\">J</a>. 计算机应用研究, 2014, 31(10): 3145-3147.）（Wang J, Bai X, You X, et al. Shape matching and classification using height functions<a href=\"\">J</a>. Pattern Recognition Letters, 2012, 33(2): 134-143.）（Hong B W, Soatto S. Shape matching using multiscale integral invariants<a href=\"\">J</a>. IEEE transactions on pattern analysis and machine intelligence, 2015, 37(1): 151-160.）。</p>\n<p>对于根据特征点来进行匹配的算法，我并没有找到很好的综述性质的文章，然后找到了两篇相关的文章</p>\n<p>Su Z, Wang Y, Shi R, et al. Optimal mass transport for shape matching and comparison<a href=\"\">J</a>. IEEE transactions on pattern analysis and machine intelligence, 2015, 37(11): 2246-2259.</p>\n<p>Hasanbelliu E, Giraldo L S, Principe J C. Information theoretic shape matching<a href=\"\">J</a>. IEEE transactions on pattern analysis and machine intelligence, 2014, 36(12): 2436-2451.</p>\n<p>对于上面两篇文章，现在还没有太看明白，另外就是感觉对于我们的问题，可能并不需要很复杂的匹配过程。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:48 PM </p>\n</blockquote>\n"},{"title":"面试内容整理--iOS","url":"http://code4fun.me/2018/01/11/面试内容整理--iOS/","content":"<h2 id=\"iOS方面\"><a href=\"#iOS方面\" class=\"headerlink\" title=\"iOS方面\"></a>iOS方面</h2><h3 id=\"有时间看一下唐巧的技术博客面试题目\"><a href=\"#有时间看一下唐巧的技术博客面试题目\" class=\"headerlink\" title=\"有时间看一下唐巧的技术博客面试题目\"></a>有时间看一下唐巧的技术博客面试题目</h3><h3 id=\"线程创建的方式\"><a href=\"#线程创建的方式\" class=\"headerlink\" title=\"线程创建的方式\"></a>线程创建的方式</h3><p>使用NSThread<br><a href=\"\">http://www.cnblogs.com/tonge/p/5038721.html</a></p>\n<h3 id=\"http-www-jianshu-com-p-b4e1e57fa137\"><a href=\"#http-www-jianshu-com-p-b4e1e57fa137\" class=\"headerlink\" title=\"http://www.jianshu.com/p/b4e1e57fa137\"></a><a href=\"\">http://www.jianshu.com/p/b4e1e57fa137</a></h3><h3 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h3><p>当一段代码被多个线程执行，执行后的结果和多个线程依次执行后的结果一致，那么这段代码就是线程安全的。<br>答案很明显：为了执行效率，大多数的时候不需要并行的执行一段代码，而加上锁，递归锁之类的东西，执行效率会降低很多。需要线程安全的时候，开发者自己维护就可以了。</p>\n<h3 id=\"线程同步锁\"><a href=\"#线程同步锁\" class=\"headerlink\" title=\"线程同步锁\"></a>线程同步锁</h3><h3 id=\"多线程创建方法\"><a href=\"#多线程创建方法\" class=\"headerlink\" title=\"多线程创建方法\"></a>多线程创建方法</h3><p>多线程   是一个应用程序内多个代码的执行路径，执行线程，同时在同一时间里执行不同的任务。<br>三种：<br>1、NSTread<br>相对最简单，需要自己管理线程的生命周期和线程同步（加锁会有一定的系统开销）<br>（1）直接创建线程并且自动运行线程<br>（2）先创建一个线程对象，然后手动运行线程，在运行线程操作之前可以设置线程的优先级等线程信息。<br>线程同步方法通过锁来实现，每个线程都只用一个锁，这个锁与一个特定的线程关联。用NSLock 或者NSCondition 锁定资源</p>\n<p>2、Cocoa NSOperation (NSOperation,NSOperationQueue)<br>NSOperation 两种方式<br>一  直接用定义好的子类 NSInvocationOperation   NSBlockOperation<br>后台建立一个线程<br>Queue队列中可以加入很多个operation 可以把它看做是一个线程池子，可以设置线程池中的线程数，即并发操作数。<br>默认是：-1，-1表示没有限制，同时运行队列中的全部操作。<br>二  继承NSOperation<br>把子类的对象放到NSOperationQueue队列中 ，一旦加入，就处理这个，直到操作完成，队列被释放。<br>3、GrandCentralDispatch:GCD<br>底层也是用线程实现，queue可以接受任务，先到先执行顺序来执行，也可以并发或串行执行。<br>同步或异步<br>优点多多：基于C，融入面向对象，Block,易用，性能上自动根据系统负载来增减线程数量，无需加锁。</p>\n<h3 id=\"内存泄露与内存溢出比较\"><a href=\"#内存泄露与内存溢出比较\" class=\"headerlink\" title=\"内存泄露与内存溢出比较\"></a>内存泄露与内存溢出比较</h3><p>内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。<br>内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。<br>memory leak会最终会导致out of memory！</p>\n<h3 id=\"检测内存泄露的方法\"><a href=\"#检测内存泄露的方法\" class=\"headerlink\" title=\"检测内存泄露的方法\"></a>检测内存泄露的方法</h3><p><a href=\"\">http://blog.csdn.net/lifengzhong/article/details/7739507</a></p>\n<h3 id=\"了解设计模式吗？为什么要有设计模式？考了一些具体的设计模式。你在实际项目中有用到哪些设计模式？\"><a href=\"#了解设计模式吗？为什么要有设计模式？考了一些具体的设计模式。你在实际项目中有用到哪些设计模式？\" class=\"headerlink\" title=\"了解设计模式吗？为什么要有设计模式？考了一些具体的设计模式。你在实际项目中有用到哪些设计模式？\"></a>了解设计模式吗？为什么要有设计模式？考了一些具体的设计模式。你在实际项目中有用到哪些设计模式？</h3><p>MVC<br>单例<br>工厂模式</p>\n<h3 id=\"响应者链是什么和原理；；移动应用安全。iOS性能调优。\"><a href=\"#响应者链是什么和原理；；移动应用安全。iOS性能调优。\" class=\"headerlink\" title=\"响应者链是什么和原理；；移动应用安全。iOS性能调优。\"></a>响应者链是什么和原理；；移动应用安全。iOS性能调优。</h3><h3 id=\"Core-Data、数据存储的内存，问了下闭包block和block在内存中位置，同函数指针的区别。\"><a href=\"#Core-Data、数据存储的内存，问了下闭包block和block在内存中位置，同函数指针的区别。\" class=\"headerlink\" title=\"Core Data、数据存储的内存，问了下闭包block和block在内存中位置，同函数指针的区别。\"></a>Core Data、数据存储的内存，问了下闭包block和block在内存中位置，同函数指针的区别。</h3><h3 id=\"如何理解MVC设计模式？\"><a href=\"#如何理解MVC设计模式？\" class=\"headerlink\" title=\"如何理解MVC设计模式？\"></a>如何理解MVC设计模式？</h3><p>MVC是一种架构设计，M表示数据模型，V表示视图，C表示控制器。<br>数据模型：负责存储、定义、操作数据。<br>视图：用来展示数据给用户，和用户进行操作交互。<br>控制器：它是M与V的协调者，控制器获取数据，将数据交给视图去展示。</p>\n<h3 id=\"MVC的优劣，如果设计松耦合的模块，组件化模块化\"><a href=\"#MVC的优劣，如果设计松耦合的模块，组件化模块化\" class=\"headerlink\" title=\"MVC的优劣，如果设计松耦合的模块，组件化模块化\"></a>MVC的优劣，如果设计松耦合的模块，组件化模块化</h3><p>MVC是一个架构，或者说是一个设计模式，它就是强制性使应用程序的输入，处理和输出分开。将一个应用程序分为三个部分：Model，View，Controller。<br>具体的话就是：<br>视图<br>　　视图就是负责跟用户交互的界面。一般就是由HTML，css元素组成的界面，当然现在还有一些像js，ajax，flex一些也都属于视图层。在视图层里没有真正的处理发生，之负责数据输出，并允许用户操纵的方式。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。<br>模型<br>Model代表一些应用数据和业务逻辑（一般通过通过javaBean，EJB之间实现）在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和javabean这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。<br>控制器<br>　　控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。</p>\n<p>这样强制性的分开之后会有很多的优点：<br>第一个：分工明确：使用MVC可以把数据库开发，程序业务逻辑开发，页面开发分开，每一层都具有相同的特征，方便以后的代码维护。它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。</p>\n<p>第二个：就是松耦合，视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。<br>这一点我感觉比较重要，像实际应用的时候，我们还会把model模块细分为：数据库抽象层，数据操作层，业务逻辑层。这些也都是出于一个送耦合的考虑，改动其中一部分，不会影响到另一部分。</p>\n<p>第三个：重用性高。像多个视图能够共享一个模型，不论你视图层是用flash界面或是wap界面，用一个模型就能处理他们。将数据和业务规则从表示层分开，就可以最大化从用代码。</p>\n<p>用简单的jsp servlet 和javabean来举个注册的例子来说的话：首先是视图层注册的jsp文件，用户填写完用户信息后，提交一个请求，这个请求同过配置文件找到相应的servlet，servlet就相当于控制器，根据不同的用户请求类型，进而调用不用的业务逻辑层进行处理。处理完成之后又将结构信息反馈给jsp文件也就是视图层文件。最最简单的mvc大体上就是这个流程了。</p>\n<p>不过MVC也有一定的缺点：<br>　MVC的缺点是由于它没有明确的定义，所以完全理解MVC并不是很容易。使用MVC需要精心的计划，由于它的内部原理比较复杂，所以需要花费一些时间去思考。<br>   你将不得不花费相当可观的时间去考虑如何将MVC运用到你的应用程序，同时由于模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难。每个构件在使用之前都需要经过彻底的测试。一旦你的构件经过了测试，你就可以毫无顾忌的重用它们了。<br>　　根据开发者经验，由于开发者将一个应用程序分成了三个部件，所以使用MVC同时也意味着你将要管理比以前更多的文件，这一点是显而易见的。这样好像我们的工作量增加了，但是请记住这比起它所能带给我们的好处是不值一提。<br>　　MVC并不适合小型甚至中等规模的应用程序，花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失。<br>   总之，不要为了MVC而MVC就行了。</p>\n<h3 id=\"iOS-runtime\"><a href=\"#iOS-runtime\" class=\"headerlink\" title=\"iOS runtime\"></a>iOS runtime</h3><h3 id=\"对于block的看法，\"><a href=\"#对于block的看法，\" class=\"headerlink\" title=\"对于block的看法，\"></a>对于block的看法，</h3><h3 id=\"简述类目优缺点，如果覆盖本类或者父类的方法会出现什么问题？\"><a href=\"#简述类目优缺点，如果覆盖本类或者父类的方法会出现什么问题？\" class=\"headerlink\" title=\"简述类目优缺点，如果覆盖本类或者父类的方法会出现什么问题？\"></a>简述类目优缺点，如果覆盖本类或者父类的方法会出现什么问题？</h3><p>优点：不需要通过增加子类而增加现有类的行为（方法），且类目中的方法与原始类方法基本没有区别。<br>缺点：无法向类目添加实例变量。覆盖原始类方法后，原始类的方法没办法调用。</p>\n<h3 id=\"简述内存管理基本原则？\"><a href=\"#简述内存管理基本原则？\" class=\"headerlink\" title=\"简述内存管理基本原则？\"></a>简述内存管理基本原则？</h3><p>如果使用alloc、copy（mutableCopy）或者retain一个对象时，你就有义务向它发送一条release或autorelease消息。其他方法创建的对象，不需要由你来管理内存。</p>\n<h3 id=\"什么是ARC？\"><a href=\"#什么是ARC？\" class=\"headerlink\" title=\"什么是ARC？\"></a>什么是ARC？</h3><p>ARC是automatic reference counting自动引用计数，在程序编译时自动加入retain/release。在对象被创建时retain count+1，在对象被release时count-1，当count=0时，销毁对象。程序中加入autoreleasepool对象会由系统自动加上autorelease方法，如果该对象引用计数为0，则销毁。那么ARC是为了解决MRC手动管理内存存在的一些而诞生的。<br>MRC下内存管理的缺点：<br>1）释放一个堆内存时，首先要确定指向这个堆空间的指针都被release了。(避免提前释放)<br>2）释放指针指向的堆空间，首先要确定哪些指向同一个堆，这些指针只能释放一次。(避免释放多次，造成内存泄露)<br>3）模块化操作时，对象可能被多个模块创建和使用，不能确定最后由谁释放。<br>4）多线程操作时，不确定哪个线程最后使用完毕。<br>虽然ARC给我们编程带来的很多好多，但也可能出现内存泄露。如下面两种情况：<br>1）循环参照：A有个属性参照B，B有个属性参照A，如果都是strong参照的话，两个对象都无法释放。<br>2）死循环：如果有个ViewController中有无限循环，也会导致即使ViewController对应的view消失了，ViewController也不能释放。</p>\n<h3 id=\"ARC有什么特点？\"><a href=\"#ARC有什么特点？\" class=\"headerlink\" title=\"ARC有什么特点？\"></a>ARC有什么特点？</h3><p>ARC是编译器特性，iOS5.0新添加的特性，使用ARC开发者不需要再retain、release、autorelease，因为编译器会在合适的地方自动插入retain、release。<br>ARC不会因少release而导致内存泄漏，过度使用release导致程序崩溃，<br>ARC可以产生更简洁的代码和更健壮的应用。</p>\n<h3 id=\"什么是ARC技术？与GC是否相同？\"><a href=\"#什么是ARC技术？与GC是否相同？\" class=\"headerlink\" title=\"什么是ARC技术？与GC是否相同？\"></a>什么是ARC技术？与GC是否相同？</h3><p>ARC是Automatic Reference Counting的简称，我们称之为自动引用计数，是iOS5.0之后推出的内存管理的新特性。本质上还是使用引用计数来管理对象，只是我们在编写代码时，不需要向对象发送release或autorelease方法，也不可以调用dealloc方法，编译器会在合适的位置自动给用户生成release（autorelease）消息。GC是Garbage Collection，内存垃圾回收机制，ARC比GC性能好。</p>\n<h3 id=\"深、浅复制的基本概念以及区别？\"><a href=\"#深、浅复制的基本概念以及区别？\" class=\"headerlink\" title=\"深、浅复制的基本概念以及区别？\"></a>深、浅复制的基本概念以及区别？</h3><p>浅复制：只复制对象本身，不对里面的属性复制。<br>深复制：不仅复制对象本身，对象持有的属性对象也做复制。</p>\n<h3 id=\"用户自定义了一个对象，如何实现拷贝（可变和不可变拷贝）？\"><a href=\"#用户自定义了一个对象，如何实现拷贝（可变和不可变拷贝）？\" class=\"headerlink\" title=\"用户自定义了一个对象，如何实现拷贝（可变和不可变拷贝）？\"></a>用户自定义了一个对象，如何实现拷贝（可变和不可变拷贝）？</h3><p>必须实现copying和mutableCopying协议，表示返回一个不可变和可变的对象。否则，程序将会出现异常。</p>\n<h3 id=\"定义属性时，什么时候用assign、retain、copy和nonatomic？\"><a href=\"#定义属性时，什么时候用assign、retain、copy和nonatomic？\" class=\"headerlink\" title=\"定义属性时，什么时候用assign、retain、copy和nonatomic？\"></a>定义属性时，什么时候用assign、retain、copy和nonatomic？</h3><p>assign：普通赋值，一般常用于基本数据类型，常见委托设计模式，以此来防止循环引用。<br>retain：保留计数，获得了对象的所有权。引用计数在原有基础上加1。<br>copy：用来复制对象，一般字符串使用，Foundation中的不可变对象使用，效果相当于retain，只是引用计数加1。<br>nonatomic：非原子性访问，不加同步，多线程并发访问会提高性能。</p>\n<h3 id=\"strong和weak，-unsafe-unretained与weak的区别？\"><a href=\"#strong和weak，-unsafe-unretained与weak的区别？\" class=\"headerlink\" title=\"strong和weak，_unsafe_unretained与weak的区别？\"></a>strong和weak，<code>_unsafe_unretained</code>与weak的区别？</h3><p>strong：强引用，在ARC中告诉编译器帮助我们自动插入retain。<br>weak：弱引用，是普通赋值，相当于手动管理内存的assign。<br><code>_unsafe_unretained</code>：与weak功能一致，区别在于当指向的对象销毁后，weak会将变量置为nil，防止调用野指针。</p>\n<h3 id=\"ARC存在内存泄露吗？\"><a href=\"#ARC存在内存泄露吗？\" class=\"headerlink\" title=\"ARC存在内存泄露吗？\"></a>ARC存在内存泄露吗？</h3><p>ARC中如果内存管理不当的话，同样会存在内存泄露。例如，ARC中也会循环引用导致内存泄露；Objective-C对象与CoreFoundation类之间桥接时，管理不当也会产生内存泄露。</p>\n<h3 id=\"当我们释放对象时，为什么需要调用super-dealloc方法？\"><a href=\"#当我们释放对象时，为什么需要调用super-dealloc方法？\" class=\"headerlink\" title=\"当我们释放对象时，为什么需要调用super dealloc方法？\"></a>当我们释放对象时，为什么需要调用<a href=\"\">super dealloc</a>方法？</h3><p>子类是继承自父类，那么子类中有一些实例变量（对象），是继承自父类的，因此，我们需要调用父类方法，将父类所拥有的实例进行释放。</p>\n<h3 id=\"自动释放池是什么，如何工作？\"><a href=\"#自动释放池是什么，如何工作？\" class=\"headerlink\" title=\"自动释放池是什么，如何工作？\"></a>自动释放池是什么，如何工作？</h3><p>自动释放池是NSAutorelease类的一个实例，当向一个对象发送autorelease消息时，该对象会自动入池，待池销毁时，将会向池中所有对象发送一条release消息，释放对象。</p>\n<h3 id=\"为什么delegate（代理）属性都是assign而不是retain的？\"><a href=\"#为什么delegate（代理）属性都是assign而不是retain的？\" class=\"headerlink\" title=\"为什么delegate（代理）属性都是assign而不是retain的？\"></a>为什么delegate（代理）属性都是assign而不是retain的？</h3><p>防止循环引用，以至对象无法得到正确的释放。</p>\n<h3 id=\"iOS开发中数据持久性有哪几种？\"><a href=\"#iOS开发中数据持久性有哪几种？\" class=\"headerlink\" title=\"iOS开发中数据持久性有哪几种？\"></a>iOS开发中数据持久性有哪几种？</h3><p>plist文件写入，对象归档，sqlite3数据库，CoreData。</p>\n<h3 id=\"什么是KVC和KVO？它们之间的关系是什么？\"><a href=\"#什么是KVC和KVO？它们之间的关系是什么？\" class=\"headerlink\" title=\"什么是KVC和KVO？它们之间的关系是什么？\"></a>什么是KVC和KVO？它们之间的关系是什么？</h3><p>KVC：键值编码，是一种间接访问对象实例变量的机制，该机制可以不通过存取方法就可以访问对象的实例变量。<br>KVO：键值观察，是一种能使得对象获取到其他对象属性变化的通知机制。<br>实现KVO键值观察模式，被观察的对象必须使用KVC键值编码来修改它的实例变量，这样才能被观察者观察到。因此，KVC是KVO的基础或者说KVO的实现是建立在KVC的基础之上的。</p>\n<h3 id=\"简述常见的设计模式？\"><a href=\"#简述常见的设计模式？\" class=\"headerlink\" title=\"简述常见的设计模式？\"></a>简述常见的设计模式？</h3><p>单例模式、代理设计、观察者（通知）、工厂方法、模板方法。</p>\n<h3 id=\"内存管理在dealloc方法中用release方法与self-xx-nil哪个好？\"><a href=\"#内存管理在dealloc方法中用release方法与self-xx-nil哪个好？\" class=\"headerlink\" title=\"内存管理在dealloc方法中用release方法与self.xx=nil哪个好？\"></a>内存管理在dealloc方法中用release方法与self.xx=nil哪个好？</h3><p>使用self.xx=nil更好，因为先调用了release方法，而且还将变量设置为nil，这样就更安全的释放对象，防止野指针调用。</p>\n<h3 id=\"Objective-C语言的优缺点？\"><a href=\"#Objective-C语言的优缺点？\" class=\"headerlink\" title=\"Objective-C语言的优缺点？\"></a>Objective-C语言的优缺点？</h3><p>优点：类目、动态识别、支持C语言、Objective-C与C++可以混编。<br>缺点：不支持命名空间、不支持运算符重载、不支持多重继承。</p>\n<h3 id=\"代理delegate、通知Notification与block的使用区别？\"><a href=\"#代理delegate、通知Notification与block的使用区别？\" class=\"headerlink\" title=\"代理delegate、通知Notification与block的使用区别？\"></a>代理delegate、通知Notification与block的使用区别？</h3><p>delegate和block一般是用于两个对象一对一之间的通信交互，delegate需要定义协议方法，代理对象实现协议方法，并且需要建立代理关系才可以实现通信。block更加简洁，不需要定义繁琐的协议方法，但是如果通信事件比较多的话，建议使用delegate。<br>Notification主要用于一对多情况下通信，而且，通信对象之间不需要建立关系，但是使用通知，代码可读性差。</p>\n<h3 id=\"控制器ViewController的loadView、viewDidLoad、viewWillApear和viewDidUnload分别是在什么时候调用？\"><a href=\"#控制器ViewController的loadView、viewDidLoad、viewWillApear和viewDidUnload分别是在什么时候调用？\" class=\"headerlink\" title=\"控制器ViewController的loadView、viewDidLoad、viewWillApear和viewDidUnload分别是在什么时候调用？\"></a>控制器ViewController的loadView、viewDidLoad、viewWillApear和viewDidUnload分别是在什么时候调用？</h3><p>loadView：当控制器的根视图view为空，且此view被访问时调用。<br>viewDidLoad：loadView调用之后被调用。<br>viewWillApear：当控制器根视图view被添加到父视图上时调用。<br>viewDidUnload：iOS6.0之前，当内存警告时，先卸载视图，再调用<br>viewDidUnload来释放内存。</p>\n<h3 id=\"synthesize和-dynamic的区别？\"><a href=\"#synthesize和-dynamic的区别？\" class=\"headerlink\" title=\"@synthesize和@dynamic的区别？\"></a>@synthesize和@dynamic的区别？</h3><p>@synthesize：系统自动生成getter和setter属性声明。<br>@dynamic：告诉编译器，属性的获取与赋值方法由用户自己实现，不自动生成。</p>\n<h3 id=\"事件响应者链的概念？\"><a href=\"#事件响应者链的概念？\" class=\"headerlink\" title=\"事件响应者链的概念？\"></a>事件响应者链的概念？</h3><p>响应者链表示一系列的响应者对象。事件被交由第一响应者对象处理，如果第一响应者不处理，事件被沿着响应者链向上传递，交给下一个响应者。一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件交由它处理，如果它不处理，事件会被传递给它的视图控制器对象（如果存在），然后是它的父视图对象（如果存在），以此类推，直到顶层视图。接下来会沿着顶层视图到窗口（UIWindow对象），再到程序（UIApplication对象）。如果整个过程都没有响应这个事件，该事件被丢弃。一般情况下，在响应者链中只要有对象处理事件，事件就停止传递。但有时候可以在视图的响应方法中根据一些条件判断来决定是否需要继续传递事件。</p>\n<h3 id=\"什么是动态绑定（多态）？\"><a href=\"#什么是动态绑定（多态）？\" class=\"headerlink\" title=\"什么是动态绑定（多态）？\"></a>什么是动态绑定（多态）？</h3><p>动态绑定是面向对象特性之一多态的体现，声明一个变量，在运行的时候可以绑定不同的对象，比如在方法的参数中声明这样一个变量<code>UIView *view</code>，运行的时候，我们可以根据不同的应用场景给view变量传入不同的对象，可以传递一个UIButton对象，也可以传入UIImageView对象。</p>\n<h3 id=\"如何理解delegate？\"><a href=\"#如何理解delegate？\" class=\"headerlink\" title=\"如何理解delegate？\"></a>如何理解delegate？</h3><p>delegate，又称为委托或代理，它是一种设计模式。delegate主要用于两个对象之间的通信交互，并且解除两个通信对象的耦合性，iOS中大量使用了delegate设计，主要用于视图与使用对象之间的通信交互。</p>\n<h3 id=\"block与函数有何异同？block有何优点？\"><a href=\"#block与函数有何异同？block有何优点？\" class=\"headerlink\" title=\"block与函数有何异同？block有何优点？\"></a>block与函数有何异同？block有何优点？</h3><p>1）block类似于C里面的函数指针，都可以作为参数进行传递，用于回调。但是block的实现可以定义在方法中，函数则不可以。<br>2）block语法简洁，可以在方法中定义实现，这样可以访问方法中的局部变量，使代码更加的紧凑，结构化。</p>\n<h3 id=\"app的内存和性能优化相关的…-我扯了下内存出问题的原因是可能内存泄露或溢出…，然后举了几个例子；接着解决方法分别从布局优化、系统优化、代码优化，还有使用一些工具监测等方面扯了一大堆\"><a href=\"#app的内存和性能优化相关的…-我扯了下内存出问题的原因是可能内存泄露或溢出…，然后举了几个例子；接着解决方法分别从布局优化、系统优化、代码优化，还有使用一些工具监测等方面扯了一大堆\" class=\"headerlink\" title=\"app的内存和性能优化相关的…(我扯了下内存出问题的原因是可能内存泄露或溢出…，然后举了几个例子；接着解决方法分别从布局优化、系统优化、代码优化，还有使用一些工具监测等方面扯了一大堆)\"></a>app的内存和性能优化相关的…(我扯了下内存出问题的原因是可能内存泄露或溢出…，然后举了几个例子；接着解决方法分别从布局优化、系统优化、代码优化，还有使用一些工具监测等方面扯了一大堆)</h3><h3 id=\"Android发送网络请求的过程？\"><a href=\"#Android发送网络请求的过程？\" class=\"headerlink\" title=\"Android发送网络请求的过程？\"></a>Android发送网络请求的过程？</h3><h3 id=\"Android的Dalvik虚拟机与Java虚拟机之间的差异？\"><a href=\"#Android的Dalvik虚拟机与Java虚拟机之间的差异？\" class=\"headerlink\" title=\"Android的Dalvik虚拟机与Java虚拟机之间的差异？\"></a>Android的Dalvik虚拟机与Java虚拟机之间的差异？</h3><h3 id=\"Android内存回收机制？和Java比？\"><a href=\"#Android内存回收机制？和Java比？\" class=\"headerlink\" title=\"Android内存回收机制？和Java比？\"></a>Android内存回收机制？和Java比？</h3><h3 id=\"是如何解决OOM的？\"><a href=\"#是如何解决OOM的？\" class=\"headerlink\" title=\"是如何解决OOM的？\"></a>是如何解决OOM的？</h3><h3 id=\"ListView的优化？\"><a href=\"#ListView的优化？\" class=\"headerlink\" title=\"ListView的优化？\"></a>ListView的优化？</h3><h3 id=\"平时如何处理抛出的异常？\"><a href=\"#平时如何处理抛出的异常？\" class=\"headerlink\" title=\"平时如何处理抛出的异常？\"></a>平时如何处理抛出的异常？</h3><h3 id=\"异常处理？\"><a href=\"#异常处理？\" class=\"headerlink\" title=\"异常处理？\"></a>异常处理？</h3><h3 id=\"当用户用App的时候发生异常咋办？\"><a href=\"#当用户用App的时候发生异常咋办？\" class=\"headerlink\" title=\"当用户用App的时候发生异常咋办？\"></a>当用户用App的时候发生异常咋办？</h3><h3 id=\"对异步的理解？-——因为单线程怎么怎么样，才用到多线程，blabla神马！你把异步看作是多线程？对啊，怎么了？。。。\"><a href=\"#对异步的理解？-——因为单线程怎么怎么样，才用到多线程，blabla神马！你把异步看作是多线程？对啊，怎么了？。。。\" class=\"headerlink\" title=\"对异步的理解？　　　　　　　　　//——因为单线程怎么怎么样，才用到多线程，blabla神马！你把异步看作是多线程？对啊，怎么了？。。。\"></a>对异步的理解？　　　　　　　　　//——因为单线程怎么怎么样，才用到多线程，blabla神马！你把异步看作是多线程？对啊，怎么了？。。。</h3><h3 id=\"Cache缓存机制？-——LruCache缓存啦弱引用啦\"><a href=\"#Cache缓存机制？-——LruCache缓存啦弱引用啦\" class=\"headerlink\" title=\"Cache缓存机制？　　　　　　　//——LruCache缓存啦弱引用啦\"></a>Cache缓存机制？　　　　　　　//——LruCache缓存啦弱引用啦</h3><h3 id=\"网络怎么异步加载？-——我对服务端交互不熟悉……（唉，C-和网络编程都是我的硬伤啊）\"><a href=\"#网络怎么异步加载？-——我对服务端交互不熟悉……（唉，C-和网络编程都是我的硬伤啊）\" class=\"headerlink\" title=\"网络怎么异步加载？　　　　　　//——我对服务端交互不熟悉……（唉，C++和网络编程都是我的硬伤啊）\"></a>网络怎么异步加载？　　　　　　//——我对服务端交互不熟悉……（唉，C++和网络编程都是我的硬伤啊）</h3><h3 id=\"谈谈对线程池的理解？-——blabla有没有自定义过线程池？噗…\"><a href=\"#谈谈对线程池的理解？-——blabla有没有自定义过线程池？噗…\" class=\"headerlink\" title=\"谈谈对线程池的理解？　　　　　//——blabla有没有自定义过线程池？噗…\"></a>谈谈对线程池的理解？　　　　　//——blabla有没有自定义过线程池？噗…</h3><p>• 　　我队列有100条下载线程，线程池是510个，应该怎么调度？　　//——blabla回去再看看这方面的知识吧。噗</p>\n<h3 id=\"网络编程一定要加强！\"><a href=\"#网络编程一定要加强！\" class=\"headerlink\" title=\"网络编程一定要加强！\"></a>网络编程一定要加强！</h3><h3 id=\"异步编程一定要加强！\"><a href=\"#异步编程一定要加强！\" class=\"headerlink\" title=\"异步编程一定要加强！\"></a>异步编程一定要加强！</h3><h3 id=\"Android常用的布局\"><a href=\"#Android常用的布局\" class=\"headerlink\" title=\"Android常用的布局\"></a>Android常用的布局</h3><h3 id=\"进程间如何通讯\"><a href=\"#进程间如何通讯\" class=\"headerlink\" title=\"进程间如何通讯\"></a>进程间如何通讯</h3><h3 id=\"java有没有内存泄露\"><a href=\"#java有没有内存泄露\" class=\"headerlink\" title=\"java有没有内存泄露\"></a>java有没有内存泄露</h3><h3 id=\"举一个内存泄露的例子\"><a href=\"#举一个内存泄露的例子\" class=\"headerlink\" title=\"举一个内存泄露的例子\"></a>举一个内存泄露的例子</h3><h3 id=\"匿名内部类能不能使用外部类变量-这个答错，我理解成局部变量了\"><a href=\"#匿名内部类能不能使用外部类变量-这个答错，我理解成局部变量了\" class=\"headerlink\" title=\"匿名内部类能不能使用外部类变量(这个答错，我理解成局部变量了)\"></a>匿名内部类能不能使用外部类变量(这个答错，我理解成局部变量了)</h3><h3 id=\"数据库升级怎么解决\"><a href=\"#数据库升级怎么解决\" class=\"headerlink\" title=\"数据库升级怎么解决\"></a>数据库升级怎么解决</h3><h3 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h3><h3 id=\"用过什么第三方图片加载库\"><a href=\"#用过什么第三方图片加载库\" class=\"headerlink\" title=\"用过什么第三方图片加载库\"></a>用过什么第三方图片加载库</h3><h3 id=\"CocoaTouch框架？\"><a href=\"#CocoaTouch框架？\" class=\"headerlink\" title=\"CocoaTouch框架？\"></a>CocoaTouch框架？</h3><p>UIKit、Foundation、CoreGraphic、CoreAnimation<br>1）音频和视频：Core Audio、OpenAL、Media Library、AV Foundation<br>2）数据管理：Core Data、SQLite<br>3）图形和动画：Core Animation、OpenGL ES、Quartz 2D、Core Graphic<br>4）用户应用：Address Book、Core Location、Map Kit、Store Kit</p>\n<h3 id=\"Objective-C中有无多重继承？如何实现多重继承？\"><a href=\"#Objective-C中有无多重继承？如何实现多重继承？\" class=\"headerlink\" title=\"Objective-C中有无多重继承？如何实现多重继承？\"></a>Objective-C中有无多重继承？如何实现多重继承？</h3><p>Objective-C是没有多重继承的。<br>Cocoa中所有的类都是NSObject的子类，多继承在这里是用protocol委托代理来实现的。<br>面向对象语言大部分都是单继承，例如：Java、C#。<br>C++支持多继承。</p>\n<h3 id=\"什么是类目与延展？\"><a href=\"#什么是类目与延展？\" class=\"headerlink\" title=\"什么是类目与延展？\"></a>什么是类目与延展？</h3><p>类目：为已知的类增加新的方法。<br>延展：通知在本类的定义里使用类目来声明私有方法。</p>\n<h3 id=\"在一个对象的方法里self-name-”object”和name-”object”有什么不同？\"><a href=\"#在一个对象的方法里self-name-”object”和name-”object”有什么不同？\" class=\"headerlink\" title=\"在一个对象的方法里self.name=”object”和name=”object”有什么不同？\"></a>在一个对象的方法里self.name=”object”和name=”object”有什么不同？</h3><p>前者调用的是设置器方法，后者是普通赋值。</p>\n<h3 id=\"单例设计模式的实现\"><a href=\"#单例设计模式的实现\" class=\"headerlink\" title=\"单例设计模式的实现\"></a>单例设计模式的实现</h3><pre><code>static File \n*instance = nil;\n@implementation File\n//获取单例的方法\n+(id)shareInstance \n{\n@synthesize (self) \n{\nif(instance == nil) \n{\ninstance \n= [[File alloc] init];\n}\n}\nreturn instance;\n}\n</code></pre><p>//覆写allocWithZone、copyWithZone、retain、release和autorelease方法，目的是限制这个类只创建一个对象</p>\n<h3 id=\"为什么使用单例设计？\"><a href=\"#为什么使用单例设计？\" class=\"headerlink\" title=\"为什么使用单例设计？\"></a>为什么使用单例设计？</h3><p>1）单例设计是用来限制一个类只能创建一个对象，那么此对象中的属性可以存储全局共享的数据，所有的类都可以访问、设置此单例对象中的属性数据。<br>2）如果一个类创建的时候非常的耗费性能，那么此类如果能满足要求，可以设置为单例节约性能。</p>\n<h3 id=\"层CALayer和UIView的区别是什么？\"><a href=\"#层CALayer和UIView的区别是什么？\" class=\"headerlink\" title=\"层CALayer和UIView的区别是什么？\"></a>层CALayer和UIView的区别是什么？</h3><p>两者最大的区别是，图层不会直接渲染到屏幕上。UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它，它本身是由CoreAnimation来实现的，它真正绘图的部分是由一个CALayer类来管理的。UIView本身更像是一个CALayer的管理器。一个UIView上可以有多个CALayer，每个CALayer显示一种东西，增强UIView的展现能力。</p>\n<h3 id=\"什么是GCD？\"><a href=\"#什么是GCD？\" class=\"headerlink\" title=\"什么是GCD？\"></a>什么是GCD？</h3><p>GCD是Apple开发的一个多核编程的较新的解决方法。在Mac OS X 10.6雪豹中首次推出，并引入到iOS4.0。GCD是一个替代诸如NSThread等技术的很高效和强大的技术。GCD完全可以处理诸如数据锁定和资源泄漏等复杂的异步编程问题。</p>\n<h3 id=\"frame和bounds的区别？\"><a href=\"#frame和bounds的区别？\" class=\"headerlink\" title=\"frame和bounds的区别？\"></a>frame和bounds的区别？</h3><p>frame指的是：该view在父view坐标系统中的位置大小（参照点是父视图的坐标系统）。<br>bounds指的是：该view在本身坐标系统中的位置和大小（参照点是本身的坐标系统）。</p>\n<h3 id=\"控制器的xib是怎么加载的？\"><a href=\"#控制器的xib是怎么加载的？\" class=\"headerlink\" title=\"控制器的xib是怎么加载的？\"></a>控制器的xib是怎么加载的？</h3><p>当UIViewController的loadView被调用时，在此方法中，通过NSBundle加载xib，先通过控制器的类名作为xib的文件名加载此xib文件。如果找到此xib文件，则加载为view对象作为控制器的根视图，如果没有xib文件，则通过alloc创建一个view对象作为根视图。</p>\n<h3 id=\"控制器如何处理系统内存不足警告？\"><a href=\"#控制器如何处理系统内存不足警告？\" class=\"headerlink\" title=\"控制器如何处理系统内存不足警告？\"></a>控制器如何处理系统内存不足警告？</h3><p>内存不足时，系统会调用控制器didReceiveMemoryWaring方法通知控制器内存不足。iOS6.0与6.0之前的处理方式不一样。<br>1）iOS6.0之前：调用didReceiveMemoryWaring后，将self.view设置为nil，并且再调用viewDidUnload方法，在此方法中我们应该释放子视图。<br>2）iOS6.0之后：调用didReceiveMemoryWaring后，不再调用viewDidUnload方法，则应该在didReceiveMemoryWaring方法中手动将self.view=nil，并且释放子视图。</p>\n<h2 id=\"iOS中对象间有哪些通信方式？\"><a href=\"#iOS中对象间有哪些通信方式？\" class=\"headerlink\" title=\"iOS中对象间有哪些通信方式？\"></a>iOS中对象间有哪些通信方式？</h2><p>代理delegate、block、通知和KVO。</p>\n<h3 id=\"block在内存管理上的特点？需要注意循环引用，如何解决循环引用？\"><a href=\"#block在内存管理上的特点？需要注意循环引用，如何解决循环引用？\" class=\"headerlink\" title=\"block在内存管理上的特点？需要注意循环引用，如何解决循环引用？\"></a>block在内存管理上的特点？需要注意循环引用，如何解决循环引用？</h3><p>1）block中使用了局部对象，则会将此对象retain，引用了当前对象的属性或者方法，则会将当前对象retain。<br>2）解决循环引用：将当前对象赋值给一个局部变量，并且使用<code>__block</code>关键字修饰该局部变量，使用该变量访问当前对象的属性和方法。</p>\n<h3 id=\"Objective-C中有线程池（线程队列）吗？NSOperationQueue是如何管理线程的？\"><a href=\"#Objective-C中有线程池（线程队列）吗？NSOperationQueue是如何管理线程的？\" class=\"headerlink\" title=\"Objective-C中有线程池（线程队列）吗？NSOperationQueue是如何管理线程的？\"></a>Objective-C中有线程池（线程队列）吗？NSOperationQueue是如何管理线程的？</h3><p>NSOperationQueue是Objective-C的线程池，线程池中可以存放多个线程。<br>NSOperationQueue可以管理线程的并发数，还可以管理线程间的优先级。</p>\n<h3 id=\"timer的间隔周期准吗？为什么？怎样实现一个精准的timer？\"><a href=\"#timer的间隔周期准吗？为什么？怎样实现一个精准的timer？\" class=\"headerlink\" title=\"timer的间隔周期准吗？为什么？怎样实现一个精准的timer？\"></a>timer的间隔周期准吗？为什么？怎样实现一个精准的timer？</h3><p>定时器timer一般都是准确的，但是当主线程有些时候难免会出现堵塞情况，这样就有可能导致定时器timer会延迟从而不准确。我们可以开发一个多线程，在此多线程上运行定时器，这样多线程只运行定时器，不会因堵塞而导致误差。</p>\n<h3 id=\"tableView是如何复用的？\"><a href=\"#tableView是如何复用的？\" class=\"headerlink\" title=\"tableView是如何复用的？\"></a>tableView是如何复用的？</h3><p>如果屏幕上能显示10个单元格，则tableView只会创建11个单元格，也就是n+1，当滑到第12个单元格时就会复用第1个单元格对象。tableView中有个单元格池的概念，tableView调用协议方法获取单元格时，先从池子中查找是否有可复用的单元格，如果有则复用，如果没有则创建一个单元格对象。</p>\n<h3 id=\"如何优化tableView的滑动速度？\"><a href=\"#如何优化tableView的滑动速度？\" class=\"headerlink\" title=\"如何优化tableView的滑动速度？\"></a>如何优化tableView的滑动速度？</h3><p>1）复用单元格。<br>2）使用不透明的视图，单元格中尽量少使用动画。<br>3）图片加载使用异步加载，并且设置图片加载的并发数。<br>4）滑动时不加载图片，停止滑动开始加载。<br>5）文字、图片可直接drawInRect绘制。<br>6）如非必要，减少reloadData全部cell，只reloadRowsAtIndexPaths。<br>7）如果cell是动态行高度，计算出高度后缓存。<br>8）cell高度固定的话直接用cell.rowHeight设置高度。</p>\n<h3 id=\"谈谈对Runloop的理解？\"><a href=\"#谈谈对Runloop的理解？\" class=\"headerlink\" title=\"谈谈对Runloop的理解？\"></a>谈谈对Runloop的理解？</h3><p>Run loops是线程相关的基础框架的一部分。一个run loop就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。使用run loop的目的是让你的线程在有工作的时候忙于工作，而没有工作的时候处于休眠状态。</p>\n<h3 id=\"如何调用drawRect方法与layoutSubView方法？这两个方法的作用？\"><a href=\"#如何调用drawRect方法与layoutSubView方法？这两个方法的作用？\" class=\"headerlink\" title=\"如何调用drawRect方法与layoutSubView方法？这两个方法的作用？\"></a>如何调用drawRect方法与layoutSubView方法？这两个方法的作用？</h3><p>通过setNeedsLayout方法异步调用layoutSubView方法。<br>通过setNeedsDisplay方法异步调用drawRect方法。<br>drawRect方法用于绘图，layoutSubView方法用于布局子视图。</p>\n<h3 id=\"UIView与UIViewController的关系？\"><a href=\"#UIView与UIViewController的关系？\" class=\"headerlink\" title=\"UIView与UIViewController的关系？\"></a>UIView与UIViewController的关系？</h3><p>每个控制器都有一个根视图，控制器UIViewController用来管理此视图的加载和显示。</p>\n<h3 id=\"iOS中有哪些手势？\"><a href=\"#iOS中有哪些手势？\" class=\"headerlink\" title=\"iOS中有哪些手势？\"></a>iOS中有哪些手势？</h3><p>轻击、捏合、平移、轻扫、旋转和长按。</p>\n<h3 id=\"storyboard有什么特点？\"><a href=\"#storyboard有什么特点？\" class=\"headerlink\" title=\"storyboard有什么特点？\"></a>storyboard有什么特点？</h3><p>storyboard是iOS5新增的特性，是对xib的升级版本，引入了一个容器用于管理多个xib文件，和它们之间的跳转交互。<br>优点：不用再为每个控制器创建xib文件；可以使用静态cell，当cell固定且不多时，使用起来比较方便。<br>缺点：storyboard单个文件，不利于团队协作开发。</p>\n<h3 id=\"如何打包静态库？\"><a href=\"#如何打包静态库？\" class=\"headerlink\" title=\"如何打包静态库？\"></a>如何打包静态库？</h3><p>新建一个Framework&amp;Library的项目，编译的时候会将项目中的代码文件打包成一个.a静态库文件。</p>\n<h3 id=\"SVN、Git协作开发，怎么防止代码文件冲突？\"><a href=\"#SVN、Git协作开发，怎么防止代码文件冲突？\" class=\"headerlink\" title=\"SVN、Git协作开发，怎么防止代码文件冲突？\"></a>SVN、Git协作开发，怎么防止代码文件冲突？</h3><p>防止代码冲突：不要多人同时修改同一个文件。例如，A、B都修改同一个文件，先让A修改，然后提交到服务器，然后B更新下来，再进行修改。<br>服务器上的项目文件xcodeproj，仅让一个人管理提交，其他人只更新。防止此文件产生冲突。</p>\n<h3 id=\"block一般用哪个关键字修饰，为什么？\"><a href=\"#block一般用哪个关键字修饰，为什么？\" class=\"headerlink\" title=\"block一般用哪个关键字修饰，为什么？\"></a>block一般用哪个关键字修饰，为什么？</h3><p>block一般使用copy关键之进行修饰，block使用copy是从MRC遗留下来的“传统”，在MRC中，方法内容的block是在栈区的，使用copy可以把它放到堆区。但在ARC中写不写都行：编译器自动对block进行了copy操作。</p>\n<h3 id=\"用-property声明的NSString（或NSArray，NSDictionary）经常\"><a href=\"#用-property声明的NSString（或NSArray，NSDictionary）经常\" class=\"headerlink\" title=\"用@property声明的NSString（或NSArray，NSDictionary）经常\"></a>用@property声明的NSString（或NSArray，NSDictionary）经常</h3><p>使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？<br>用@property声明 NSString、NSArray、NSDictionary 经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。<br>如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性。<br>copy此特质所表达的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝” (copy)。 当属性类型为NSString时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个NSMutableString类的实例。这个类是NSString的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。</p>\n<h3 id=\"runloop、autorelease-pool以及线程之间的关系？\"><a href=\"#runloop、autorelease-pool以及线程之间的关系？\" class=\"headerlink\" title=\"runloop、autorelease pool以及线程之间的关系？\"></a>runloop、autorelease pool以及线程之间的关系？</h3><p>每个线程(包含主线程)都有一个Runloop。对于每一个Runloop，系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个像callstack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。</p>\n<h3 id=\"property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的？\"><a href=\"#property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的？\" class=\"headerlink\" title=\"@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？\"></a>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的？</h3><p>“属性”(property)有两大概念：ivar(实例变量)、存取方法(access method=getter)，即@property = ivar + getter + setter。<br>例如下面的这个类：<br>    @interface<br>    WBTextView :UITextView<br>    @property (nonatomic,copy)NSString *placehold; </p>\n<pre><code>@property \n(nonatomic,copy)UIColor *placeholdColor; \n\n@end\n</code></pre><p>类完成属性的定以后，编译器会自动编写访问这些属性的方法(自动合成autosynthesis)，上述代码写出来的类等效与下面的代码：</p>\n<pre><code>@interface \nWBTextView :UITextView \n(NSString *)placehold; \n\n-(void)setPlacehold:(NSString *)placehold; \n\n-(UIColor \n*)placeholdColor; \n-(void)setPlaceholdColor:(UIColor *)placeholdColor; \n\n@end\n</code></pre><p>详细介绍见：<a href=\"http://blog.csdn.net/jasonjwl/article/details/49427377\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jasonjwl/article/details/49427377</a></p>\n<h3 id=\"分别写一个setter方法用于完成-property-nonatomic-retain-NSString-name和-property-nonatomic-copy-NSString-name？\"><a href=\"#分别写一个setter方法用于完成-property-nonatomic-retain-NSString-name和-property-nonatomic-copy-NSString-name？\" class=\"headerlink\" title=\"分别写一个setter方法用于完成@property (nonatomic,retain)NSString *name和@property (nonatomic,copy) NSString *name？\"></a>分别写一个setter方法用于完成<code>@property (nonatomic,retain)NSString *name</code>和<code>@property (nonatomic,copy) NSString *name</code>？</h3><p>retain属性的setter方法是保留新值并释放旧值，然后更新实例变量，令其指向新值。顺序很重要。假如还未保留新值就先把旧值释放了，而且两个值又指向同一个对象，先执行的release操作就可能导致系统将此对象永久回收。<br>    -(void)setName:(NSString<br>    *)name{</p>\n<pre><code>[name retain];\n\n[_name release];\n\n_name = name;\n}\n-(void)setName:(NSString *)name{ \n\n [_name \nrelease];\n _name = \n[name copy];\n}\n</code></pre><h3 id=\"说说assign和weak，-block和-weak的区别？\"><a href=\"#说说assign和weak，-block和-weak的区别？\" class=\"headerlink\" title=\"说说assign和weak，_block和 _weak的区别？\"></a>说说assign和weak，<code>_block</code>和 <code>_weak</code>的区别？</h3><p>assign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。<br>assign其实也可以用来修饰对象，那么为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续内存分配中，刚巧分到了这块地址，程序就会崩溃掉。而weak修饰的对象在释放之后，指针地址会被置为nil。<br><code>_block</code>是用来修饰一个变量，这个变量就可以在block中被修改。<br><code>_block</code>:使用<code>_block</code>修饰的变量在block代码块中会被retain(ARC下，MRC下不会retain)。<br><code>_weak</code>:使用<code>_weak</code>修饰的变量不会在block代码块中被retain。</p>\n<h3 id=\"请说出下面代码是否有问题，如果有问题请修改？\"><a href=\"#请说出下面代码是否有问题，如果有问题请修改？\" class=\"headerlink\" title=\"请说出下面代码是否有问题，如果有问题请修改？\"></a>请说出下面代码是否有问题，如果有问题请修改？</h3><pre><code>@autoreleasepool \n{\n for (int \ni=0; i&lt;largeNumber; i++) \n{\n Person \n*per = [[Person alloc] init];\n [per autorelease];\n }\n\n}\n</code></pre><p>内存管理的原则：如果对一个对象使用了alloc、copy、retain，那么你必须使用相应的release或者autorelease。咋一看，这道题目有alloc，也有autorelease，两者对应起来，应该没问题。但autorelease虽然会使引用计数减一，但是它并不是立即减一，它的本质功能只是把对象放到离他最近的自动释放池里。当自动释放池销毁了，才会向自动释放池中的每一个对象发送release消息。这道题的问题就在autorelease。因为largeNumber是一个很大的数，autorelease又不能使引用计数立即减一，所以在循环结束前会造成内存溢出的问题。<br>解决方案如下：</p>\n<pre><code>@autoreleasepool \n{\n for (int \ni=0; i&lt;100000; i++) { \n\n @autoreleasepool \n{\n Person \n*per = [[Person alloc] init];\n [per autorelease];\n }\n }\n\n}\n</code></pre><p>在循环内部再加一个自动释放池，这样就能保证每创建一个对象就能及时释放。</p>\n<h3 id=\"请问下面代码是否有问题，如有问题请修改？\"><a href=\"#请问下面代码是否有问题，如有问题请修改？\" class=\"headerlink\" title=\"请问下面代码是否有问题，如有问题请修改？\"></a>请问下面代码是否有问题，如有问题请修改？</h3><pre><code>@autoreleasepool \n{\n NSString \n*str = [[NSString alloc] init];\n [str retain];\n [str retain];\n str = \n@&quot;jxl&quot;;\n [str release];\n [str release];\n [str release];\n}\n</code></pre><p>这道题跟第8题一样存在内存泄露问题，<br>1）内存泄露 ；<br>2）指向常量区的对象不能release。<br>指针变量str原本指向一块开辟的堆区空间，但是经过重新给str赋值，str的指向发生了变化，由原来指向堆区空间，到指向常量区。常量区的变量根本不需要释放，这就导致了原来开辟的堆区空间没有释放，造成内存泄露。</p>\n<h3 id=\"什么情况下使用weak关键字，相比assign有什么不同？什么情况使用weak关键字？\"><a href=\"#什么情况下使用weak关键字，相比assign有什么不同？什么情况使用weak关键字？\" class=\"headerlink\" title=\"什么情况下使用weak关键字，相比assign有什么不同？什么情况使用weak关键字？\"></a>什么情况下使用weak关键字，相比assign有什么不同？什么情况使用weak关键字？</h3><p>1）在ARC中，在有可能出现循环引用的时候，往往要通过让其中一端使用weak来解决。比如delegate代理。<br>2）自身已经对它进行一次强引用，没有必要再强引用一次，此时也会使用weak，自定义控件属性一般也使用weak。<br>不同点：<br>1）weak此特性表明该属性定义了一种“非拥有关系”。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特性与assign一样，然而在属性所指的对象遭到销毁时，属性值也会清空。而assign的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。<br>2）assign可以用非OC对象，而weak必须用于OC对象。</p>\n<h3 id=\"内存管理语义-assign、strong、weak等的区别\"><a href=\"#内存管理语义-assign、strong、weak等的区别\" class=\"headerlink\" title=\"内存管理语义(assign、strong、weak等的区别)?\"></a>内存管理语义(assign、strong、weak等的区别)?</h3><p>1）assign “设置方法” 只会执行针对“纯量”的简单赋值操作。<br>2）strong 此特性表明该属性定义了一种“拥有关系”。为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。<br>3）weak 此特性表明该属性定义了一种“非拥有关系”。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特性同assign类似，然而在属性所指的对象遭到销毁时，属性值也会清空。<br>4）<code>unsafe_unretained</code>此特性的语义和assign相同，但是它适用于“对象类型”，该特性表达一种“非拥有关系”，当目标对象遭到销毁时，属性值不会自动清空，这一点与weak有区别。<br>5）copy 此特性所表达的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝”。当属性类型为<code>NSString*</code>时，经常用此特性来保护其封装性，因为传递给设置方法的新值有可能指向一个NSMutableString类的实例。这个类是NSString的子类，表示一种可以修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。所以，这时就要拷贝一份“不可变”的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的”，就应该在设置新属性值时拷贝一份。</p>\n<h3 id=\"view是怎么刷新的？\"><a href=\"#view是怎么刷新的？\" class=\"headerlink\" title=\"view是怎么刷新的？\"></a>view是怎么刷新的？</h3><h3 id=\"Android中数据存储有哪些方法？\"><a href=\"#Android中数据存储有哪些方法？\" class=\"headerlink\" title=\"Android中数据存储有哪些方法？\"></a>Android中数据存储有哪些方法？</h3><h3 id=\"安卓的广播机制，要在哪里注册广播，哪个生命周期中注册广播\"><a href=\"#安卓的广播机制，要在哪里注册广播，哪个生命周期中注册广播\" class=\"headerlink\" title=\"安卓的广播机制，要在哪里注册广播，哪个生命周期中注册广播\"></a>安卓的广播机制，要在哪里注册广播，哪个生命周期中注册广播</h3><h3 id=\"android中的消息队列模型和Handler。\"><a href=\"#android中的消息队列模型和Handler。\" class=\"headerlink\" title=\"android中的消息队列模型和Handler。\"></a>android中的消息队列模型和Handler。</h3><h3 id=\"android中如何加载网络数据？可以在主线程中获取吗？\"><a href=\"#android中如何加载网络数据？可以在主线程中获取吗？\" class=\"headerlink\" title=\"android中如何加载网络数据？可以在主线程中获取吗？\"></a>android中如何加载网络数据？可以在主线程中获取吗？</h3><h3 id=\"android中如何在子线程中更新UI-比如要在子线程中更新界面上的button上的文字，应该如何做？\"><a href=\"#android中如何在子线程中更新UI-比如要在子线程中更新界面上的button上的文字，应该如何做？\" class=\"headerlink\" title=\"android中如何在子线程中更新UI,比如要在子线程中更新界面上的button上的文字，应该如何做？\"></a>android中如何在子线程中更新UI,比如要在子线程中更新界面上的button上的文字，应该如何做？</h3><h3 id=\"android中多线程间如何通信的？主线程如何知道子线程中信息是否加载好了？\"><a href=\"#android中多线程间如何通信的？主线程如何知道子线程中信息是否加载好了？\" class=\"headerlink\" title=\"android中多线程间如何通信的？主线程如何知道子线程中信息是否加载好了？\"></a>android中多线程间如何通信的？主线程如何知道子线程中信息是否加载好了？</h3><h3 id=\"android中activity的四种加载方式？若是singtop模式，那么在一个activity的startActivity（）方法中调用自己，那么它会经历哪些生命周期？\"><a href=\"#android中activity的四种加载方式？若是singtop模式，那么在一个activity的startActivity（）方法中调用自己，那么它会经历哪些生命周期？\" class=\"headerlink\" title=\"android中activity的四种加载方式？若是singtop模式，那么在一个activity的startActivity（）方法中调用自己，那么它会经历哪些生命周期？\"></a>android中activity的四种加载方式？若是singtop模式，那么在一个activity的startActivity（）方法中调用自己，那么它会经历哪些生命周期？</h3><h3 id=\"在activity中finish（）方法后面的代码是否会执行？\"><a href=\"#在activity中finish（）方法后面的代码是否会执行？\" class=\"headerlink\" title=\"在activity中finish（）方法后面的代码是否会执行？\"></a>在activity中finish（）方法后面的代码是否会执行？</h3><h3 id=\"activity生命周期，单例模式\"><a href=\"#activity生命周期，单例模式\" class=\"headerlink\" title=\"activity生命周期，单例模式\"></a>activity生命周期，单例模式</h3><h3 id=\"string类型可以继承么，为什么？\"><a href=\"#string类型可以继承么，为什么？\" class=\"headerlink\" title=\"string类型可以继承么，为什么？\"></a>string类型可以继承么，为什么？</h3><h3 id=\"写出并分析Android的activity的生命周期\"><a href=\"#写出并分析Android的activity的生命周期\" class=\"headerlink\" title=\"写出并分析Android的activity的生命周期\"></a>写出并分析Android的activity的生命周期</h3><h3 id=\"android的布局页面为什么一定要用activity，直接用view不行吗\"><a href=\"#android的布局页面为什么一定要用activity，直接用view不行吗\" class=\"headerlink\" title=\"android的布局页面为什么一定要用activity，直接用view不行吗\"></a>android的布局页面为什么一定要用activity，直接用view不行吗</h3><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:46 PM </p>\n</blockquote>\n"},{"title":"面试内容整理--项目","url":"http://code4fun.me/2018/01/11/面试内容整理--项目/","content":"<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><h3 id=\"PHP的缺点\"><a href=\"#PHP的缺点\" class=\"headerlink\" title=\"PHP的缺点\"></a>PHP的缺点</h3><p>异步：<a href=\"\">http://www.laruence.com/2008/04/14/318.html</a><br>多线程：简单异步，可以考虑popen(),fsockopen(),cURL;<br>复杂一些的，可以考虑PCNTL/pthreads扩展吧；<br>更复杂的，考虑消息队列 – 后台服务吧；<br>还有swoole！</p>\n<h3 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h3><p><a href=\"\">http://www.cnblogs.com/springyangwc/archive/2012/01/18/2325784.html</a></p>\n<p><a href=\"\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>\n<h3 id=\"通知⻆标插件\"><a href=\"#通知⻆标插件\" class=\"headerlink\" title=\"通知⻆标插件\"></a>通知⻆标插件</h3><p>大概说一下各个动画的实现既可以</p>\n<h3 id=\"Socket编程。\"><a href=\"#Socket编程。\" class=\"headerlink\" title=\"Socket编程。\"></a>Socket编程。</h3><p><a href=\"\">http://www.cnblogs.com/hoojo/p/longPolling_comet_jquery_iframe_ajax.html</a></p>\n<h3 id=\"C-Python相关语法\"><a href=\"#C-Python相关语法\" class=\"headerlink\" title=\"C# Python相关语法\"></a>C# Python相关语法</h3><h3 id=\"C-和PHP有什么本质区别\"><a href=\"#C-和PHP有什么本质区别\" class=\"headerlink\" title=\"C++和PHP有什么本质区别\"></a>C++和PHP有什么本质区别</h3><p><a href=\"\">http://blog.csdn.net/world_2015/article/details/44901257</a><br><a href=\"\">http://www.cnblogs.com/yetuweiba/p/3871726.html</a></p>\n<h3 id=\"Python-多线程、多进程\"><a href=\"#Python-多线程、多进程\" class=\"headerlink\" title=\"Python 多线程、多进程\"></a>Python 多线程、多进程</h3><p><a href=\"\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319272686365ec7ceaeca33428c914edf8f70cca383000</a></p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:43 PM </p>\n</blockquote>\n"},{"title":"减轻生活的压力，GTD 逐步实践","url":"http://code4fun.me/2018/01/11/减轻生活压力/","content":"<p>很久之前看过<a href=\"https://read.douban.com/ebook/386670/\" target=\"_blank\" rel=\"external\">番茄工作法图解</a> ，后来还看过<a href=\"https://read.douban.com/ebook/28899718/\" target=\"_blank\" rel=\"external\">搞定I：无压工作的艺术</a> ，然后对于 GTD 逐步有了一些了解，也逐渐使用 OmniFocous 这个神器来进行项目管理，可是发现这个进展下来，最麻烦的应该是做着做着就忘了这件事情，所以按照网上的实践，在 OF 中设置了一个daily的 project，然后添加了两个每日提醒的事项。 </p>\n<ul>\n<li>清空Reeder</li>\n</ul>\n<ul>\n<li>记流水帐</li>\n</ul>\n<p>不知道这次可以坚持多久，今天把Reeder里面之前订阅的各种资讯类的都删除了，之前还不相信有人说不要订阅资讯类的网站，发现果然是里面堆积了大量的文章都是这些资讯类的，看到上面的 999+ 就不想点进去了，删了之后立马一身轻松。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>24 Dec 2016 12:54 AM </p>\n</blockquote>\n"},{"title":"面试内容整理—操作系统","url":"http://code4fun.me/2018/01/11/面试内容整理--操作系统/","content":"<h3 id=\"Linux相关，怎么查看各个进程的占用率，怎么查看Nginx日志，知不知道服务器抓包（Tcpdump）\"><a href=\"#Linux相关，怎么查看各个进程的占用率，怎么查看Nginx日志，知不知道服务器抓包（Tcpdump）\" class=\"headerlink\" title=\"Linux相关，怎么查看各个进程的占用率，怎么查看Nginx日志，知不知道服务器抓包（Tcpdump）\"></a>Linux相关，怎么查看各个进程的占用率，怎么查看Nginx日志，知不知道服务器抓包（Tcpdump）</h3><h3 id=\"多线程之间的通信\"><a href=\"#多线程之间的通信\" class=\"headerlink\" title=\"多线程之间的通信\"></a>多线程之间的通信</h3><ol>\n<li>共享变量</li>\n<li>消息队列<h3 id=\"进程间通信有哪些方式（Linux）？分别怎么实现？\"><a href=\"#进程间通信有哪些方式（Linux）？分别怎么实现？\" class=\"headerlink\" title=\"进程间通信有哪些方式（Linux）？分别怎么实现？\"></a>进程间通信有哪些方式（Linux）？分别怎么实现？</h3>1.管道（Pipe）及有名管道（named pipe）：管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；<br>2.信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期 信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上， 该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，sigaction函数重新实现了signal函数）；<br>3.报文（Message）队列（消息队列）：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。<br>4.共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针其他通信机制运行效率较低设计的。往往与其它通信机制，如信号量结合使用， 来达到进程间的同步及互斥。<br>5.信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。<br>6.套接字（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix 系统上：Linux和System V的变种都支持套接字<h3 id=\"线程与进程\"><a href=\"#线程与进程\" class=\"headerlink\" title=\"线程与进程\"></a>线程与进程</h3>两者的区别——资源分配，调度，通信<br>父进程和子进程有不同的代码和数据空间，而多个线程则共享数据空间，每个线程有自己的执行堆栈和程序计数器为其执行上下文。<br>操作系统中引入进程的目的是实现多个程序的并发执行，从而改善资源的使用效率并提高系统的运作效率；而引入线程则是为了减少程序并发执行时所付出的时空开销，从而使并发粒度更细化、并发性能更优越。<br>一个线程会与同属于一个进程的其他线程共享进程代码段、数据段和其他操作系统资源。<br>os给进程和线程都分配哪些资源？共享的数据, 进程的内存空间</li>\n</ol>\n<p>现有平行的几个进程，如果其中一个进程挂了，会影响其他线程吗？一个进程有多个线程，有一个挂了，对其他线程有影响吗？为什么？<br>一般的应用程序是单个进程，也有多进程（Chrome），进程是个静态的容器，里面容纳了很多个线程，线程是一系列方法的线性执行路径。</p>\n<h3 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h3><p>先来先服务(FCFS)调度算法和短作业(进程)优先调度算法SJ(P)F<br>高优先权优先调度算法<br>在抢占式操作系统中，假设有若干进程，操作系统会根据他们的优先级、饥饿时间（已经多长时间没有使用过 CPU 了），给他们算出一 个总的优先级来。操作系统就会把 CPU 交给总优先级最高的这个进程。当进程执行完毕或者自己主动挂起后，操作系统就会重新计算一 次所有进程的总优先级，然后再挑一个优先级最高的把 CPU 控制权交给他。<br>基于时间片的轮转调度算法</p>\n<h3 id=\"Linux-ps命令，以及看内存当前使用状态的命令\"><a href=\"#Linux-ps命令，以及看内存当前使用状态的命令\" class=\"headerlink\" title=\"Linux ps命令，以及看内存当前使用状态的命令\"></a>Linux ps命令，以及看内存当前使用状态的命令</h3><h3 id=\"设计一个高效的线程调度\"><a href=\"#设计一个高效的线程调度\" class=\"headerlink\" title=\"设计一个高效的线程调度\"></a>设计一个高效的线程调度</h3><h3 id=\"内存池实现\"><a href=\"#内存池实现\" class=\"headerlink\" title=\"内存池实现\"></a>内存池实现</h3><h3 id=\"定长内存池\"><a href=\"#定长内存池\" class=\"headerlink\" title=\"定长内存池\"></a>定长内存池</h3><h3 id=\"Linux初期没有多线程如何处理并发\"><a href=\"#Linux初期没有多线程如何处理并发\" class=\"headerlink\" title=\"Linux初期没有多线程如何处理并发\"></a>Linux初期没有多线程如何处理并发</h3><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:40 PM </p>\n</blockquote>\n"},{"title":"面试内容整理--C语言","url":"http://code4fun.me/2018/01/11/面试内容整理--C语言/","content":"<h3 id=\"C-继承等顺序\"><a href=\"#C-继承等顺序\" class=\"headerlink\" title=\"C++ 继承等顺序\"></a>C++ 继承等顺序</h3><p><a href=\"\">http://blog.csdn.net/bresponse/article/details/6914155</a></p>\n<p>构造函数，显示初始化化基类（父类）的构造函数，然后再分配成员变量C的内存，最后再执行自身构造函数。<br>构造函数的调用顺序总是如下：<br>1.基类构造函数。如果有多个基类，则构造函数的调用顺序是某类在类派生表中出现的顺序，而不是它们在成员初始化表中的顺序。<br>2.成员类对象构造函数。如果有多个成员类对象则构造函数的调用顺序是对象在类中被声明的顺序，而不是它们出现在成员初始化表中的顺序。<br>3.派生类构造函数。</p>\n<p>析构函数<br>析构函数不能重载。<br>析构函数的调用顺序与构造函数的调用顺序正好相反，将上面3个点反过来用就可以了，首先调用派生类的析构函数；其次再调用成员类对象的析构函数；最后调用基类的析构函数。<br>析构函数在下边3种情况时被调用：</p>\n<ol>\n<li>对象生命周期结束，被销毁时(一般类成员的指针变量与引用都i不自动调用析构函数)；</li>\n<li>delete指向对象的指针时，或delete指向对象的基类类型指针，而其基类虚构函数是虚函数时；</li>\n<li>对象i是对象o的成员，o的析构函数被调用时，对象i的析构函数也被调用。<h3 id=\"面向对象设计的原则\"><a href=\"#面向对象设计的原则\" class=\"headerlink\" title=\"面向对象设计的原则\"></a>面向对象设计的原则</h3>原则一：（SRP：Single responsibility principle）单一职责原则又称单一功能原则<br>原则二：开闭原则（OCP：Open Closed Principle）<br>核心思想：对扩展开放，对修改关闭。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。<br>原则三：里氏替换原则（LSP：Liskov Substitution Principle）<br>原则四：依赖倒转原则(DIP：Dependence Inversion Principle)<br>要依赖于抽象，不要依赖于具体的实现<h3 id=\"指针和引用的区别\"><a href=\"#指针和引用的区别\" class=\"headerlink\" title=\"指针和引用的区别\"></a>指针和引用的区别</h3><h3 id=\"static全局变量与普通的全局变量的区别？局部变量呢？函数呢？\"><a href=\"#static全局变量与普通的全局变量的区别？局部变量呢？函数呢？\" class=\"headerlink\" title=\"static全局变量与普通的全局变量的区别？局部变量呢？函数呢？\"></a>static全局变量与普通的全局变量的区别？局部变量呢？函数呢？</h3></li>\n<li>static全局变量与普通全局变量的区别：static全局变量只初始化一次，防止在其他文件单元中被引用。</li>\n<li>static局部变量与普通局部变量的区别：static局部变量只被初始化一次，下一次依据上一次结果值。</li>\n<li>static函数与普通函数的区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。<h3 id=\"C-中的内存管理\"><a href=\"#C-中的内存管理\" class=\"headerlink\" title=\"C++中的内存管理\"></a>C++中的内存管理</h3>在C++中,内存分成5个区,分别是堆、栈、自由存储区、全局/静态区和常量存储区.</li>\n</ol>\n<ul>\n<li>栈:存放函数参数以及局部变量,在出作用域时,将自动被释放.栈内存分配运算内置于处理器的指令集中,效率很高,但分配的内存容量有限.</li>\n<li>堆:new分配的内存块(包括数组,类实例等),需delete手动释放.如果未释放,在整个程序结束后,OS会帮你回收掉.</li>\n<li>自由存储区:malloc分配的内存块,需free手动释放.它和堆有些相似.</li>\n<li>全局/静态区:全局变量(global)和静态变量(static)存于此处.(在以前的C语言中,全局变量又分为初始化的和未初始化的,C++不分)</li>\n<li>常量存储区:常量(const)存于此处,此存储区不可修改.</li>\n</ul>\n<p>其实C++的内存管理容易而且安全,因为当一个对象消除时,它的析构函数能够安全的释放所有分配的内存.在嵌入式系统中,内存的分配是一个常见问题,保守的使用内存分配是嵌入式环境中的第一原则.<br>当你需使用new/delete时,一个防止堆破碎的通用方法是从不同固定大小的内存池中分配不同类型的对象对每个类重载new和delete就提供了这样的控制.</p>\n<h3 id=\"C-内存机制和是否会有内存泄漏什么情况下会泄漏\"><a href=\"#C-内存机制和是否会有内存泄漏什么情况下会泄漏\" class=\"headerlink\" title=\"C++内存机制和是否会有内存泄漏什么情况下会泄漏\"></a>C++内存机制和是否会有内存泄漏什么情况下会泄漏</h3><p>一般我们常说的内存泄漏是指堆内存的泄漏。堆内存是指程序从堆中分配的，大小任意的（内存块的大小可以在程序运行期决定），使用完后必须显示释放的内 存。应用程序一般使用malloc，realloc，new等函数从堆中分配到一块内存，使用完后，程序必须负责相应的调用free或delete释放该 内存块，否则，这块内存就不能被再次使用，我们就说这块内存泄漏了。</p>\n<p>广义的说，内存泄漏不仅仅包含堆内存的泄漏，还包含系统资源的泄漏(resource leak)，比如核心态HANDLE，GDI Object，SOCKET， Interface等，从根本上说这些由操作系统分配的对象也消耗内存，如果这些对象发生泄漏最终也会导致内存的泄漏。而且，某些对象消耗的是核心态内 存，这些对象严重泄漏时会导致整个操作系统不稳定。所以相比之下，系统资源的泄漏比堆内存的泄漏更为严重。</p>\n<p>以发生的方式来分类，内存泄漏可以分为4类：</p>\n<ol>\n<li>常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。</li>\n<li>偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。</li>\n<li>一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，但是因为这个类是一个Singleton，所以内存泄漏只会发生一次。</li>\n<li>隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。<h3 id=\"虚析构、模板和宏\"><a href=\"#虚析构、模板和宏\" class=\"headerlink\" title=\"虚析构、模板和宏\"></a>虚析构、模板和宏</h3></li>\n<li>对于虚析构函数，那么就是基类和子类的析构函数都会被调用，先析构子类部分，再析构基类部分。（基类析构函数是被子类析构函数自动调用的）</li>\n<li>对于非虚析构函数，子类析构函数不会被调用，只有基类析构函数才会被调用。</li>\n</ol>\n<p>模板定义：模板就是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数， 从而实现了真正的代码可重用性。模版可以分为两类，一个是函数模版，另外一个是类模版。<br><a href=\"\">模板</a></p>\n<h3 id=\"虚函数实现机制\"><a href=\"#虚函数实现机制\" class=\"headerlink\" title=\"虚函数实现机制\"></a>虚函数实现机制</h3><p><a href=\"\">http://blog.csdn.net/neiloid/article/details/6934135</a></p>\n<h3 id=\"vector与list的区别，map是如何实现的，查找效率是多少\"><a href=\"#vector与list的区别，map是如何实现的，查找效率是多少\" class=\"headerlink\" title=\"vector与list的区别，map是如何实现的，查找效率是多少\"></a>vector与list的区别，map是如何实现的，查找效率是多少</h3><ol>\n<li><p>Vector是顺序容器，是一个动态数组，支持随机存取、插入、删除、查找等操作，在内存中是一块连续的空间。在原有空间不够情况下自动分配空间，增加为原来的两倍。vector随机存取效率高，但是在vector插入元素，需要移动的数目多，效率低下。<br>注意：vector动态增加大小时，并不是在原空间之后持续新空间（因为无法保证原空间之后尚有可供配置的空间），而是以原大小的两倍另外配置一块较大的空间，然后将原内容拷贝过来，然后才开始在原内容之后构造新元素，并释放原空间。因此，对vector的任何操作，一旦引起空间重新配置，指向原vector的所有迭代器就都失效了。</p>\n</li>\n<li><p>Map是关联容器，以键值对的形式进行存储，方便进行查找。关键词起到索引的作用，值则表示与索引相关联的数据。以红黑树的结构实现，插入删除等操作都在O(logn)时间内完成。<br>注意：map的下标操作，其行为与vector很不相同：使用一个不在容器中关键字作为下标，会添加一个具有此关键字的元素到map中。一般使用find函数代替下标操作。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,   <span class=\"keyword\">int</span>&gt;   my_Map; </div><div class=\"line\">my_Map[<span class=\"string\">\"a\"</span>]   =   <span class=\"number\">1</span>; </div><div class=\"line\">my_Map.insert(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,   <span class=\"keyword\">int</span>&gt;::value_type(<span class=\"string\">\"b\"</span>,<span class=\"number\">2</span>)); </div><div class=\"line\">my_Map.insert(pair&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"c\"</span>,<span class=\"number\">3</span>)); </div><div class=\"line\">my_Map.insert(make_pair&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"d\"</span>,<span class=\"number\">4</span>)); </div><div class=\"line\"><span class=\"keyword\">int</span>   i   =   my_Map[<span class=\"string\">\"a\"</span>];  my_Map[<span class=\"string\">\"a\"</span>]   =   i; </div><div class=\"line\">MY_MAP::iterator my_Itr; my_Itr.find(<span class=\"string\">\"b\"</span>); <span class=\"keyword\">int</span>   j   =   my_Itr-&gt;second; my_Itr-&gt;second   =   j; </div><div class=\"line\">my_Map.erase(my_Itr); </div><div class=\"line\">my_Map.erase(<span class=\"string\">\"c\"</span>); </div><div class=\"line\"><span class=\"keyword\">for</span>   (my_Itr=my_Map.begin();   my_Itr!=my_Map.end();   ++my_Itr)   &#123;&#125; </div><div class=\"line\">my_Map.size()               返回元素数目 </div><div class=\"line\">my_Map.empty()       判断是否为空 </div><div class=\"line\">my_Map.clear()           清空所有元素</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set是关联容器，set中每个元素只包含一个关键字。set支持高效的关键字查询操作——检查一个给定的关键字是否在set中。set也是以红黑树的结构实现，支持高效插入、删除等操作。</p>\n</li>\n<li>vector数据结构<br>vector和数组类似，拥有一段连续的内存空间，并且起始地址不变。<br>因此能高效的进行随机存取，时间复杂度为o(1);<br>但因为内存空间是连续的，所以在进行插入和删除操作时，会造成内存块的拷贝，时间复杂度为o(n)。<br>另外，当数组中内存空间不够时，会重新申请一块内存空间并进行内存拷贝。</li>\n<li>list数据结构<br>list是由双向链表实现的，因此内存空间是不连续的。<br>只能通过指针访问数据，所以list的随机存取非常没有效率，时间复杂度为o(n);<br>但由于链表的特点，能高效地进行插入和删除。<h3 id=\"extern-关键字有什么用\"><a href=\"#extern-关键字有什么用\" class=\"headerlink\" title=\"extern 关键字有什么用\"></a>extern 关键字有什么用</h3>extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。<br>C语言中extern的作用，extern “C”的作用？<br>1）extern可以置于变量或者函数前，以标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。<br>2）C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。<h3 id=\"malloc和new的区别，能否malloc-1-2G\"><a href=\"#malloc和new的区别，能否malloc-1-2G\" class=\"headerlink\" title=\"malloc和new的区别，能否malloc(1.2G)\"></a>malloc和new的区别，能否malloc(1.2G)</h3><h3 id=\"C-多线程编程-网络编程\"><a href=\"#C-多线程编程-网络编程\" class=\"headerlink\" title=\"C++多线程编程  网络编程\"></a>C++多线程编程  网络编程</h3><h3 id=\"C语言中的static变量和static函数有什么作用？\"><a href=\"#C语言中的static变量和static函数有什么作用？\" class=\"headerlink\" title=\"C语言中的static变量和static函数有什么作用？\"></a>C语言中的static变量和static函数有什么作用？</h3>1）表示变量是静态存储变量，表示变量存放在静态存储区。<br>2）加在函数前面的时候表示该函数是内部连接，只在本文件中有效，别的文件中不能使用该函数。<h3 id=\"C-面向对象的几个特征及其实现\"><a href=\"#C-面向对象的几个特征及其实现\" class=\"headerlink\" title=\"C++面向对象的几个特征及其实现\"></a>C++面向对象的几个特征及其实现</h3>面向对象的三个基本特征是：封装、继承、多态。<h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4>封装最好理解了。封装是面向对象的特征之一，是对象和类概念的主要特性。<br>封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4>面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。<br>通过继承创建的新类称为“子类”或“派生类”。<br>被继承的类称为“基类”、“父类”或“超类”。<br>继承的过程，就是从一般到特殊的过程。<br>要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。<br>在某些 OOP 语言中，一个子类可以继承多个基类。但是一般情况下，一个子类只能有一个基类，要实现多重继承，可以通过多级继承来实现。<br>继承概念的实现方式有三类：实现继承、接口继承和可视继承。</li>\n</ol>\n<ul>\n<li>实现继承是指使用基类的属性和方法而无需额外编码的能力；</li>\n<li>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</li>\n<li>可视继承是指子窗体（类）使用基窗体（类）的外观和实现代码的能力。<br>在考虑使用继承时，有一点需要注意，那就是两个类之间的关系应该是“属于”关系。例如，Employee 是一个人，Manager 也是一个人，因此这两个类都可以继承 Person 类。但是 Leg 类却不能继承 Person 类，因为腿并不是一个人。<br>抽象类仅定义将由子类创建的一般属性和方法，创建抽象类时，请使用关键字 Interface 而不是 Class。<br>OO开发范式大致为：划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。<br>实现多态，有二种方式，覆盖，重载。<br>覆盖，是指子类重新定义父类的虚函数的做法。<br>重载，是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。<br>其实，重载的概念并不属于“面向对象编程”，重载的实现是：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：<code>function func(p:integer):integer;</code>和<code>function func(p:string):integer;</code>。那么编译器做过修饰后的函数名称可能是这样的：<code>int_func、str_func</code>。对于这两个函数的调用，在编译器间就已经确定了，是静态的（记住：是静态）。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！真正和多态相关的是“覆盖”。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态（记住：是动态！）的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚邦定）。结论就是：重载只是一种语言特性，与多态无关，与面向对象也无关！引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚邦定，它就不是多态。”<br>那么，多态的作用是什么呢？我们知道，封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了——代码重用。而多态则是为了实现另一个目的——接口重用！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。<h3 id=\"虚函数的内存管理（常见问题，建议把虚函数表、多态的实现过程这些都讲一讲）\"><a href=\"#虚函数的内存管理（常见问题，建议把虚函数表、多态的实现过程这些都讲一讲）\" class=\"headerlink\" title=\"虚函数的内存管理（常见问题，建议把虚函数表、多态的实现过程这些都讲一讲）\"></a>虚函数的内存管理（常见问题，建议把虚函数表、多态的实现过程这些都讲一讲）</h3><a href=\"\">http://blog.csdn.net/haoel/article/details/1948051</a><h3 id=\"全局与局部静态变量区别\"><a href=\"#全局与局部静态变量区别\" class=\"headerlink\" title=\"全局与局部静态变量区别\"></a>全局与局部静态变量区别</h3><h4 id=\"从作用域看：\"><a href=\"#从作用域看：\" class=\"headerlink\" title=\"从作用域看：\"></a>从作用域看：</h4></li>\n</ul>\n<ol>\n<li>全局变量具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。当然，其他不包含全局变量定义的源文件需要用extern关键字再次声明这个全局变量。</li>\n<li>静态局部变量具有局部作用域，它只被初始化一次，自从第一次被初始化直到程序运行结束都一直存在，它和全局变量的区别在于全局变量对所有的函数都是可见的，而静态局部变量只对定义自己的函数体始终可见。</li>\n<li>局部变量也只有局部作用域，它是自动对象（auto），它在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被撤销，其所占用的内存也被收回。</li>\n<li>静态全局变量也具有全局作用域，它与全局变量的区别在于如果程序包含多个文件的话，它作用于定义它的文件里，不能作用到其它文件里，即被static关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。<h4 id=\"从分配内存空间看：\"><a href=\"#从分配内存空间看：\" class=\"headerlink\" title=\"从分配内存空间看：\"></a>从分配内存空间看：</h4></li>\n<li>全局变量，静态局部变量，静态全局变量都在静态存储区分配空间，而局部变量在栈里分配空间</li>\n<li>全局变量本身就是静态存储方式，静态全局变量当然也是静态存储方式。这两者在存储方式上并无不同。这两者的区别虽在于非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。而静态全局变量则限制了其作用域，即只在定义该变量的源文件内有效，在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其它源文件中引起错误。<br>1)静态变量会被放在程序的静态数据存储区(全局可见)中，这样可以在下一次调用的时候还可以保持原来的赋值。这一点是它与堆栈变量和堆变量的区别。<br>2)变量用static告知编译器，自己仅仅在变量的作用范围内可见。这一点是它与全局变量的区别。<br>从以上分析可以看出，把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域，限制了它的使用范围。因此static这个说明符在不同的地方所起的作用是不同的。应予以注意。<h3 id=\"空类默认生成哪些函数\"><a href=\"#空类默认生成哪些函数\" class=\"headerlink\" title=\"空类默认生成哪些函数\"></a>空类默认生成哪些函数</h3>构造函数、析构函数、拷贝构造函数、以及拷贝赋值函数<h3 id=\"explicit关键字的作用\"><a href=\"#explicit关键字的作用\" class=\"headerlink\" title=\"explicit关键字的作用\"></a>explicit关键字的作用</h3>修饰构造函数，用于抑制隐式转换，“原则上应该在所有的构造函数前加explicit” <h3 id=\"类如何实现只能静态分配和只能动态分配\"><a href=\"#类如何实现只能静态分配和只能动态分配\" class=\"headerlink\" title=\"类如何实现只能静态分配和只能动态分配\"></a>类如何实现只能静态分配和只能动态分配</h3>前者是把new、delete运算符重载为private属性。后者是把构造、析构函数设为protected属性，再用子类来动态创建<h3 id=\"面向对象编程里面的多态？\"><a href=\"#面向对象编程里面的多态？\" class=\"headerlink\" title=\"面向对象编程里面的多态？\"></a>面向对象编程里面的多态？</h3>多态的定义：如果编译时和运行时类项不一样就会出现所谓的多态（polymorphism），多态可以向上转型。<br>• 编译时类项：声明该变量时使用的类型决定<br>• 运行时类项：实际赋给该变量的对象决定<br>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。<br>多态存在的三个必要条件：<br>一、要有继承；<br>二、要有重写；<br>三、父类引用指向子类对象。<br>父类引用生成子类对象，那这个引用只能调用在父类中已经定义过的属性和方法，而对子类自己新定义的属性和方法则不能访问。<h3 id=\"struct和union的区别？union应用场景是什么？\"><a href=\"#struct和union的区别？union应用场景是什么？\" class=\"headerlink\" title=\"struct和union的区别？union应用场景是什么？\"></a>struct和union的区别？union应用场景是什么？</h3>1.在存储多个成员信息时，编译器会自动给struct多个成员分配存储空间，struct 可以存储多个成员信息，而Union每个成员会用同一个存储空间，只能存储最后一个成员的信息。<br>2.都是由多个不同的数据类型成员组成，但在任何同一时刻，Union只存放了一个被先选中的成员，而结构体的所有成员都存在。<br>3.对于Union的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了，而对于struct 的不同成员赋值 是互不影响的。<br>注：在很多地方需要对结构体的成员变量进行修改。只是部分成员变量，那么就不能用联合体Union，因为Union的所有成员变量占一个内存。eg：在链表中对个别数值域进行赋值就必须用struct.<h3 id=\"C-构造函数调用虚函数有什么问题\"><a href=\"#C-构造函数调用虚函数有什么问题\" class=\"headerlink\" title=\"C++构造函数调用虚函数有什么问题\"></a>C++构造函数调用虚函数有什么问题</h3>程序不会报错，但不会有动态绑定的效果了。<h3 id=\"static静态变量\"><a href=\"#static静态变量\" class=\"headerlink\" title=\"static静态变量\"></a>static静态变量</h3>在C++中，静态成员变量是属于整个类的，它被该类的所有对象共享。而对于普通的成员变量，每个对象都拥有自己单独的成员变量。<h3 id=\"重载、覆盖和隐藏。\"><a href=\"#重载、覆盖和隐藏。\" class=\"headerlink\" title=\"重载、覆盖和隐藏。\"></a>重载、覆盖和隐藏。</h3>重载和重写的区别：<br>（1）范围区别：重写和被重写的函数在不同的类中，重载和被重载的函数在同一类中。<br>（2）参数区别：重写与被重写的函数参数列表一定相同，重载和被重载的函数参数列表一定不同。<br>（3）virtual的区别：重写的基类必须要有virtual修饰，重载函数和被重载函数可以被virtual修饰，也可以没有。<br>隐藏和重写，重载的区别：<br>（1）与重载范围不同：隐藏函数和被隐藏函数在不同类中。<br>（2）参数的区别：隐藏函数和被隐藏函数参数列表可以相同，也可以不同，但函数名一定同；当参数不同时，无论基类中的函数是否被virtual修饰，基类函数都是被隐藏，而不是被重写。<h3 id=\"重写和重载有什么区别\"><a href=\"#重写和重载有什么区别\" class=\"headerlink\" title=\"重写和重载有什么区别\"></a>重写和重载有什么区别</h3>重载就是：是函数名相同，参数列表不同 重载只是在类的内部存在。<br>重写：也叫做覆盖。子类重新定义父类中有相同名称和参数的虚函数。说白了，就是在继承关系中出现的 。<br>一句话就是重载是同一层次函数名相同。覆盖是在继承层次中成员函数的函数原型完全相同。<br>重写主要标志特征：</li>\n<li>被重写的函数不是static的。必须是virtual的。<br>2 重写函数必须有相同的类型，名称和参数列表<h3 id=\"什么是字节对齐？怎么修改字节对齐的规则？\"><a href=\"#什么是字节对齐？怎么修改字节对齐的规则？\" class=\"headerlink\" title=\"什么是字节对齐？怎么修改字节对齐的规则？\"></a>什么是字节对齐？怎么修改字节对齐的规则？</h3>现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。<br> 对齐的作用和原因：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那 么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数 据。显然在读取效率上下降很多。</li>\n</ol>\n<p><code>#pragma pack (value)</code>时的指定对齐值value</p>\n<h3 id=\"序列化和反序列化？\"><a href=\"#序列化和反序列化？\" class=\"headerlink\" title=\"序列化和反序列化？\"></a>序列化和反序列化？</h3><p> 消息序列化<br>    将具有一定结构的数据转换成可以存取或者可以传输的形式，比如转换成字符流的形式(<code>char *</code>)。通过序列化后，消息可以在系统各逻辑模块或者网络中传输。</p>\n<p>消息反序列化<br>    顾名思义，反序列化与序列化的过程相反。例如，将网络中传过来的放在缓冲区的字节流数据(<code>char *</code>)解码成具有一定含义和结构的数据，然后便可以对接出来的数据进行处理。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:39 PM </p>\n</blockquote>\n"},{"title":"面试内容整理--网络篇","url":"http://code4fun.me/2018/01/11/面试内容整理--网络/","content":"<h3 id=\"TCP-ip-UDP-请求头\"><a href=\"#TCP-ip-UDP-请求头\" class=\"headerlink\" title=\"TCP ip UDP 请求头\"></a>TCP ip UDP 请求头</h3><p><a href=\"\">http://blog.csdn.net/mrwangwang/article/details/8537775</a></p>\n<h3 id=\"http请求头有哪些，介绍平时见过的，怎么利用这些信息来进行前后端调试\"><a href=\"#http请求头有哪些，介绍平时见过的，怎么利用这些信息来进行前后端调试\" class=\"headerlink\" title=\"http请求头有哪些，介绍平时见过的，怎么利用这些信息来进行前后端调试\"></a>http请求头有哪些，介绍平时见过的，怎么利用这些信息来进行前后端调试</h3><p>HTTP请求信息由3部分组成：<br>l   请求方法 URI协议/版本<br>l   请求头(Request Header)<br>l   请求正文 </p>\n<h3 id=\"知道HTTP和HTTPS吗？区别是什么？各自的默认端口号？\"><a href=\"#知道HTTP和HTTPS吗？区别是什么？各自的默认端口号？\" class=\"headerlink\" title=\"知道HTTP和HTTPS吗？区别是什么？各自的默认端口号？\"></a>知道HTTP和HTTPS吗？区别是什么？各自的默认端口号？</h3><p>https协议需要到ca申请证书。<br>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议<br>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。<br>http的连接很简单,是无状态的<br>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议要比http协议安全</p>\n<h3 id=\"简述TCP与UDP协议的差别，两者与HTTP的关系。并列举HTTP的方法，以及常见的返回状态码。\"><a href=\"#简述TCP与UDP协议的差别，两者与HTTP的关系。并列举HTTP的方法，以及常见的返回状态码。\" class=\"headerlink\" title=\"简述TCP与UDP协议的差别，两者与HTTP的关系。并列举HTTP的方法，以及常见的返回状态码。\"></a>简述TCP与UDP协议的差别，两者与HTTP的关系。并列举HTTP的方法，以及常见的返回状态码。</h3><p>TCP—传输控制协议,提供的是面向连接、可靠的字节流服务。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。</p>\n<pre><code>UDP---用户数据报协议，是一个简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。\n</code></pre><p>ping使用的是ICMP协议，它和IP协议处在同一层；使用UDP协议的有DNS，使用TCP有FTP协议，SMTP/POP3协议，TELNET协议</p>\n<p>请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。</p>\n<p>HTTP的响应状态码由5段组成： </p>\n<p>• 1xx 消息，一般是告诉客户端，请求已经收到了，正在处理，别急…<br>• 2xx 处理成功，一般表示：请求收悉、我明白你要的、请求已受理、已经处理完成等信息.<br>• 3xx 重定向到其它地方。它让客户端再发起一个请求以完成整个处理。<br>• 4xx 处理发生错误，责任在客户端，如客户端的请求一个不存在的资源，客户端未被授权，禁止访问等。<br>• 5xx 处理发生错误，责任在服务端，如服务端抛出异常，路由出错，HTTP版本不支持等。</p>\n<h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p>• 7. 应用层——Application(Layer 7)<br>       与其它计算机进行通讯的一个应用，它是对应应用程序的通信服务的。例如，一个没有通信功能的字处理程序就不能执行通信的代码，从事字处理工作的程序员也不关心OSI的第7层。但是，如果添加了一个传输文件的选项，那么字处理器的程序员就需要实现OSI的第7层。</p>\n<p>• 6. 表示层——Presentation(Layer 6)<br>       这一层的主要功能是定义数据格式及加密。例如，FTP允许你选择以二进制或ASCII格式传输。如果选择二进制，那么发送方和接收方不改变文件的内容。如果选择ASCII格式，发送方将把文本从发送方的字符集转换成标准的ASCII后发送数据。在接收方将标准的ASCII转换成接收方计算机的字符集。</p>\n<p>• 5. 会话层——Session(Layer 5)<br>       它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。</p>\n<p>• 4. 传输层—— Transport(Layer 4)<br>       这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。</p>\n<p>• 3. 网络层——Network(Layer 3)</p>\n<pre><code>这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。\n</code></pre><p>• 2. 数据链路层——Data Link(Layer 2)<br>       它定义了在单个链路上如何传输数据。这些协议与被讨论的各种介质有关。</p>\n<p>• 1. 物理层——Physical(Layer 1)<br>       物理层规范是有关传输介质的特性标准，这些规范通常也参考了其他组织制定的标准。连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。物理层常用多个规范完成对所有细节的定义。</p>\n<h3 id=\"Socket连接和Http连接的区别？\"><a href=\"#Socket连接和Http连接的区别？\" class=\"headerlink\" title=\"Socket连接和Http连接的区别？\"></a>Socket连接和Http连接的区别？</h3><p>Http连接：Http连接就是所谓的短链接，即客户端向服务器发送一次请求，服务器响应后连接即会断掉。<br>Socket连接：Socket连接就是所谓的长连接，理论上客户端和服务器端一旦建立起连接将不会主动断掉。</p>\n<h3 id=\"什么是TCP连接的三次握手？\"><a href=\"#什么是TCP连接的三次握手？\" class=\"headerlink\" title=\"什么是TCP连接的三次握手？\"></a>什么是TCP连接的三次握手？</h3><p>第一次握手：客户端发送SYN包（SYN=j）到服务器，并进入<code>SYN_SEND</code>状态，等待服务器确认。客户端给服务器发包。 此时服务器确认自己可以接收客户端的包，客户端不确认服务器是否接收到了自己发的包。<br>第二次握手：服务器收到SYN包，必须确认客户的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器进入<code>SYN_RECV</code>状态。服务器端回复客户端。 此时客户端确认自己发的包被服务器收到，也确认自己可以正常接收服务器包，客户端对此次通信没有疑问了。服务器可以确认自己能接收到客户端的包，但不能确认客户端能否接收自己发的包。<br>第三次握手：客户端接收到服务器的<code>SYN+ACK</code>包，向服务器发送确认包<code>ACK（ACK=k+1）</code>，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。客户端回复服务器。 客户端已经没有疑问了，服务器也确认刚刚客户端收到了自己的包。两边都没有问题，开始通信。</p>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p>由于TCP连接是全双工（A->B与B->A同时）的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。<br> CP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。<br>（1）客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。<br>（2）服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1，和SYN一样，一个FIN将占用一个序号。<br>（3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A。<br>（4）客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。</p>\n<h3 id=\"TCP三次握手有没有被攻击的可能\"><a href=\"#TCP三次握手有没有被攻击的可能\" class=\"headerlink\" title=\"TCP三次握手有没有被攻击的可能\"></a>TCP三次握手有没有被攻击的可能</h3><p>如果一个恶意攻击的ip一直请求连接，服务器会发送ack确认，但永远等不到回复，就会导致服务器资源浪费）<br>攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。</p>\n<h3 id=\"TCP四次挥手时最后一次等待要多久，为什么\"><a href=\"#TCP四次挥手时最后一次等待要多久，为什么\" class=\"headerlink\" title=\"TCP四次挥手时最后一次等待要多久，为什么\"></a>TCP四次挥手时最后一次等待要多久，为什么</h3><p>如A向B发送挥手，则A需要等待2MSL，MSL为最大报文生命期，这是为了确保A的挥手能到达B，不然B会重传第三次挥手的信息。另外也是确保所有此次通话相关报文在网络中消失<br>这最主要是因为两个理由：<br>1、为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。<br>2、他还可以防止已失效的报文段。客户端在发送最后一个ACK之后，再经过2MSL，就可以使本链接持续时间内所产生的所有报文段都从网络中消失。从而保证在关闭连接后不会有还在网络中滞留的报文段去骚扰服务器。</p>\n<h3 id=\"TCP滑动窗口机制\"><a href=\"#TCP滑动窗口机制\" class=\"headerlink\" title=\"TCP滑动窗口机制\"></a>TCP滑动窗口机制</h3><p>滑动窗口协议的基本原理就是在任意时刻，发送方都维持了一个连续的允许发送的帧的序号，称为发送窗口；同时，接收方也维持了一个连续的允许接收的帧的序号，称为接收窗口。发送窗口和接收窗口的序号的上下界不一定要一样，甚至大小也可以不同。不同的滑动窗口协议窗口大小一般不同。发送方窗口内的序列号代表了那些已经被发送，但是还没有被确认的帧，或者是那些可以被发送的帧。</p>\n<h3 id=\"TCP拥塞控制机制\"><a href=\"#TCP拥塞控制机制\" class=\"headerlink\" title=\"TCP拥塞控制机制\"></a>TCP拥塞控制机制</h3><p>依赖于一个拥塞窗口(cwnd)来控制<br>TCP的拥塞控制由4个核心算法组成：“慢启动”（Slow Start）、“拥塞避免”（Congestion voidance）、“快速重传 ”（Fast Retransmit）、“快速恢复”（Fast Recovery）。<br>慢启动：<br>最初的TCP在连接建立成功后会向网络中发送大量的数据包，这样很容易导致网络中路由器缓存空间耗尽，从而发生拥塞。因此新建立的连接不能够一开始就大量发送数据包，而只能根据网络情况逐步增加每次发送的数据量，以避免上述现象的发生。当新建连接时，cwnd初始化为1个最大报文段(MSS)大小，发送端开始按照拥塞窗口大小发送数据，每当有一个报文段被确认，cwnd就增加1个MSS大小。这样cwnd的值就随着网络往返时间(Round Trip Time,RTT)呈指数级增长<br>拥塞避免：<br>从慢启动可以看到，cwnd可以很快的增长上来，从而最大程度利用网络带宽资源，但是cwnd不能一直这样无限增长下去，一定需要某个限制。TCP使用了一个叫慢启动门限(ssthresh)的变量，当cwnd超过该值后，慢启动过程结束，进入拥塞避免阶段。拥塞避免的主要思想是加法增大，也就是cwnd的值不再指数级往上升，开始加法增加。此时当窗口中所有的报文段都被确认时，cwnd的大小加1，cwnd的值就随着RTT开始线性增加，这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。<br>快速恢复：<br>1.当收到3个重复ACK时，把ssthresh设置为cwnd的一半，把cwnd设置为ssthresh的值加3，然后重传丢失的报文段，加3的原因是因为收到3个重复的ACK，表明有3个“老”的数据包离开了网络。<br>2.再收到重复的ACK时，拥塞窗口增加1。<br>3.当收到新的数据包的ACK时，把cwnd设置为第一步中的ssthresh的值。原因是因为该ACK确认了新的数据，说明从重复ACK时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态。</p>\n<h3 id=\"哪些http方法对于服务端和用户是安全的\"><a href=\"#哪些http方法对于服务端和用户是安全的\" class=\"headerlink\" title=\"哪些http方法对于服务端和用户是安全的\"></a>哪些http方法对于服务端和用户是安全的</h3><p>GET / HEAD / OPTIONS方法<br>               只从服务端获取资源 并不对服务器进行修改 因此相对安全。<br>               对于客户端来说是不安全的 请求参数会显示在URL中。<br>TRACE方法<br>               用于诊断诊断服务器，仅记录路径信息是安全的。<br>POST方法<br>               会影响服务器端的资源。</p>\n<h3 id=\"Http协议的特点？GET与POST的区别？什么是Https协议？\"><a href=\"#Http协议的特点？GET与POST的区别？什么是Https协议？\" class=\"headerlink\" title=\"Http协议的特点？GET与POST的区别？什么是Https协议？\"></a>Http协议的特点？GET与POST的区别？什么是Https协议？</h3><p>1）Http协议是短连接，都是客户端主动发送请求，服务器做出响应，服务器响应之后，连接则断开。<br>2）GET请求没有请求体，POST含有请求体，请求参数可以放入请求体中，所以，POST可以提交大量的数据给服务器，更加安全。<br>3）HTTPS（Secure Hypertext Transfer Protocol）安全超文本传输协议，它是一个安全通信通道，它基于HTTP开发，用于在客户计算机和服务器之间交换信息。它使用安全套接字层（SSL）进行信息交换，简单来说它是HTTP的安全版。</p>\n<h3 id=\"XML数据的解析方式各有什么不同？JSON解析有哪些框架？\"><a href=\"#XML数据的解析方式各有什么不同？JSON解析有哪些框架？\" class=\"headerlink\" title=\"XML数据的解析方式各有什么不同？JSON解析有哪些框架？\"></a>XML数据的解析方式各有什么不同？JSON解析有哪些框架？</h3><p>XML数据解析有两种方式：DOM解析和SAX解析。<br>DOM解析：必须完成DOM树的构造，在处理规模较大的XML文档时就很耗费内存，占用资源较多。<br>SAX解析：与DOM不同的是，SAX是用事件驱动模型，解析XML文档时每遇到一个开始或者结束标签、属性或一条指令时，程序就产生一个事件来进行相应的处理。因此，SAX相对于DOM来说更适合操作大的XML文档。<br>JSON解析：现在性能比较好的主要是第三方的JSONKit和iOS自带的JSON解析类，自带的JSON解析性能是最高的，但是只能是iOS5之后才可以使用。</p>\n<h3 id=\"Http和Socket的区别？\"><a href=\"#Http和Socket的区别？\" class=\"headerlink\" title=\"Http和Socket的区别？\"></a>Http和Socket的区别？</h3><p>Http是客户端用Http协议进行请求，发送请求时需要封装http请求头，并绑定请求的数据，服务器一般有Web服务器配合（当然也非绝对）。Http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采用http长连接技术）。iPhone主要使用的类是NSURLConnection。<br>Socket是客户端跟服务器直接使用Socket套接字进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方都可以主动发送数据。一般在游戏开发或股票开发，这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用的类是CFSocketRef。</p>\n<h3 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h3><p>提示：答出滑动窗口，拥塞控制，慢启动，可以附带答上快重传、快恢复和超时重传（显得自己知道的比较多咯）</p>\n<h3 id=\"socket模型\"><a href=\"#socket模型\" class=\"headerlink\" title=\"socket模型\"></a>socket模型</h3><p>一：select模型（选择模型）<br>周而复始地去检查…… 如果有数据……接收/发送 …….<br>二：WSAAsyncSelect模型（异步选择）<br>WSAAsyncSelect模型是Windows 下最简单易用的一种Socket I/O模型。使用这种模型时，Windows会把网络事件以消息的形势通知应用程序<br>三：WSAEventSelect模型（事件选择）<br>它也允许应用程序在一个或多个套接字上，接收以事件为基础的网络事件通知。<br>四：Overlapped I/O 事件通知模型（重叠I/O模型）<br>我们可以通过使用Win32文件操纵函数ReadFile和WriteFile来进行Socket I/O。伴随而来的，用于普通文件I/O的重叠I/O模型和完成端口模型对Socket I/O也适用了。<br>“Overlapped”，Overlapped 模型是让应用程序使用重叠数据结构(WSAOVERLAPPED)，一次投递一个或多个 Winsock I/O请求。这些提交的请求完成后，应用程序会收到通知。什么意思呢？就是说，如果你想从 socket上接收数据，只需要告诉系统，由系统为你接收数据，而你需要做的只是为系统提供一个缓冲区<br>五：Overlapped I/O 完成例程模型<br>Overlapped I/O 完成例程要求用户提供一个回调函数，发生新的网络事件的时候系统将执行这个函数：<br>六：IOCP模型</p>\n<h3 id=\"从浏览器输入一个地址，到页面显示html，这个过程经历了什么，调用了哪些应用层协议？\"><a href=\"#从浏览器输入一个地址，到页面显示html，这个过程经历了什么，调用了哪些应用层协议？\" class=\"headerlink\" title=\"从浏览器输入一个地址，到页面显示html，这个过程经历了什么，调用了哪些应用层协议？\"></a>从浏览器输入一个地址，到页面显示html，这个过程经历了什么，调用了哪些应用层协议？</h3><p>比较ok<br><a href=\"\">http://www.jianshu.com/p/19fde9ed9fc6</a><br><a href=\"\">http://blog.sina.com.cn/s/blog_72c8e14d010137qn.html</a></p>\n<h3 id=\"Windows-Linux下判断远程地址为某主机监听的某端口是都开放的命令是？\"><a href=\"#Windows-Linux下判断远程地址为某主机监听的某端口是都开放的命令是？\" class=\"headerlink\" title=\"Windows/Linux下判断远程地址为某主机监听的某端口是都开放的命令是？\"></a>Windows/Linux下判断远程地址为某主机监听的某端口是都开放的命令是？</h3><h3 id=\"ssh协议以及如何预防中间人攻击、如何免去使用密码\"><a href=\"#ssh协议以及如何预防中间人攻击、如何免去使用密码\" class=\"headerlink\" title=\"ssh协议以及如何预防中间人攻击、如何免去使用密码\"></a>ssh协议以及如何预防中间人攻击、如何免去使用密码</h3><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。<br>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<h3 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h3><p>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。2. 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。3. Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p>\n<h3 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议\"></a>网络协议</h3><p><a href=\"\">http://www.jianshu.com/p/4de750258d9d</a></p>\n<h3 id=\"DNS协议\"><a href=\"#DNS协议\" class=\"headerlink\" title=\"DNS协议\"></a>DNS协议</h3><p><a href=\"\">http://blog.csdn.net/hunanchenxingyu/article/details/21488291</a><br>DNS通常由其他应用层协议使用(如HTTP、SMTP、FTP)，将主机名解析为IP地址，其运行在UDP之上，使用53号端口。<br>    注：DNS除了提供主机名到IP地址转换外，还提供如下服务：主机别名、邮件服务器别名、负载分配。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Jan 2018 10:37 PM </p>\n</blockquote>\n"},{"title":"遗憾","url":"http://code4fun.me/2018/01/08/遗憾/","content":"<p>昨天突然看到海上牧云记已经完结了，开始打算下载下来看一下最后两集，不过最终还是没有鼓足勇气去看。看了一下豆瓣的评价，最终还是决定放弃啦。</p>\n<p>等这部剧应该是等了有两年了吧，从记不清什么时候的杀青开始，后来传出来17年元旦开播，后来又拖到芒果台的暑期档，后来直到拖到17年底。开始看了几集，他们年轻时候的感觉还可以，虽然特别喜欢回忆杀，以及和原著有了很大的不同，但是剧情至少还可以，可是随着到了他们成人，妈蛋，完全崩坏成了一部言情剧。原著里几乎没什么戏份的各种女性角色，突然就开始不停的作。那我还不如去看小时代（虽然并没有看过）。然后，朔风何叶这个角色也是，一直靠女人，一直在中二。无力吐槽了。</p>\n<p>也许真的是原著党不适合看改变的电影，悟空传电影出来时就一直没有敢看，虽然也期待了很久，多次打算买票去看，不过最终还是忍住了，直到一次出差在飞机上看了一大半，然后发现猴子再也不是以前那个猴子了。</p>\n<p>最近忙于毕设，本来内容差不多了，又硬生生的加了一章，希望早日把程序调好。一想，感觉马上就就毕业了，再一想还有挺多事情没有做。两个项目的东西需要做，最近还攒了挺多论文的，最近看计算机视觉方面的论文感觉还挺有意思的，比起之前看雷达目标跟踪要好得多。可是感觉确实有些理论方面不够扎实，应用还好一些，但是到理论层面还是有一些差距的。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>8 Jan 2018 12:20 AM </p>\n</blockquote>\n"},{"title":"新的一年","url":"http://code4fun.me/2018/01/06/新的一年/","content":"<p>2018年就这么过来了，都不是很敢打开2017年的计划，因为和预期差了太多，这一年里做了些啥？</p>\n<p>书没有看够，博客没有写够，该学的东西也没有学好。想起，最近看得周鸿祎的自传，他多次创业中间失败的原因一直有一个很重要的点，那就是不专注。感觉自己也在这方面有很大的毛病，啥都想做一些，也就导致了啥的不能专注下来的情况。</p>\n"},{"title":"关于工作二三事","url":"http://code4fun.me/2017/11/11/关于工作二三事/","content":"<blockquote>\n<p>也许最简单的发现和其他人差距的时候就是找工作的时候。</p>\n</blockquote>\n<p>虽然看起来这句话有些残忍，不过确实是这样的。看着别人斩获各种sp，你却收到一封封thank you letter，或者说挂在笔试的时候，也许真的会心态崩盘。值教研室检查之际，写下这篇应届生找工作的文章。</p>\n<h2 id=\"工作岗位选择\"><a href=\"#工作岗位选择\" class=\"headerlink\" title=\"工作岗位选择\"></a>工作岗位选择</h2><p>这个应该是首要的、最关键的一点，就是具体想从事的岗位。这个涉及多个方面，公司的性质（国企、私企、外企等）、公司地点（北上广还是二线城市）、岗位性质（技术、非技术）。</p>\n<h2 id=\"关于准备\"><a href=\"#关于准备\" class=\"headerlink\" title=\"关于准备\"></a>关于准备</h2><p>这个应该是对于找工作来说最重要的一点，</p>\n<h3 id=\"实习招聘会（必去）\"><a href=\"#实习招聘会（必去）\" class=\"headerlink\" title=\"实习招聘会（必去）\"></a>实习招聘会（必去）</h3><h2 id=\"简历\"><a href=\"#简历\" class=\"headerlink\" title=\"简历\"></a>简历</h2><h2 id=\"宣讲会与招聘会\"><a href=\"#宣讲会与招聘会\" class=\"headerlink\" title=\"宣讲会与招聘会\"></a>宣讲会与招聘会</h2><h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><h2 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h2><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>11 Nov 2017 9:00 PM </p>\n</blockquote>\n"},{"title":"面试内容整理—思路","url":"http://code4fun.me/2017/09/18/面试中思路性质问题/","content":"<h2 id=\"千万级的用户，提供一个服务，该服务有很多模块，现在有一个底层模块需要优化，问怎么实现，在不影响其他服务模块以及用户体验的情况下。（面IEG）\"><a href=\"#千万级的用户，提供一个服务，该服务有很多模块，现在有一个底层模块需要优化，问怎么实现，在不影响其他服务模块以及用户体验的情况下。（面IEG）\" class=\"headerlink\" title=\"千万级的用户，提供一个服务，该服务有很多模块，现在有一个底层模块需要优化，问怎么实现，在不影响其他服务模块以及用户体验的情况下。（面IEG）\"></a>千万级的用户，提供一个服务，该服务有很多模块，现在有一个底层模块需要优化，问怎么实现，在不影响其他服务模块以及用户体验的情况下。（面IEG）</h2><p><a href=\"http://taop.marchtea.com/09.03.html\" target=\"_blank\" rel=\"external\">http://taop.marchtea.com/09.03.html</a></p>\n<h2 id=\"未知大小的文件，翻转整个文件\"><a href=\"#未知大小的文件，翻转整个文件\" class=\"headerlink\" title=\"未知大小的文件，翻转整个文件\"></a>未知大小的文件，翻转整个文件</h2><h2 id=\"如果内存中有个cache存储qq号和最近登录时间问怎么样做hit和淘汰\"><a href=\"#如果内存中有个cache存储qq号和最近登录时间问怎么样做hit和淘汰\" class=\"headerlink\" title=\"如果内存中有个cache存储qq号和最近登录时间问怎么样做hit和淘汰\"></a>如果内存中有个cache存储qq号和最近登录时间问怎么样做hit和淘汰</h2><h2 id=\"检测短信敏感词\"><a href=\"#检测短信敏感词\" class=\"headerlink\" title=\"检测短信敏感词\"></a>检测短信敏感词</h2><h2 id=\"爬虫程序的核心代码和正则表达式\"><a href=\"#爬虫程序的核心代码和正则表达式\" class=\"headerlink\" title=\"爬虫程序的核心代码和正则表达式\"></a>爬虫程序的核心代码和正则表达式</h2><h2 id=\"有没有做过协议开发相关的工作？\"><a href=\"#有没有做过协议开发相关的工作？\" class=\"headerlink\" title=\"有没有做过协议开发相关的工作？\"></a>有没有做过协议开发相关的工作？</h2><h2 id=\"给你一个场景，有10个特别大的图片，要对他们进行排序，用什么数据结构存储。\"><a href=\"#给你一个场景，有10个特别大的图片，要对他们进行排序，用什么数据结构存储。\" class=\"headerlink\" title=\"给你一个场景，有10个特别大的图片，要对他们进行排序，用什么数据结构存储。\"></a>给你一个场景，有10个特别大的图片，要对他们进行排序，用什么数据结构存储。</h2><h2 id=\"给两个文件，里面均有超过50亿条域名，各自文件内假设没有重复，互相之间有若干条一样的，找出来。\"><a href=\"#给两个文件，里面均有超过50亿条域名，各自文件内假设没有重复，互相之间有若干条一样的，找出来。\" class=\"headerlink\" title=\"给两个文件，里面均有超过50亿条域名，各自文件内假设没有重复，互相之间有若干条一样的，找出来。\"></a>给两个文件，里面均有超过50亿条域名，各自文件内假设没有重复，互相之间有若干条一样的，找出来。</h2><h2 id=\"群聊的数据结构-数据库怎么设计，要求每个人能够方便的看到自己想要看到的信息。比如需要存储哪些字段？怎么存？\"><a href=\"#群聊的数据结构-数据库怎么设计，要求每个人能够方便的看到自己想要看到的信息。比如需要存储哪些字段？怎么存？\" class=\"headerlink\" title=\"群聊的数据结构/数据库怎么设计，要求每个人能够方便的看到自己想要看到的信息。比如需要存储哪些字段？怎么存？\"></a>群聊的数据结构/数据库怎么设计，要求每个人能够方便的看到自己想要看到的信息。比如需要存储哪些字段？怎么存？</h2><h2 id=\"有n台机器，原来的master宕掉了，要选举一个新的master出来，怎么选？\"><a href=\"#有n台机器，原来的master宕掉了，要选举一个新的master出来，怎么选？\" class=\"headerlink\" title=\"有n台机器，原来的master宕掉了，要选举一个新的master出来，怎么选？\"></a>有n台机器，原来的master宕掉了，要选举一个新的master出来，怎么选？</h2><p><a href=\"https://sanwen8.cn/p/2faiv1h.html\" target=\"_blank\" rel=\"external\">https://sanwen8.cn/p/2faiv1h.html</a></p>\n<h2 id=\"设计题：有500W个QQ号，设计一个合适的数据结构进行储存、查找与维护（这里考虑到查找的高效性，我想的是字典树，但和面试官探讨的过程中，感觉他不是很满意这个答案，大家如有更高效的结构欢迎分享）\"><a href=\"#设计题：有500W个QQ号，设计一个合适的数据结构进行储存、查找与维护（这里考虑到查找的高效性，我想的是字典树，但和面试官探讨的过程中，感觉他不是很满意这个答案，大家如有更高效的结构欢迎分享）\" class=\"headerlink\" title=\"设计题：有500W个QQ号，设计一个合适的数据结构进行储存、查找与维护（这里考虑到查找的高效性，我想的是字典树，但和面试官探讨的过程中，感觉他不是很满意这个答案，大家如有更高效的结构欢迎分享）\"></a>设计题：有500W个QQ号，设计一个合适的数据结构进行储存、查找与维护（这里考虑到查找的高效性，我想的是字典树，但和面试官探讨的过程中，感觉他不是很满意这个答案，大家如有更高效的结构欢迎分享）</h2><h2 id=\"如何从10亿个QQ号中快速查找给定的QQ号\"><a href=\"#如何从10亿个QQ号中快速查找给定的QQ号\" class=\"headerlink\" title=\"如何从10亿个QQ号中快速查找给定的QQ号\"></a>如何从10亿个QQ号中快速查找给定的QQ号</h2><h2 id=\"40G的字符串，里面有2个字符串是重复的，怎么找出来？\"><a href=\"#40G的字符串，里面有2个字符串是重复的，怎么找出来？\" class=\"headerlink\" title=\"40G的字符串，里面有2个字符串是重复的，怎么找出来？\"></a>40G的字符串，里面有2个字符串是重复的，怎么找出来？</h2><h2 id=\"不使用第三个数（临时变量）交换两个整形数\"><a href=\"#不使用第三个数（临时变量）交换两个整形数\" class=\"headerlink\" title=\"不使用第三个数（临时变量）交换两个整形数\"></a>不使用第三个数（临时变量）交换两个整形数</h2><p>提示：<br>方式1加法，a=a+b;b=a-b;a=a-b;(缺点，可能出现a+b超过范围)；<br>方式2位运算，a^=b;b^=a;a^=b;(对数值类型通用)</p>\n<h2 id=\"0000到9999这1万个数中有多少个数字7（请不要理解为多少个数包含7）\"><a href=\"#0000到9999这1万个数中有多少个数字7（请不要理解为多少个数包含7）\" class=\"headerlink\" title=\"0000到9999这1万个数中有多少个数字7（请不要理解为多少个数包含7）\"></a>0000到9999这1万个数中有多少个数字7（请不要理解为多少个数包含7）</h2><p>提示：<br>方式1，可以通过找规律的方式，比如1到10，1到100，1到1000分别多少个;<br>方式2，对每一位单独考虑，共四位，每一位出现7的概率是1/10；<br>方式3，每次固定一位，变换其他位，比如固定千位为7，那么就有1000个，依次计算，得到最终结果4000</p>\n<h2 id=\"如何实现一个随机播放音乐，要求能够方便查看上一首播放的是什么，方便交换即将播放的歌曲顺序\"><a href=\"#如何实现一个随机播放音乐，要求能够方便查看上一首播放的是什么，方便交换即将播放的歌曲顺序\" class=\"headerlink\" title=\"如何实现一个随机播放音乐，要求能够方便查看上一首播放的是什么，方便交换即将播放的歌曲顺序\"></a>如何实现一个随机播放音乐，要求能够方便查看上一首播放的是什么，方便交换即将播放的歌曲顺序</h2><p>提示：先对歌曲编号为0~999（比如有1000首歌），用洗牌算法（不懂的请自行百度）将序号顺序打乱，之后开始播放，这样播放中用户可以对歌曲再次调整顺序，调整时同步调整序号。</p>\n<h2 id=\"6根火柴能最多摆出多少等边三角形\"><a href=\"#6根火柴能最多摆出多少等边三角形\" class=\"headerlink\" title=\"6根火柴能最多摆出多少等边三角形\"></a>6根火柴能最多摆出多少等边三角形</h2><p>提示：正六角星（8个等边三角形）</p>\n<h2 id=\"如何实现俄罗斯方块游戏形状的移动和旋转\"><a href=\"#如何实现俄罗斯方块游戏形状的移动和旋转\" class=\"headerlink\" title=\"如何实现俄罗斯方块游戏形状的移动和旋转\"></a>如何实现俄罗斯方块游戏形状的移动和旋转</h2><p>提示：先用矩形将下落方块围住标记，再记录方块当前的左下角位置，移动时记录坐标变化（可以百度看更高端的答案）</p>\n<h2 id=\"怎么实现随机插入100个数字到一个长度为100的数组里，且无重复\"><a href=\"#怎么实现随机插入100个数字到一个长度为100的数组里，且无重复\" class=\"headerlink\" title=\"怎么实现随机插入100个数字到一个长度为100的数组里，且无重复\"></a>怎么实现随机插入100个数字到一个长度为100的数组里，且无重复</h2><p>随机洗牌问题<br>“随机确定a<a href=\"\">1</a>的值，然后递归地对后n-1位进行操作”，用数学归纳法即可轻易说明算法的正确性。而事实上，这段程序一共将会产生n<em>(n-1)</em>(n-2)<em>…</em>1种等可能的情况，它们正好与1至n的n!种排列一一对应。</p>\n<pre><code>void ShuffleArray_Fisher_Yates(char* arr, int len)\n{\n    int i = len, j;\n    char temp;\n    if ( i == 0 ) return;\n    while ( --i ) {\n        j = rand() % (i+1);\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nfor i:=1 to n do swap(a[i], a[random(i,n)]);\n</code></pre><h2 id=\"设计题：有一个3阶魔方，设计一个数据结构来储存，并设计一个算法来求解魔方（当时设计出了数据结构，但求解算法只能想到DFS-剪枝，显然时间开销太大……事后在网上没找到特别好的求解算法，如有大神知道，还请指教）\"><a href=\"#设计题：有一个3阶魔方，设计一个数据结构来储存，并设计一个算法来求解魔方（当时设计出了数据结构，但求解算法只能想到DFS-剪枝，显然时间开销太大……事后在网上没找到特别好的求解算法，如有大神知道，还请指教）\" class=\"headerlink\" title=\"设计题：有一个3阶魔方，设计一个数据结构来储存，并设计一个算法来求解魔方（当时设计出了数据结构，但求解算法只能想到DFS+剪枝，显然时间开销太大……事后在网上没找到特别好的求解算法，如有大神知道，还请指教）\"></a>设计题：有一个3阶魔方，设计一个数据结构来储存，并设计一个算法来求解魔方（当时设计出了数据结构，但求解算法只能想到DFS+剪枝，显然时间开销太大……事后在网上没找到特别好的求解算法，如有大神知道，还请指教）</h2><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>18 Sep 2017 9:08 PM </p>\n</blockquote>\n"},{"title":"面试内容整理—数据结构","url":"http://code4fun.me/2017/09/18/数据结构相关面试问题/","content":"<h2 id=\"重要参考链接https-juejin-im-post-58ca051f61ff4b0060165122\"><a href=\"#重要参考链接https-juejin-im-post-58ca051f61ff4b0060165122\" class=\"headerlink\" title=\"重要参考链接https://juejin.im/post/58ca051f61ff4b0060165122\"></a>重要参考链接<a href=\"https://juejin.im/post/58ca051f61ff4b0060165122\" target=\"_blank\" rel=\"external\">https://juejin.im/post/58ca051f61ff4b0060165122</a></h2><h2 id=\"堆与栈-http-blog-csdn-net-hairetz-article-details-4141043\"><a href=\"#堆与栈-http-blog-csdn-net-hairetz-article-details-4141043\" class=\"headerlink\" title=\"堆与栈(http://blog.csdn.net/hairetz/article/details/4141043/)\"></a>堆与栈(<a href=\"http://blog.csdn.net/hairetz/article/details/4141043/\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hairetz/article/details/4141043/</a>)</h2><p>栈区（stack）由编译器自动分配释放，存放方法（函数）的参数值，局部变量的值等。<br>堆区（heap）一般由程序员分配与释放，若程序员不释放，则会内存溢出。<br>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。<br>  堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。<br>  另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。<br> 栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。<br>  堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>\n<h2 id=\"hashmap的基础数据结构\"><a href=\"#hashmap的基础数据结构\" class=\"headerlink\" title=\"hashmap的基础数据结构\"></a>hashmap的基础数据结构</h2><p>HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用LinkedList来解决碰撞问题，当发生碰撞了，对象将会储存在LinkedList的下一个节点中。 HashMap在每个LinkedList节点中储存键值对对象。</p>\n<h2 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h2><h3 id=\"循环队列的优点：\"><a href=\"#循环队列的优点：\" class=\"headerlink\" title=\"循环队列的优点：\"></a>循环队列的优点：</h3><p>　　可以有效的利用资源。用数组实现队列时，如果不移动，随着数据的不断读写，会出现假满队列的情况。即尾数组已满但头数组还是空的；循环队列也是一种数组，只是它在逻辑上把数组的头和尾相连，形成循环队列，当数组尾满的时候，要判断数组头是否为空，不为空继续存放数据。</p>\n<h3 id=\"循环队列的缺点：\"><a href=\"#循环队列的缺点：\" class=\"headerlink\" title=\"循环队列的缺点：\"></a>循环队列的缺点：</h3><p>　　循环队列中，由于入队时尾指针向前追赶头指针；出队时头指针向前追赶尾指针，造成队空和队满时头尾指针均相等。因此，无法通过条件front==rear来判别队列是”空”是”满”。</p>\n<p>解决这个问题有两个办法：一是增加一个参数，用来记录数组中当前元素的个数；第二个办法是，少用一个存储空间，也就是数组的最后一个存数空间不用，当（rear+1）%maxsiz=front时，队列满</p>\n<h2 id=\"栈结构与队列的区别？\"><a href=\"#栈结构与队列的区别？\" class=\"headerlink\" title=\"栈结构与队列的区别？\"></a>栈结构与队列的区别？</h2><p>栈（stack）：限定只能在表的一端进行插入和删除操作的线性表。<br>队列（queue）：限定只能在表的一端插入和在另一端进行删除操作的线性表。<br>1）队列先进先出，栈先进后出。<br>2）对插入和删除操作的“限定”不同。<br>3）遍历数据速度不同。队列遍历数据的速度要快得多。</p>\n<h2 id=\"二叉树的深度优先遍历-递归与非递归（非递归后序最难））\"><a href=\"#二叉树的深度优先遍历-递归与非递归（非递归后序最难））\" class=\"headerlink\" title=\"二叉树的深度优先遍历(递归与非递归（非递归后序最难））\"></a>二叉树的深度优先遍历(递归与非递归（非递归后序最难））</h2><h2 id=\"写出一次快排后的具体变化情况\"><a href=\"#写出一次快排后的具体变化情况\" class=\"headerlink\" title=\"写出一次快排后的具体变化情况\"></a>写出一次快排后的具体变化情况</h2><h2 id=\"什么是红黑树。\"><a href=\"#什么是红黑树。\" class=\"headerlink\" title=\"什么是红黑树。\"></a>什么是红黑树。</h2><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求:<br>性质1. 节点是红色或黑色。<br>性质2. 根节点是黑色。<br>性质3 每个叶节点（NIL节点，空节点）是黑色的。<br>性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)<br>性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。<br>这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。</p>\n<h2 id=\"红黑树的插入和删除\"><a href=\"#红黑树的插入和删除\" class=\"headerlink\" title=\"红黑树的插入和删除\"></a>红黑树的插入和删除</h2><h2 id=\"写一个快排。\"><a href=\"#写一个快排。\" class=\"headerlink\" title=\"写一个快排。\"></a>写一个快排。</h2><p>Quick Sort是目前已知最快的排序法，平均复杂度为O(NlogN)，可是最坏情况下将达O(N^2)。<br>Quick Sort算法可以叙述如下。假设S代表将被处理的序列：<br>1、如果S的元素个数为0或1，结束。<br>2、取S中的任何一个元素，当做枢轴(pivot) v。<br>3、将S分割为L、R两段，使L内的每一个元素都小于或等于v，R内的每一个元素都大于或等于v。<br>4、对L、R递归执行Quick Sort。</p>\n<h2 id=\"一个单链表怎么判断有没有环？环的起点怎么找？-如何找出环的连接点在哪里？带环链表的长度是多少？\"><a href=\"#一个单链表怎么判断有没有环？环的起点怎么找？-如何找出环的连接点在哪里？带环链表的长度是多少？\" class=\"headerlink\" title=\"一个单链表怎么判断有没有环？环的起点怎么找？ 如何找出环的连接点在哪里？带环链表的长度是多少？\"></a>一个单链表怎么判断有没有环？环的起点怎么找？ 如何找出环的连接点在哪里？带环链表的长度是多少？</h2><p>1、对于问题1，使用追赶的方法，设定两个指针slow、fast，从头指针开始，每次分别前进1步、2步。如存在环，则两者相遇；如不存在环，fast遇到NULL退出。<br>2、对于问题2，记录下问题1的碰撞点p，slow、fast从该点开始，再次碰撞所走过的操作数就是环的长度s。<br>3、问题3：有定理：碰撞点p到连接点的距离=头指针到连接点的距离，因此，分别从碰撞点、头指针开始走，相遇的那个点就是连接点。<br>该定理的证明可参考：<a href=\"http://fayaa.com/tiku/view/7/\" target=\"_blank\" rel=\"external\">http://fayaa.com/tiku/view/7/</a><br>4、问题3中已经求出连接点距离头指针的长度，加上问题2中求出的环的长度，二者之和就是带环单链表的长度</p>\n<h2 id=\"哈希表解决冲突的方法\"><a href=\"#哈希表解决冲突的方法\" class=\"headerlink\" title=\"哈希表解决冲突的方法\"></a>哈希表解决冲突的方法</h2><ul>\n<li>开放定址法（当关键字key的哈希地址p=H（key）出现冲突时，以p为基础，产生另一个哈希地址p1，如果p1仍然冲突，再以p为基础，产生另一个哈希地址p2，…，直到找出一个不冲突的哈希地址pi ，将相应元素存入其中，线性探测再散列，二次探测再散列，伪随机探测再散列）</li>\n<li>再哈希法（这种方法是同时构造多个不同的哈希函数）</li>\n<li>链地址法（这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表）</li>\n<li>建立一个公共溢出区（将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表）<h2 id=\"散列表查找的复杂度\"><a href=\"#散列表查找的复杂度\" class=\"headerlink\" title=\"散列表查找的复杂度\"></a>散列表查找的复杂度</h2>O(1)<h2 id=\"动态规划，最长公共子串等-最长递增子序列（nlogn的算法）\"><a href=\"#动态规划，最长公共子串等-最长递增子序列（nlogn的算法）\" class=\"headerlink\" title=\"动态规划，最长公共子串等 最长递增子序列（nlogn的算法）\"></a>动态规划，最长公共子串等 最长递增子序列（nlogn的算法）</h2><a href=\"http://blog.csdn.net/joylnwang/article/details/6766317\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/joylnwang/article/details/6766317</a><h2 id=\"排序：快排、归并、堆，时间复杂度是一样的，有什么区别？为什么平均情况下快排最快？\"><a href=\"#排序：快排、归并、堆，时间复杂度是一样的，有什么区别？为什么平均情况下快排最快？\" class=\"headerlink\" title=\"排序：快排、归并、堆，时间复杂度是一样的，有什么区别？为什么平均情况下快排最快？\"></a>排序：快排、归并、堆，时间复杂度是一样的，有什么区别？为什么平均情况下快排最快？</h2><h2 id=\"给定一棵树，除左右节点外，还有一个random域，不一定指向哪，可能是空节点，可能是树中的其他节点，做树拷贝。\"><a href=\"#给定一棵树，除左右节点外，还有一个random域，不一定指向哪，可能是空节点，可能是树中的其他节点，做树拷贝。\" class=\"headerlink\" title=\"给定一棵树，除左右节点外，还有一个random域，不一定指向哪，可能是空节点，可能是树中的其他节点，做树拷贝。\"></a>给定一棵树，除左右节点外，还有一个random域，不一定指向哪，可能是空节点，可能是树中的其他节点，做树拷贝。</h2><h2 id=\"大整数加、减、乘、除、求模运算实现\"><a href=\"#大整数加、减、乘、除、求模运算实现\" class=\"headerlink\" title=\"大整数加、减、乘、除、求模运算实现\"></a>大整数加、减、乘、除、求模运算实现</h2><h2 id=\"二叉查找\"><a href=\"#二叉查找\" class=\"headerlink\" title=\"二叉查找\"></a>二叉查找</h2><h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><h2 id=\"Top-k\"><a href=\"#Top-k\" class=\"headerlink\" title=\"Top(k)\"></a>Top(k)</h2>1.将输入内容（假设用数组存放）进行完全排序，从中选出排在前K的元素即为所求。有了这个思路，我们可以选择相应的排序算法进行处理，目前来看快速排序，堆排序和归并排序都能达到O(nlogn)的时间复杂度。<pre><code>2.对输入内容进行部分排序，即只对前K大的元素进行排序（这K个元素即为所求）。此时我们可以选择冒泡排序或选择排序进行处理，即每次冒泡（选择）都能找到所求的一个元素。这类策略的时间复杂度是O(Kn)。\n3.对输入内容不进行排序，显而易见，这种策略将会有更好的性能开销。我们此时可以选择两种策略进行处理：\n        a)利用小根堆维护一个大小为K的数组，目前该小根堆中的元素是排名前K的数，其中根是最小的数。此后，每次从原数组中取一个元素与根进行比较，如大于根的元素，则将根元素替换并进行堆调整（下沉），即保证小根堆中的元素仍然是排名前K的数，且根元素仍然最小；否则不予处理，取下一个数组元素继续该过程。该算法的时间复杂度是O(nlogK)，一般来说企业中都采用该策略处理top-K问题，因为该算法不需要一次将原数组中的内容全部加载到内存中，而这正是海量数据处理必然会面临的一个关卡。\n        b)利用快速排序的分划函数找到分划位置K，则其前面的内容即为所求。该算法是一种非常有效的处理方式，时间复杂度是O(n)。对于能一次加载到内存中的数组，该策略非常优秀。\n</code></pre><h2 id=\"单链表翻转（两个指针如何实现）、查找、删除、插入以及双向链表、有序链表合并\"><a href=\"#单链表翻转（两个指针如何实现）、查找、删除、插入以及双向链表、有序链表合并\" class=\"headerlink\" title=\"单链表翻转（两个指针如何实现）、查找、删除、插入以及双向链表、有序链表合并\"></a>单链表翻转（两个指针如何实现）、查找、删除、插入以及双向链表、有序链表合并</h2><h2 id=\"判断一个整数是否是2的整数次幂\"><a href=\"#判断一个整数是否是2的整数次幂\" class=\"headerlink\" title=\"判断一个整数是否是2的整数次幂.\"></a>判断一个整数是否是2的整数次幂.</h2>(n&amp;(n-1))<h2 id=\"数组中只有一个数出现了两次，求这个数，并使得空间效率最优（用位图bitmap，比O（n）的线性空间更优）\"><a href=\"#数组中只有一个数出现了两次，求这个数，并使得空间效率最优（用位图bitmap，比O（n）的线性空间更优）\" class=\"headerlink\" title=\"数组中只有一个数出现了两次，求这个数，并使得空间效率最优（用位图bitmap，比O（n）的线性空间更优）\"></a>数组中只有一个数出现了两次，求这个数，并使得空间效率最优（用位图bitmap，比O（n）的线性空间更优）</h2>位运算<br>利用异或的特性，x^y^x=y^x^x=y<h2 id=\"二分查找（注意边界条件）\"><a href=\"#二分查找（注意边界条件）\" class=\"headerlink\" title=\"二分查找（注意边界条件）\"></a>二分查找（注意边界条件）</h2>二分查找算法的填空（PS：注意陷阱：数会溢出的问题）<br>定中间值的时候写错了 mind = low+high/2 ，后面回来一查，说这样子会溢出 low+high 会越界溢出，查阅相关资料 mind = low+（high-low）>>1，这样 才可以，果然，哪里有这么简单的题目…注意陷阱…… <h2 id=\"常见排序算法的实现以及稳定性（快排跟归并考的很多）\"><a href=\"#常见排序算法的实现以及稳定性（快排跟归并考的很多）\" class=\"headerlink\" title=\"常见排序算法的实现以及稳定性（快排跟归并考的很多）\"></a>常见排序算法的实现以及稳定性（快排跟归并考的很多）</h2><h2 id=\"字符串翻转（O-n-）、匹配（KMP算法）\"><a href=\"#字符串翻转（O-n-）、匹配（KMP算法）\" class=\"headerlink\" title=\"字符串翻转（O(n)）、匹配（KMP算法）\"></a>字符串翻转（O(n)）、匹配（KMP算法）</h2><h2 id=\"指定一个数组，求2个数的和等于指定的和（某一个数），如果是3-4-5，n个等于个的和（某一个数）呢？（可以看作背包问题）\"><a href=\"#指定一个数组，求2个数的和等于指定的和（某一个数），如果是3-4-5，n个等于个的和（某一个数）呢？（可以看作背包问题）\" class=\"headerlink\" title=\"指定一个数组，求2个数的和等于指定的和（某一个数），如果是3,4,5，n个等于个的和（某一个数）呢？（可以看作背包问题）\"></a>指定一个数组，求2个数的和等于指定的和（某一个数），如果是3,4,5，n个等于个的和（某一个数）呢？（可以看作背包问题）</h2><h2 id=\"跳台阶问题\"><a href=\"#跳台阶问题\" class=\"headerlink\" title=\"跳台阶问题\"></a>跳台阶问题</h2><h2 id=\"一堆数据怎么找中位数（分两种，内存是不是能一次装下所用数据，能的话用快排，不能用分桶）\"><a href=\"#一堆数据怎么找中位数（分两种，内存是不是能一次装下所用数据，能的话用快排，不能用分桶）\" class=\"headerlink\" title=\"一堆数据怎么找中位数（分两种，内存是不是能一次装下所用数据，能的话用快排，不能用分桶）\"></a>一堆数据怎么找中位数（分两种，内存是不是能一次装下所用数据，能的话用快排，不能用分桶）</h2><a href=\"http://blog.csdn.net/jiyanfeng1/article/details/8088237\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jiyanfeng1/article/details/8088237</a><h2 id=\"找出一个字符串中只出现一次且是第一个的字符\"><a href=\"#找出一个字符串中只出现一次且是第一个的字符\" class=\"headerlink\" title=\"找出一个字符串中只出现一次且是第一个的字符\"></a>找出一个字符串中只出现一次且是第一个的字符</h2>建立一个hash表，遍历一遍字符串，记录每个字符出现的次数<h2 id=\"在不使用额外空间的情况下，交换两个数？\"><a href=\"#在不使用额外空间的情况下，交换两个数？\" class=\"headerlink\" title=\"在不使用额外空间的情况下，交换两个数？\"></a>在不使用额外空间的情况下，交换两个数？</h2>位操作（异或）或者加减</li>\n</ul>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>18 Sep 2017 9:04 PM </p>\n</blockquote>\n"},{"title":"微软实习记","url":"http://code4fun.me/2017/08/06/微软去实习记/","content":"<p>拖了很久了，还是赶紧补上这一篇吧。</p>\n<p>忘了是什么情况下投了微软的实习生，反正最开始是没有报任何希望的，需要中英文简历，于是把中文简历直接在google 翻译里面一翻译就搞定了，然后投了上去，然后，就是通知参加笔试。</p>\n<p>第一次参加笔试，发现一道题都不会做，属于完全蒙蔽的状态，于是就没有提交。也因此，被答题系统认为未参加笔试，于是又给了另外一次机会，开心。<br>第二次笔试，也许是因为笔试前一段时间又开始刷题了，逐渐找回了手感，最终得了0.8+0.8+0.6(貌似是具体记不清了)的样子，然后，很幸运的通过了笔试。<br>笔试之后就是安排面试，结果正好那周去襄阳出差了，在出差的过程中，忙里抽闲，用pad看了一些题解，面试的时候，还恰好遇见重复的题目了。面试当天，请了一天假。结果，早上skype突然不能用了，导致后续的面试只能电话，不知道这个是否影响了面试的评价。第一个面试馆是一个程序媛，这也是面试感觉很不好的一个。说要模拟一个带最小元素的栈或者队列，已经记不清了。然后就蒙蔽了，主要是对于C++的类什么这一块真的不熟悉，然后就完全不会。后续是一个小哥，答题过程比较顺利。面试完，感觉特别饿就准备去吃饭，结果在路上就接到了另一个面试官的电话。又匆匆忙忙赶回宾馆，面试让写一个K-means算法，在表达并不知道具体流程之后，还给讲解了具体的流程，结果中间还是有个地方由于理解错了，导致结果有些问题，不过还好。</p>\n<p>三面结束，就是焦急的等待结果。苦于一个人了解不到情况，就建了个群，发到牛客网上，然后好多人就加进来了。这个过程真就是跌宕起伏了，先是发了个面试positive的邮件，结果过了一段时间就杳无音信了，到了需要通知的时间，又往回拖了一星期。中间，打过一次电话，hr说进入的概率有90%+。虽然有些同学已经收到offer了，但是有了这句话也着实轻松了一下，然后紧接着，拖得那一星期也到了，群里大部分人貌似已经有offer了。于是，有打了个电话，却说面试不理想，属于待定状态，等hc增加。感觉这时候，已经要把信仰耗尽了，讲道理，听到这个的时候内心还是挺失落的，感觉就是到手的鸭子又飞了的感觉，后来某一天又收到了offer。算是了了一桩心事。</p>\n<p>拿到offer这个过程，发现以前一些觉得很难的东西，其实也并不是很难，也就是一句话，不要给自己设限，Just Do IT.</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>6 Aug 2017 2:07 PM </p>\n</blockquote>\n"},{"title":"资源的好与坏","url":"http://code4fun.me/2017/07/22/资源的好与坏/","content":"<p>今天突然想到的，大公司的一个好处也许就是资源吧。例如有些之前只能在科技媒体里听说的东西，可以真真正正的看到或者摸到，例如小娜的那个音箱。还有各种的资源，一系列API，小公司想都不敢想的东西，想做一个语义处理的东西，很简单，调一个接口在网页上随便操作几下，就得到了一个精度蛮不错的接口，或者说可以直接查询各种信息的分门别类的知识图谱，也许有些外网也是可以使用的，但从获取的便捷性以及消息的灵活性来说真的差挺多的。发现一个工具的bug，一封邮件，可能就有太平洋那边的一个员工帮你解决掉这个问题。</p>\n<p>当然坏处也很明显，那就是对于工具的依赖性。好多东西有自己内部的一套工具，例如版本管理工具，虽然感觉在有往git上迁移的迹象，并且微软最近几年的变化确实也蛮大的，开源、开放里起来。或者是build系统，以及C# 的背景，做久了也许真的会和社会上的技术有些脱节。</p>\n<p>PS：昨天听播客，谈到阿里像江湖，腾讯像大学，看来之前感觉的还不错。只是比较好奇百度像啥？</p>\n"},{"title":"来这边实习两周多了","url":"http://code4fun.me/2017/07/19/来这边实习两周多了/","content":"<p>生活很惬意，965基本上，虽然下班还有各种事情要做，不过总比天天加班的好。</p>\n<p>虽然食堂饭不多，不过零食和各种条件很好👍。上班也很轻松。另外就是网好啊。</p>\n<p>最近网络环境真是越来越差啊，不会真的等到白名单到来的那一天吧，肉翻。to be or not to be。A big question。</p>\n<p>想想在二线城市生活也挺好的，不用去深圳挤城中村，不用去北京挤天通苑的地铁。</p>\n"},{"title":"1289  403 Forbidden","url":"http://code4fun.me/2017/05/13/hiho 1289 - 403 Forbidden/","content":"<p>Description<br>Little Hi runs a web server. Sometimes he has to deny access from a certain set of malicious IP addresses while his friends are still allow to access his server. To do this he writes N rules in the configuration file which look like:<br>allow 1.2.3.4/30<br>deny 1.1.1.1<br>allow 127.0.0.1<br>allow 123.234.12.23/3<br>deny 0.0.0.0/0<br>Each rule is in the form: allow | deny address or allow | deny address/mask.<br>When there comes a request, the rules are checked in sequence until the first match is found. If no rule is matched the request will be allowed. Rule and request are matched if the request address is the same as the rule address or they share the same first mask digits when both written as 32bit binary number.<br>For example IP “1.2.3.4” matches rule “allow 1.2.3.4” because the addresses are the same. And IP “128.127.8.125” matches rule “deny 128.127.4.100/20” because 10000000011111110000010001100100 (128.127.4.100 as binary number) shares the first 20 (mask) digits with 10000000011111110000100001111101 (128.127.8.125 as binary number).<br>Now comes M access requests. Given their IP addresses, your task is to find out which ones are allowed and which ones are denied.<br>Input<br>Line 1: two integers N and M.<br>Line 2-N+1: one rule on each line.<br>Line N+2-N+M+1: one IP address on each line.<br>All addresses are IPv4 addresses(0.0.0.0 - 255.255.255.255). 0 \\&lt;= mask \\&lt;= 32.</p>\n<p>For 40% of the data: 1 \\&lt;= N, M \\&lt;= 1000.<br>For 100% of the data: 1 \\&lt;= N, M \\&lt;= 100000.<br>Output<br>For each request output “YES” or “NO” according to whether it is allowed.<br>Sample Input<br>5 5<br>allow 1.2.3.4/30<br>deny 1.1.1.1<br>allow 127.0.0.1<br>allow 123.234.12.23/3<br>deny 0.0.0.0/0<br>1.2.3.4<br>1.2.3.5<br>1.1.1.1<br>100.100.100.100<br>219.142.53.100<br>Sample Output<br>YES<br>YES<br>NO<br>YES<br>NO</p>\n<p>注意是默认放行，之前在这个地方一直WA，另外就是注意输入的ip也使用long long类型，否则移位会变为负号。</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int kind = 2;//字母种类\ntypedef long long ll;\nstruct Treenode//树的结点结构\n{\n    int index;\n    int status;//这个附加变量在本题中记录遍历到该结点形成的字符串出现的次数，在不同题中可记录不同的内容。\n    Treenode *next[kind];//指向儿子结点\n    Treenode(int flag)//每个结点的初始化\n    {\n        status = flag;\n        for(int i=0;i&lt;kind;i++)\n            next[i]=NULL;\n    }\n};\n\nvoid insert(Treenode *&amp;root, ll ip, int flag, int mask, int index)//向以root为根结点的树中插入串word\n{\n    Treenode *location=root;\n\n    if(location==NULL) {\n        location = new Treenode(-1);\n        root=location;\n    }\n    for (int i = 31; i &gt;= 31 - (mask - 1); i--) {\n        int branch = ((ip &amp; (1 &lt;&lt; i)) &gt;&gt; i);\n        if(!location-&gt;next[branch]) {\n            location-&gt;next[branch]=new Treenode(-1);//如果不存在，建新结点\n        }\n        location=location-&gt;next[branch];\n    }\n    if(location-&gt;status == -1) {\n        location-&gt;status = flag;\n        location-&gt;index = index;\n    }\n}\n\nint search(Treenode *root, ll ip)//查找，与插入类似\n{\n    Treenode *location=root;\n    int ans = 1;\n    int index = 100001;\n    if(location==NULL) return 0;\n\n    for (int i = 31; i &gt;= 0; i--)\n    {\n//        cout &lt;&lt; location-&gt;status;\n        if (location-&gt;status != -1 &amp;&amp; location-&gt;index &lt; 100001)\n        {\n            ans = location-&gt;status;\n        }\n        int k = ((ip&amp;(1 &lt;&lt; i))&gt;&gt;i);\n        if (location-&gt;next[k] == NULL)\n            break;\n        location = location-&gt;next[k];\n    }\n\n\n    return ans;\n}\nint main()\n{\n    int m, n;\n    while (scanf(&quot;%d%d&quot;, &amp;m, &amp;n) != EOF) {\n        Treenode *root = NULL;\n\n        for (int i = 0; i &lt; m; i++) {\n            char a[10];\n            scanf(&quot;%s&quot;, a);\n            ll ip1, ip2, ip3, ip4;\n            char b;\n            scanf(&quot;%lld.%lld.%lld.%lld%c&quot;, &amp;ip1, &amp;ip2, &amp;ip3, &amp;ip4, &amp;b);\n\n            ll ip = (ip1 &lt;&lt; 24) + (ip2 &lt;&lt; 16) + (ip3 &lt;&lt; 8) + ip4;\n            int mask = 32;\n            if (b == &apos;/&apos;) {\n                scanf(&quot;%d&quot;, &amp;mask);\n            }\n\n            if (a[0] == &apos;a&apos;) {\n                insert(root, ip, 1, mask, i);\n            } else {\n                insert(root, ip, 0, mask, i);\n            }\n        }\n        for (int j = 0; j &lt; n; ++j) {\n            ll ip1, ip2, ip3, ip4;\n            scanf(&quot;%lld.%lld.%lld.%lld&quot;, &amp;ip1, &amp;ip2, &amp;ip3, &amp;ip4);\n            ll ip = (ip1 &lt;&lt; 24) + (ip2 &lt;&lt; 16) + (ip3 &lt;&lt; 8) + ip4;\n            if (search(root, ip)) {\n                cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;\n            } else {\n                cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;\n            }\n        }\n    }\n\n    return 0;\n}\n</code></pre><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>13 May 2017 11:57 PM </p>\n</blockquote>\n"},{"title":"leetcode 134. Gas Station","url":"http://code4fun.me/2017/05/10/leetcode 134. Gas Station/","content":"<pre><code>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].\n\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\n\nReturn the starting gas station&apos;s index if you can travel around the circuit once, otherwise return -1.\n\nclass Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        int start = gas.size() - 1;\n        int end = 0;\n        int sum = 0;\n        sum = gas[start] - cost[start];\n        while(start &gt; end) {\n            if(sum &gt;= 0) {\n                sum += gas[end] - cost[end];\n                end++;\n\n            }\n            else {\n                start--;\n                sum += gas[start] - cost[start];\n            }\n        }\n        return sum &gt;= 0 ? start : -1;\n\n    }\n};\n</code></pre><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>10 May 2017 2:19 PM </p>\n</blockquote>\n"},{"title":"leetcode 96. Unique Binary Search Trees","url":"http://code4fun.me/2017/05/02/leetcode 96. Unique Binary Search Trees/","content":"<pre><code>Given n, how many structurally unique BST&apos;s (binary search trees) that store values 1...n?\n\nFor example,\nGiven n = 3, there are a total of 5 unique BST&apos;s.\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n\nclass Solution {\npublic:\n    int numTrees(int n) {\n        int dp[n + 1] = {0};\n        dp[0] = 1;\n        dp[1] = 1;\n        for(int i = 2; i &lt;= n; i++) {\n            for(int j = 1; j &lt;= i; j++) {\n                dp[i] += dp[j - 1] * dp[i - j];\n            }\n        }\n\n        return dp[n];\n    }\n};\n</code></pre><p>可以根据左右对称性对问题做进一步优化。</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2 May 2017 7:32 PM </p>\n</blockquote>\n"},{"title":"leetcode 338. Counting Bits","url":"http://code4fun.me/2017/05/02/leetcode 338. Counting Bits/","content":"<pre><code>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1&apos;s in their binary representation and return them as an array.\n\nExample:\nFor num = 5 you should return [0,1,1,2,1,2].\n\nclass Solution {\npublic:\n    vector&lt;int&gt; countBits(int num) {\n        vector&lt;int&gt; result(num + 1, 0);\n        for(int i = 1; i &lt;= num; i++) {\n            // 发现i的变化规律\n            result[i] = result[i &amp; (i - 1)] + 1;\n        }\n        return result;\n    }\n};\n</code></pre><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2 May 2017 7:05 PM </p>\n</blockquote>\n"},{"title":"leetcode 70. Climbing Stairs","url":"http://code4fun.me/2017/05/02/leetcode 70. Climbing Stairs/","content":"<p>You are climbing a stair case. It takes n steps to reach to the top.</p>\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\n<p>Note: Given n will be a positive integer.</p>\n<p>本质上就是Fibonacci数列（想起了高中数学老师说的菲尔拨拉数列，哈哈哈）<br>    class Solution {<br>    public:<br>        int climbStairs(int n) {<br>            int ways[n + 1];<br>            if(n &gt;= 1) {<br>                ways[1] = 1;<br>            }<br>            if (n &gt;= 2) {<br>                ways[2] = 2;<br>            }<br>            int k = 3;<br>            while(k &lt;= n) {<br>                ways[k] = ways[k - 1] + ways[k - 2];<br>                k++;<br>            }<br>            return ways[n];<br>        }<br>    };</p>\n<p>在leetcode上看到一种很有意思的解法。<br>    int climbStairs(int n) {<br>        int a = 1, b = 1;<br>        while (n–)<br>            a = (b += a) - a;<br>        return a;<br>    }</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2 May 2017 6:42 PM </p>\n</blockquote>\n"},{"title":"leetcode Two Sum","url":"http://code4fun.me/2017/05/01/leetcode/","content":"<pre><code>Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n\nclass Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) {\n        unordered_map&lt;int, int&gt; hash;\n        vector&lt;int&gt; result;\n        for (int i = 0; i &lt; numbers.size(); i++) {\n            int numberToFind = target - numbers[i];\n\n            //if numberToFind is found in map, return them\n            if (hash.find(numberToFind) != hash.end()) {\n                result.push_back(hash[numberToFind]);\n                result.push_back(i);            \n                return result;\n            }\n\n            //number was not found. Put it in the map.\n            hash[numbers[i]] = i;\n        }\n        return result;\n    }\n};\n</code></pre><blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>1 May 2017 7:51 PM </p>\n</blockquote>\n"},{"title":"leetcode 345. Reverse Vowels of a String","url":"http://code4fun.me/2017/04/26/leetcode 345. Reverse Vowels of a String/","content":"<p>Write a function that takes a string as input and reverse only the vowels of a string.<br>Example 1:<br>Given s = “hello”, return “holle”.<br>Example 2:<br>Given s = “leetcode”, return “leotcede”.<br>    class Solution {<br>    public:<br>        unordered_set<char> vowels = {‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’, ‘U’};<br>        string reverseVowels(string s) {</char></p>\n<pre><code>        int start = 0;\n        int end = s.length() - 1;\n        while(start &lt; end) {\n            if(vowels.find(s[start]) != vowels.end() &amp;&amp; vowels.find(s[end]) != vowels.end()) {\n                swap(s[start], s[end]);\n                start++;\n                end--;\n            }\n            else if(vowels.find(s[start]) != vowels.end()) {\n                end--;\n            }\n            else if(vowels.find(s[end]) != vowels.end()) {\n                start++;\n            }\n            else {\n                start++;\n                end--;\n            }\n        }\n        return s;\n    }\n};\n</code></pre>"},{"title":"leetcode 100 same tree","url":"http://code4fun.me/2017/04/25/leetcode 100 same tree/","content":"<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>\n<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if(p == NULL &amp;&amp; q == NULL) {\n            return true;\n        }\n        else if(p == NULL || q == NULL || p-&gt;val != q-&gt;val) {\n            return false;\n        }\n        else {\n            return isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n        }\n    }\n};\n</code></pre>"},{"title":"hiho 1237 fathest point","url":"http://code4fun.me/2017/04/25/hiho 1237 fathest point/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;math.h&gt;</div><div class=\"line\">double x0,yo,r;</div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">        while(scanf(&quot;%lf%lf%lf&quot;,&amp;x0,&amp;yo,&amp;r)&gt;0)</div><div class=\"line\">        &#123;</div><div class=\"line\">            int maxx=floor(x0+r);</div><div class=\"line\">            int minx=ceil(x0-r);</div><div class=\"line\">            int ansx=0,ansy=0;</div><div class=\"line\">            double dis=0;</div><div class=\"line\">            for(int x=minx;x&lt;=maxx;x++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                int y=floor(yo+sqrt(r*r-(x*1.000-x0)*(x*1.000-x0)));</div><div class=\"line\">                if(sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo))&gt;dis||(sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo))==dis&amp;&amp;((x&gt;ansx||(x==ansx&amp;&amp;y&gt;ansy)))))</div><div class=\"line\">                    ansx=x,ansy=y,dis=sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo));</div><div class=\"line\">                y=ceil(yo-sqrt(r*r-(x*1.000-x0)*(x*1.000-x0)));</div><div class=\"line\">                if(sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo))&gt;dis||(sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo))==dis&amp;&amp;((x&gt;ansx||(x==ansx&amp;&amp;y&gt;ansy)))))</div><div class=\"line\">                    ansx=x,ansy=y,dis=(sqrt((x*1.000-x0)*(x*1.000-x0)+(y*1.000-yo)*(y*1.000-yo)));</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            printf(&quot;%d %d\\n&quot;,ansx,ansy);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"hiho 1284 - 机会渺茫","url":"http://code4fun.me/2017/04/25/hiho 1284 - 机会渺茫/","content":"<p>Time Limit:5000ms<br>Case Time Limit:1000ms<br>Memory Limit:256MB</p>\n<p>Description<br>小Hi最近在追求一名学数学的女生小Z。小Z其实是想拒绝他的，但是找不到好的说辞，于是提出了这样的要求：对于给定的两个正整数N和M，小Hi随机选取一个N的约数N’，小Z随机选取一个M的约数M’，如果N’和M’相等，她就答应小Hi。<br>小Z让小Hi去编写这个随机程序，到时候她review过没有问题了就可以抽签了。但是小Hi写着写着，却越来越觉得机会渺茫。那么问题来了，小Hi能够追到小Z的几率是多少呢？<br>Input<br>每个输入文件仅包含单组测试数据。<br>每组测试数据的第一行为两个正整数N和M，意义如前文所述。<br>对于40%的数据，满足1\\&lt;=N,M\\&lt;=106<br>对于100%的数据，满足1\\&lt;=N,M\\&lt;=1012<br>Output<br>对于每组测试数据，输出两个互质的正整数A和B（以A分之B表示小Hi能够追到小Z的几率）。<br>Sample Input<br>3 2<br>Sample Output<br>4 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include &lt;math.h&gt;</div><div class=\"line\">long gcd(long, long);</div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    long m, n;</div><div class=\"line\">    scanf(&quot;%ld %ld&quot;, &amp;m, &amp;n);</div><div class=\"line\">    long temp;</div><div class=\"line\">    if(m &gt; n) &#123;</div><div class=\"line\">        temp = m;</div><div class=\"line\">        m = n;</div><div class=\"line\">        n = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    long same_sum = 0;</div><div class=\"line\">    long yinzi_m = 0;</div><div class=\"line\">    long yinzi_n = 0;</div><div class=\"line\">    for(long i = 1; i &lt;= sqrt(m); i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">       if (m % i == 0 &amp;&amp; n % i == 0) &#123;</div><div class=\"line\">          same_sum++;</div><div class=\"line\">          yinzi_n++;</div><div class=\"line\">          yinzi_m++;</div><div class=\"line\">       &#125;</div><div class=\"line\">       else if(m % i == 0) &#123;</div><div class=\"line\">           yinzi_m++;</div><div class=\"line\">           if(n % (m / i) == 0) &#123;</div><div class=\"line\">               same_sum++;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       else if (n % i == 0) &#123;</div><div class=\"line\">           yinzi_n++;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (long i = sqrt(m) + 1; i &lt;= sqrt(n); i++) &#123;</div><div class=\"line\">        if(n % i == 0) &#123;</div><div class=\"line\">            yinzi_n++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    yinzi_m *= 2;</div><div class=\"line\">    yinzi_n *= 2;</div><div class=\"line\">    long max_yinzi;</div><div class=\"line\">    max_yinzi = gcd(same_sum, yinzi_n * yinzi_m);</div><div class=\"line\">    printf(&quot;%ld %ld&quot;, yinzi_n * yinzi_m / max_yinzi, same_sum / max_yinzi);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">long gcd(long n, long m)</div><div class=\"line\">&#123;</div><div class=\"line\">    long t;</div><div class=\"line\">    while(n) &#123;</div><div class=\"line\">        t = m % n;</div><div class=\"line\">        m = n;</div><div class=\"line\">        n = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return m;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"leetcode 111. Minimum Depth of Binary Tree","url":"http://code4fun.me/2017/04/25/leetcode 111. Minimum Depth of Binary Tree/","content":"<p>Given a binary tree, find its minimum depth.<br>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(root == NULL) {\n            return 0;\n        }\n        else if(root-&gt;left == NULL) {\n            return minDepth(root-&gt;right) + 1;\n        }\n        else if(root-&gt;right == NULL) {\n            return minDepth(root-&gt;left) + 1;\n        }\n        else {\n            return min(minDepth(root-&gt;left), minDepth(root-&gt;right)) + 1;\n        }\n    }\n};\n</code></pre>"},{"title":"leetcode 164. Maximum Gap","url":"http://code4fun.me/2017/04/25/leetcode 164. Maximum Gap/","content":"<p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p>\n<p>Try to solve it in linear time/space.</p>\n<p>Return 0 if the array contains less than 2 elements.</p>\n<p>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</p>\n"},{"title":"leetcode 524. Longest Word in Dictionary through Deleting","url":"http://code4fun.me/2017/04/25/leetcode 524. Longest Word in Dictionary through Deleting/","content":"<pre><code>class Solution {\npublic:\n    int max_len = 0;\n    string result;\n    // 对数组中的每个string都去判断是否可以由原string得到，过程中保存最长的字符串\n    string findLongestWord(string s, vector&lt;string&gt;&amp; d) {\n        for(vector&lt;string&gt;::iterator p = d.begin(); p != d.end(); p++) {\n            findMax(s, *p);\n        }\n        return result;\n    }\n    void findMax(string s, string dic) {\n        int first;\n        for(int i = 0; i &lt; dic.length();i++) {\n            first = s.find(dic[i]);\n            if(first == -1) {\n                return;\n            }\n            s.erase(0, first + 1);\n        }\n        if(max_len &lt; dic.length()) {\n            max_len = dic.length();\n            result = dic;\n        }\n        else if(max_len == dic.length()) {\n            if(result &gt; dic)\n                result = dic;\n        }\n    }\n};\n</code></pre>"},{"title":"hiho 1283 - hiho密码","url":"http://code4fun.me/2017/04/25/hiho 1283 - hiho密码/","content":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> N;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;N);</div><div class=\"line\">    <span class=\"keyword\">int</span> x[N];</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; N;i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = N - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x[i] &lt; x[i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            mid = i;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; mid;j++) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, x[j]);</div><div class=\"line\">        <span class=\"keyword\">if</span> (j &lt; mid - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, x[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"hiho 1493 歌德巴赫猜想","url":"http://code4fun.me/2017/04/25/hiho 1493 歌德巴赫猜想/","content":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\n\nint isPrime(int k) {\n    if(k &lt;= 1) {\n        return 0;\n    } \n    else if(k == 2) {\n        return 1;\n    }\n    else if (k % 2 == 0) {\n        return 0;\n    }\n    for(int i = 2; i &lt;= ceil(sqrt(k));i++) {\n        if(k % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n\n}\nint main() {\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    for(int i = 2; i &lt;= n / 2;i++) {\n        if(isPrime(i) &amp;&amp; isPrime(n - i)) {\n            printf(&quot;%d %d&quot;, i, n - i);\n            break;\n        }\n    }\n    return 0;\n\n}\n</code></pre>"},{"title":"hiho 1494 一面砖墙","url":"http://code4fun.me/2017/04/25/hiho 1494 一面砖墙/","content":"<pre><code>#include&lt;stdio.h&gt;\n\nint main() {\n    int num[1000000] = {0};\n    int n, m, start, temp, max;\n    max = 0;\n    scanf(&quot;%d&quot;, &amp;n);\n    for(int i = 0;i &lt; n; i++) {\n        scanf(&quot;%d&quot;, &amp;m);\n        start = 0;\n        for(int j = 0; j &lt; m; j++) {\n            scanf(&quot;%d&quot;, &amp;temp);\n            start += temp;\n            num[start] += 1;\n        }\n    }\n    for(int i = 0;i &lt; 1000000;i++) {\n        if(max &lt; num[i] &amp;&amp; num[i] &lt; n)\n        {\n            max = num[i];\n        }\n    }\n    printf(&quot;%d&quot;, n - max);\n    return 0;\n}\n</code></pre>"},{"title":"leetcode 501. Find Mode in Binary Search Tree","url":"http://code4fun.me/2017/04/25/leetcode-501. Find Mode in Binary Search Tree/","content":"<pre><code>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than or equal to the node&apos;s key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node&apos;s key.\nBoth the left and right subtrees must also be binary search trees.\nFor example:\nGiven BST [1,null,2,2],\n   1\n    \\\n     2\n    /\n   2\nreturn [2].\n\nNote: If a tree has more than one mode, you can return them in any order.\n</code></pre><p>解法1:不考虑二叉查找树的特性，遍历查找添加到map，空间复杂度为O(n)</p>\n<pre><code>class Solution {\npublic:\n    unordered_map&lt;int,int&gt; umap;\n    int maximum = 0;\n    void preorder(TreeNode* root) {\n        if(root == NULL) {\n            return ;\n        }\n        // 如果在原map中没有索引，则加入map\n        if(umap.find(root-&gt;val) == umap.end())\n            umap[root-&gt;val] = 0;\n        else {\n            umap[root-&gt;val]++;\n            maximum = max(maximum, umap[root-&gt;val]);\n        }\n\n        preorder(root-&gt;left);\n        preorder(root-&gt;right);\n    }\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        umap.clear();\n        maximum = 0;\n        vector&lt;int&gt; ans;\n        if(root == NULL)\n            return ans;\n\n        preorder(root);\n\n        for(auto itr = umap.begin();itr != umap.end();itr++)\n            if(itr-&gt;second == maximum) // 如果值为最大值，则获取该索引\n                ans.push_back(itr-&gt;first);\n\n        return ans;\n\n    }\n};\n</code></pre><p>解法2: 考虑其特性，从左到右递增，二叉搜索树的中序遍历的结果恰好是所有数的递增序列，所以采用中序遍历，只需存储当前值就可以，不需要额外的空间<br>    class Solution {<br>    public:<br>        vector<int> result;<br>        int maxCount = 0, currentVal, tempCount = 0;<br>        void inorder(TreeNode<em> root) {<br>            if (root == NULL)<br>                return;<br>            // 从左子树开始<br>            inorder(root-&gt;left);<br>            tempCount++;<br>            if (root-&gt;val != currentVal) {<br>                currentVal = root-&gt;val;<br>                tempCount = 1;<br>            }<br>            if (tempCount &gt; maxCount) {<br>                maxCount = tempCount;<br>                // 有大于原来的清空，重新来<br>                result.clear();<br>                result.push_back(root-&gt;val);<br>            }<br>            else if (tempCount == maxCount) {<br>                result.push_back(root-&gt;val);<br>            }<br>            inorder(root-&gt;right);<br>        }<br>        vector<int> findMode(TreeNode</int></em> root) {<br>            inorder(root);<br>            return result;<br>        }</int></p>\n<pre><code>};\n</code></pre>"},{"title":"leetcode 543 Diameter of Binary Tree","url":"http://code4fun.me/2017/04/25/leetcode-543 Diameter of Binary Tree/","content":"<p>题目如下：<br>    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>\n<pre><code>Example:\nGiven a binary tree \n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \nReturn 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\n\nNote: The length of path between two nodes is represented by the number of edges between them.\n</code></pre><p>解决思路是：求出每一个点左右的最大深度，然后就可以计算出以该节点作为根节点的最大。<br>    /**</p>\n<pre><code> * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int result = 0;\n    int diameterOfBinaryTree(TreeNode* root) {\n        maxDeep(root);\n        return result;\n\n    }\n    int maxDeep(TreeNode* root) {\n        if(root == NULL) {\n            return -1;\n        }\n        else if(root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) {\n            return 0;\n        }\n        int leftDepth = maxDeep(root-&gt;left);\n        int rightDepth = maxDeep(root-&gt;right);\n        result = max(leftDepth + rightDepth + 2, result);\n        return max(leftDepth, rightDepth) + 1;\n    }\n};\n</code></pre>"},{"title":"leetcode 5. Longest Palindromic Substring","url":"http://code4fun.me/2017/04/25/leetcode 5. Longest Palindromic Substring/","content":"<pre><code>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample:\n\nInput: &quot;babad&quot;\n\nOutput: &quot;bab&quot;\n\nNote: &quot;aba&quot; is also a valid answer.\nExample:\n\nInput: &quot;cbbd&quot;\n\nOutput: &quot;bb&quot;\n\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        string result_s;\n        int test;\n        bool dp[s.length()][s.length()];\n\n        int result = 0;\n        for(int i = 0; i &lt; s.length();i++) {\n            dp[i][i] = 1;\n            result = 1;\n            result_s = s[0];\n\n        }\n        for(int i = s.length() - 1; i &gt;= 0; i--) {\n            for(int j = i; j &lt; s.length();j++) {\n                dp[i][j] = (s[i] == s[j]) // chars at i and j should match\n                           &amp;&amp; \n                           ( j-i &lt; 3  // if window is less than or equal to 3, just end chars should match\n                             || dp[i+1][j-1]  ); \n                if(dp[i][j] &amp;&amp; j - i + 1 &gt; result) {\n                    result = j - i + 1;\n                    result_s = s.substr(i, result);\n                }\n\n            }\n        }\n        return result_s;\n\n    }\n};\n</code></pre>"},{"title":"leetcode 43. Multiply Strings","url":"http://code4fun.me/2017/04/25/leetcode 43. Multiply Strings/","content":"<pre><code>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\n\n\n\n\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        string s;\n        int maxnum = 222;\n        int result[maxnum] = {0};\n        bool flag = true;\n        for(int i = 0; i &lt; num1.length(); i++) {\n            for(int j = 0; j &lt; num2.length(); j++) {\n                result[i + j] += (num1[num1.length() - 1 - i] - &apos;0&apos;) * (num2[num2.length() - 1 -j] - &apos;0&apos;) % 10;\n                result[i + j + 1] += (num1[num1.length() - 1 - i] - &apos;0&apos;) * (num2[num2.length() - 1 -j] - &apos;0&apos;) / 10;\n                if(result[i + j] &gt;= 10) {\n                    result[i + j + 1] += 1;\n                    result[i + j] -= 10;\n                }\n                if(result[i + j + 1] &gt;= 10) {\n                    result[i + j + 2] += 1;\n                    result[i + j + 1] -= 10;\n                }\n            }\n        }\n        for(int i = maxnum - 1; i &gt;= 0; i--) {\n            if(flag &amp;&amp; result[i] == 0) {\n                continue;\n            }\n            flag = false;\n\n            s += to_string(result[i]);\n\n        }\n        if(flag) s = &apos;0&apos;;\n\n        return s;\n\n    }\n};\n</code></pre>"},{"title":"leetcode 189. Rotate Array","url":"http://code4fun.me/2017/04/25/leetcode 189. Rotate Array/","content":"<pre><code>Rotate an array of n elements to the right by k steps.\n\nFor example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].\n\n\nclass Solution {\npublic:\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n        k = k % nums.size();\n        reverse(nums.begin(), nums.end());  \n    // 注意这里 vector 的 end()指向的是最后一个元素的下一个位置\n    // 而reverse 是一个左闭右开有始无终的操作\n        reverse(nums.begin(), nums.begin() + k);\n        reverse(nums.begin() + k, nums.end());\n    }\n};\n</code></pre>"},{"title":"leetcode 125. Valid Palindrome","url":"http://code4fun.me/2017/04/25/leetcode 125. Valid Palindrome/","content":"<pre><code>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nFor example,\n&quot;A man, a plan, a canal: Panama&quot; is a palindrome.\n&quot;race a car&quot; is not a palindrome.\n\n\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        transform(s.begin(), s.end(), s.begin(), ::toupper); \n        string b = s;\n        reverse(s.begin(), s.end());\n        int j = 0;\n        for(int i = 0; i &lt; s.length(); i++) {\n            if(!(s[i] &lt;= &apos;9&apos; &amp;&amp; s[i] &gt;= &apos;0&apos;) &amp;&amp; !(s[i] &lt;= &apos;Z&apos; &amp;&amp; s[i] &gt;= &apos;A&apos;)) {\n                continue;\n            }\n            while(!(b[j] &lt;= &apos;9&apos; &amp;&amp; b[j] &gt;= &apos;0&apos;) &amp;&amp; !(b[j] &lt;= &apos;Z&apos; &amp;&amp; b[j] &gt;= &apos;A&apos;)) {\n                j++;\n            }\n            if(s[i] != b[j]) {\n                return false;\n            }\n            j++;\n\n        }\n        return true;\n    }\n};\n</code></pre>"},{"title":"leetcode 146. LRU Cache","url":"http://code4fun.me/2017/04/25/leetcode 146. LRU Cache/","content":"<pre><code>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\n\nget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\nput(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\n\nFollow up:\nCould you do both operations in O(1) time complexity?\n\n\nclass LRUCache {\n    // 基本思想是用一个 map 保存所有的对，用于查找，\n    // 用一个双向列表维持顺序。\n    int m_capacity;\n    unordered_map&lt;int,  list&lt;pair&lt;int, int&gt;&gt;::iterator&gt; m_map; //m_map_iter-&gt;first: key, m_map_iter-&gt;second: list iterator;\n    list&lt;pair&lt;int, int&gt;&gt; m_list; //m_list_iter-&gt;first: key, m_list_iter-&gt;second: value;\npublic:\n    LRUCache(int capacity):m_capacity(capacity) {\n\n    }\n\n    int get(int key) {\n        auto found_iter = m_map.find(key);\n        if (found_iter == m_map.end()) //key doesn&apos;t exist\n            return -1;\n        m_list.splice(m_list.begin(), m_list, found_iter-&gt;second); //move the node corresponding to key to front\n        return found_iter-&gt;second-&gt;second;   \n    }\n\n    void put(int key, int value) {\n        auto found_iter = m_map.find(key);\n        if (found_iter != m_map.end()) //key exists\n        {\n            m_list.splice(m_list.begin(), m_list, found_iter-&gt;second); //move the node corresponding to key to front\n            found_iter-&gt;second-&gt;second = value;                        //update value of the node\n            return;\n        }\n        if (m_map.size() == m_capacity) //reached capacity\n        {\n           int key_to_del = m_list.back().first; \n           m_list.pop_back();            //remove node in list;\n           m_map.erase(key_to_del);      //remove key in map\n        }\n        m_list.emplace_front(key, value);  //create new node in list\n        m_map[key] = m_list.begin();       //create correspondence between key and node\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n</code></pre>"},{"title":"leetcode 102. Binary Tree Level Order Traversal","url":"http://code4fun.me/2017/04/25/leetcode 102. Binary Tree Level Order Traversal/","content":"<pre><code>Given a binary tree, return the level order traversal of its nodes&apos; values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\n\nclass Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\nqueue&lt;TreeNode*&gt; node_queue;\nqueue&lt;TreeNode*&gt; node_queue_temp;\nnode_queue.push(root);\nvector&lt;vector&lt;int&gt;&gt; result;\nvector&lt;int&gt; temp_result;\nwhile(!node_queue.empty()) {\nTreeNode* now_node = node_queue.front();\nnode_queue.pop();\nif(now_node != NULL) {\ntemp_result.push_back(now_node-&gt;val);\nnode_queue_temp.push(now_node-&gt;left);\nnode_queue_temp.push(now_node-&gt;right);\n}\nif(node_queue.empty() &amp;&amp; temp_result.size() &gt; 0) {\nresult.push_back(temp_result);\ntemp_result.clear();\nqueue&lt;TreeNode*&gt; empty;\nnode_queue = node_queue_temp;\nswap(node_queue_temp, empty );\n\n}\n}\nreturn result;\n}\n};\n</code></pre>"},{"title":"leetcode 232. Implement Queue using Stacks","url":"http://code4fun.me/2017/04/25/leetcode 232. Implement Queue using Stacks/","content":"<pre><code>Implement the following operations of a queue using stacks.\n\npush(x) -- Push element x to the back of queue.\npop() -- Removes the element from in front of queue.\npeek() -- Get the front element.\nempty() -- Return whether the queue is empty.\n\n\nclass MyQueue {\n    stack&lt;int&gt; st1;\n    stack&lt;int&gt; st2;\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n\n    }\n\n    /** Push element x to the back of queue. */\n    void push(int x) {\n        st1.push(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        int temp;\n        if(st2.empty()) {\n            while(!st1.empty()) {\n                temp = st1.top();\n                st1.pop();\n                st2.push(temp);\n            }\n\n        }\n        temp = st2.top();\n        st2.pop();\n        return temp;\n\n    }\n\n    /** Get the front element. */\n    int peek() {\n        int temp;\n        if(st2.empty()) {\n            while(!st1.empty()) {\n                temp = st1.top();\n                st1.pop();\n                st2.push(temp);\n            }\n\n        }\n        temp = st2.top();\n        return temp;\n    }\n\n    /** Returns whether the queue is empty. */\n    bool empty() {\n        if(st1.empty() &amp;&amp; st2.empty()) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * bool param_4 = obj.empty();\n */\n</code></pre>"},{"title":"leetcode 28 Implement strStr()","url":"http://code4fun.me/2017/04/25/leetcode 28 Implement strStr()/","content":"<pre><code>Total Accepted: 173158\nTotal Submissions: 628656\nDifficulty: Easy\nContributor: LeetCode\nImplement strStr().\n\nReturns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\n\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if(haystack.length() &lt; needle.length()) {\n            return -1;\n        }\n        for(int i = 0; i &lt;= haystack.length() - needle.length(); i++) {\n            bool flag = true;\n            for(int j = 0; j &lt; needle.length(); j++)\n                if(haystack[i + j] != needle[j]) {\n                    flag = false;\n                    break;\n                }\n            if(flag)\n                return i;\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"title":"leetcode 168. Excel Sheet Column Title","url":"http://code4fun.me/2017/04/25/leetcode 168. Excel Sheet Column Title/","content":"<pre><code>Given a positive integer, return its corresponding column title as appear in an Excel sheet.\n\nFor example:\n\n    1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB \n\n\nclass Solution {\npublic:\n    string convertToTitle(int n) {\n        string result = &quot;&quot;;\n        int flag = 0;\n        n = n - 1;\n        while(n &gt;= 0) {\n            result += &apos;A&apos; + n % 26;\n            n /= 26;\n            n -= 1;\n        }\n\n        reverse(result.begin(), result.end());\n        return result; \n    }\n};\n</code></pre>"},{"title":"leetcode 160-Intersection of Two Linked Lists","url":"http://code4fun.me/2017/04/25/leetcode 160-Intersection of Two Linked Lists/","content":"<pre><code>Write a program to find the node at which the intersection of two singly linked lists begins.\n\nFor example, the following two linked lists:\n\nA:          a1 → a2\n                   ↘\n                     c1 → c2 → c3\n                   ↗            \nB:     b1 → b2 → b3\nbegin to intersect at node c1.\n\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int len_A = 0, len_B = 0;\n        ListNode *p1, *p2;\n        p1 = headA;\n        p2 = headB;\n        if(!p1 || !p2) {\n            return NULL;\n        }\n        while(p1-&gt;next) {\n            p1 = p1-&gt;next;\n            len_A++;\n        }\n        while(p2-&gt;next) {\n            p2 = p2-&gt;next;\n            len_B++;\n        }\n        if(p1 != p2) {\n            return NULL;\n        }\n        else {\n            p1 = headA;\n            p2 = headB;\n            if(len_A &lt; len_B) {\n                ListNode *temp;\n                temp = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            int temp = 0;\n            while(p1) {\n                if(temp == abs(len_A - len_B)) {\n                    break;\n                }\n                p1 = p1-&gt;next;\n                temp++;\n            }\n            while(p2) {\n                if(p1 == p2) {\n                    return p1;\n                }\n                else {\n                    p1 = p1-&gt;next;\n                    p2 = p2-&gt;next;\n                }\n            }\n        }\n        return NULL;\n\n    }\n};\n</code></pre>"},{"title":"leetcode 258. Add Digits","url":"http://code4fun.me/2017/04/25/leetcode 258- Add Digits/","content":"<pre><code>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n\n\nclass Solution {\npublic:\n    int addDigits(int num) {\n        if(num &lt;= 9) {\n            return num;\n        }\n        else {\n            return (num % 9 == 0)?9:(num % 9);\n        }\n    }\n};\n</code></pre>"},{"title":"leetcode 21. Merge Two Sorted Lists","url":"http://code4fun.me/2017/04/25/LeetCode 21：Merge Two Sorted Lists/","content":"<pre><code>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n\nclass Solution {\npublic:\n    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\n        ListNode dummy(INT_MIN);\n        ListNode *tail = &amp;dummy;\n\n        while (l1 &amp;&amp; l2) {\n            if (l1-&gt;val &lt; l2-&gt;val) {\n                tail-&gt;next = l1;\n                l1 = l1-&gt;next;\n            } else {\n                tail-&gt;next = l2;\n                l2 = l2-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n\n        tail-&gt;next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};\n</code></pre>"},{"title":"leetcode 112. Path Sum","url":"http://code4fun.me/2017/04/25/leetcode 112. Path Sum/","content":"<pre><code>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n\nFor example:\nGiven the below binary tree and sum = 22,\n\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\nreturn true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int sum) {\n        if(root) {\n            if(root-&gt;val == sum &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right)\n                return true;\n            else\n                return hasPathSum(root-&gt;left, sum - root-&gt;val) || hasPathSum(root-&gt;right, sum - root-&gt;val);\n        }\n        else {\n            return false;\n        }\n    }\n};\n</code></pre>"},{"title":"leetcode 173. Binary Search Tree Iterator","url":"http://code4fun.me/2017/04/25/leetcode 173. Binary Search Tree Iterator/","content":"<pre><code>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.\n\nCalling next() will return the next smallest number in the BST.\n\nNote: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.\n\n\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass BSTIterator {\nprivate:\n    stack&lt;TreeNode*&gt; st;\n\n    /** put all the left child() of root */\n    void find_left(TreeNode* root)\n    {\n        TreeNode* p = root;\n        while (p != NULL)\n        {\n            st.push(p);\n            p = p-&gt;left;\n        }\n    }\npublic:\n    BSTIterator(TreeNode *root) {\n        find_left(root);\n    }\n\n    /** @return whether we have a next smallest number */\n    bool hasNext() {\n        return !st.empty();\n    }\n\n    /** @return the next smallest number */\n    int next() {\n        TreeNode* top = st.top();\n        st.pop();\n        if (top-&gt;right != NULL)\n            find_left(top-&gt;right);\n\n        return top-&gt;val;\n    }\n\n};\n\n/**\n * Your BSTIterator will be called like this:\n * BSTIterator i = BSTIterator(root);\n * while (i.hasNext()) cout &lt;&lt; i.next();\n */\n</code></pre>"},{"title":"leetcode 94. Binary Tree Inorder Traversal","url":"http://code4fun.me/2017/04/25/leetcode 94. Binary Tree Inorder Traversal/","content":"<pre><code>Given a binary tree, return the inorder traversal of its nodes&apos; values.\n\nFor example:\nGiven binary tree [1,null,2,3],\n   1\n    \\\n     2\n    /\n   3\nreturn [1,3,2].\n\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\nprivate:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root, vector&lt;int&gt; before) {\n        if(!root)   return before;\n        before = inorderTraversal(root-&gt;left, before);\n        before.push_back(root-&gt;val);\n\n        before = inorderTraversal(root-&gt;right, before);\n        return before;\n    }\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt; result;\n        return inorderTraversal(root, result);\n    }\n};\n</code></pre>"},{"title":"leetcode 165. Compare Version Numbers","url":"http://code4fun.me/2017/04/25/leetcode 165. Compare Version Numbers/","content":"<pre><code>Compare two version numbers version1 and version2.\nIf version1 &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.\n\nYou may assume that the version strings are non-empty and contain only digits and the . character.\nThe . character does not represent a decimal point and is used to separate number sequences.\nFor instance, 2.5 is not &quot;two and a half&quot; or &quot;half way to version three&quot;, it is the fifth second-level revision of the second first-level revision.\n\nHere is an example of version numbers ordering:\n\n0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37\n\n\nclass Solution {\npublic:\n    int compareVersion(string version1, string version2) {\n    for(auto&amp; w : version1) if (w == &apos;.&apos;) w=&apos; &apos;;\n    for(auto&amp; w : version2) if (w == &apos;.&apos;) w=&apos; &apos;;\n    istringstream s1(version1), s2(version2);\n    while(1) {\n        int n1,n2;\n        if (not(s1 &gt;&gt; n1) ) n1 = 0;\n        if (not(s2 &gt;&gt; n2) ) n2 = 0;\n        if (not s1 and not s2) return 0;\n        if (n1&lt;n2) return -1;\n        if (n1&gt;n2) return 1;\n    }\n}\n};\n</code></pre>"},{"title":"103. Binary Tree Zigzag Level Order Traversal","url":"http://code4fun.me/2017/04/25/leetcode 103 103. Binary Tree Zigzag Level Order Traversal/","content":"<p>题目要求：<br>    Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>\n<pre><code>For example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its zigzag level order traversal as:\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode* root) {\n        queue&lt;TreeNode*&gt; node_queue;\n        queue&lt;TreeNode*&gt; node_queue_temp;\n        node_queue.push(root);\n        vector&lt;vector&lt;int&gt;&gt; result;\n        vector&lt;int&gt; temp_result;\n        bool direction = true;\n        while(!node_queue.empty()) {\n            TreeNode* now_node = node_queue.front();\n            node_queue.pop();\n            if(now_node != NULL) {\n                temp_result.push_back(now_node-&gt;val);\n                node_queue_temp.push(now_node-&gt;left);\n                node_queue_temp.push(now_node-&gt;right);\n            }\n            if(node_queue.empty() &amp;&amp; temp_result.size() &gt; 0) {\n                if(direction)\n                    result.push_back(temp_result);\n                else {\n                    reverse(temp_result.begin(), temp_result.end());\n                    result.push_back(temp_result);\n                }\n\n                direction = !direction;\n                temp_result.clear();\n                queue&lt;TreeNode*&gt; empty;\n                node_queue = node_queue_temp;\n                swap(node_queue_temp, empty );\n\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"title":"leetcode 101. Symmetric Tree","url":"http://code4fun.me/2017/04/08/leetcode 101. Symmetric Tree/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Definition for a binary tree node.</div><div class=\"line\"> * struct TreeNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     TreeNode *left;</div><div class=\"line\"> *     TreeNode *right;</div><div class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    bool isSymmetric(TreeNode* root) &#123;</div><div class=\"line\">        if(root == NULL) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            return isSame(root-&gt;left, root-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">private:</div><div class=\"line\">    bool isSame(TreeNode* left_tree, TreeNode* right_tree) &#123;</div><div class=\"line\">        if(left_tree == NULL &amp;&amp; right_tree == NULL) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if(left_tree == NULL || right_tree == NULL || left_tree-&gt;val != right_tree-&gt;val) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            return isSame(left_tree-&gt;left, right_tree-&gt;right) &amp;&amp; isSame(left_tree-&gt;right, right_tree-&gt;left);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"leetcode 108","url":"http://code4fun.me/2017/04/08/leetcode 108/","content":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        return sortedArrayToBST(nums, 0, nums.size() - 1);\n    }\nprivate:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt; &amp;nums, int start, int end)\n    {\n        if (start &gt; end)\n        {\n            return NULL;\n        }\n\n        int mid = (start + end) / 2;\n        TreeNode* node = new TreeNode(nums[mid]);\n        node-&gt;left = sortedArrayToBST(nums, start, mid - 1);\n        node-&gt;right = sortedArrayToBST(nums, mid + 1, end);\n        return node;\n    }\n};\n</code></pre>"},{"title":"2017 的 1/6 总结","url":"http://code4fun.me/2017/02/27/1-6 review/","content":"<p>2017年已经过去了六分之一，想想还是很快的，所以不得不做一个review了。</p>\n<p>一个最大的问题就是博客文章跟不上，虽然说已经占了好几个坑，但是只填了一个坑，离当初定的目标还差得挺多，也许是玩得太多了的原因。</p>\n<p>学习内容方面也差了很多，由于深度学习的原因，docker 基本看了部分，了解并实践了基本操作， iOS 还差得挺多。总是没有比较大块的时间，需要思考一些解决办法了。要不这样下去，一年又做不了什么。</p>\n<p>这个月看完《 iOS 10 Swift Programming Cookbook》，并着手微博的开发，不要让别的荒废了。</p>\n"},{"title":"Laravel 与 tinymce结合","url":"http://code4fun.me/2017/02/13/tinymce for laravel/","content":"<p>站坑</p>\n"},{"title":"《软技能：代码之外的生存指南》读书笔记","url":"http://code4fun.me/2017/02/13/soft-skill-reading/","content":"<p>站坑</p>\n"},{"title":"《GitHub入门与实践》 读书笔记","url":"http://code4fun.me/2017/02/13/GitHub-start/","content":"<p>站坑</p>\n"},{"title":"利用深度学习实现地海杂波识别","url":"http://code4fun.me/2017/02/13/deep-learning-classication/","content":"<p>站坑</p>\n"},{"title":"离线安装深度学习框架","url":"http://code4fun.me/2017/01/16/deeplearning-offline/","content":"<p>由于有台电脑不能连接互联网，且其中的有些数据需要应用到深度学习框架来进行分类，经过好几天的实践终于完成了。下面是实践出来的几种方法。</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>这是我最终采用的方法，因为这个是最简单省事的。Docker 产生的目的是帮助我们一次配置，处处使用，作为一个容器技术，可以很方便的完成我们的需求，由于我们的采用的是 Windows 主机，就以 Windows 为例。</p>\n<h3 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h3><p>在 Linux 系统下安装 Docker 是很简单的，添加好 Docker 的 APT 仓库，然后直接执行<br><code>sudo apt-get install docker-engine</code><br>即可。具体的可以参照官网。</p>\n<p>在 Windows 下可以使用 <a href=\"https://www.docker.com/toolbox\" target=\"_blank\" rel=\"external\">Docker Toolbox</a> 这个包括运行 Docker 所需的一切组件的集合，根据提示操作就可以安装好。在安装好好软件之后，启动 Docker 的命令行，会提示你需要打开<em>硬盘虚拟化</em>，根据操作系统进入 BIOS 即可，这时候就可以进入 Docker 界面了。</p>\n<h3 id=\"联网获取-Docker-镜像\"><a href=\"#联网获取-Docker-镜像\" class=\"headerlink\" title=\"联网获取 Docker 镜像\"></a>联网获取 Docker 镜像</h3><p>当然，我们需要联网获取 Docker 镜像，先找一台可以联网的电脑，然后拉取相关镜像，把镜像导出，再把镜像导入就可以了。本以为是很简单的一件事情，结果实践起来，状况百出。</p>\n<p>首先是各种网络问题，国内局域网的力量是强大的，各种无法连接服务器或者是网速很慢，无奈之下，好在还有一个国外的服务器，索性去服务器上 pull 下来，然后再本地拉取服务器上的镜像。</p>\n<p>第二是 Keras 的各种镜像水平良莠不齐，有的是版本过低，有的是缺少一些必须库，多次尝试无果之下，只得重新写了一个CPU版本的 <a href=\"https://github.com/zhangzhishan/keras-dl\" target=\"_blank\" rel=\"external\">Dockerfile</a>，可以直接采用下面命令运行，即自动拉取镜像并运行了。<br><code>docker run -it -p 8888:8888 -p 6006:6006 zhishanzhang/keras-dl bash</code></p>\n<h3 id=\"导出导入镜像\"><a href=\"#导出导入镜像\" class=\"headerlink\" title=\"导出导入镜像\"></a>导出导入镜像</h3><p>到达这一步就很简单了，导出镜像。<br><code>docker save -o zhishanzhang/keras-dl &gt; keras-dl.tar</code><br>把镜像导入<br><code>docker load -i keras-dl.tar</code></p>\n<h3 id=\"Just-Enjoy-It\"><a href=\"#Just-Enjoy-It\" class=\"headerlink\" title=\"Just Enjoy It\"></a>Just Enjoy It</h3><p>这时候可以继续运行之前的命令，做自己的工作了。<br>P.S.：在 Docker 运行命令中可以使用 -v 参数把文件夹映射如 Docker Container 中，如下面命令。<br><code>docker run -it -p 8888:8888 -p 6006:6006 zhishanzhang/keras-dl -v ~/test:/root/test bash</code></p>\n"},{"title":"C++ 0x0a problem","url":"http://code4fun.me/2017/01/16/C++ 0x0a problem/","content":"<p>在<code>C++</code>中<code>fopen</code>在非二进制工作模式下会自动的把<code>0x0a</code>（也即<code>\\n</code>）转成<code>0x0d 0x0a</code>（也即<code>\\r\\n</code>），只有在<code>fopen</code>的模式中选择<code>wb</code>，其可以避免translate。</p>\n<p>但是，即使是不translate在windows平台里面的编辑器等中也会显示为换行。也即，单凭肉眼是分辨不出正常的情况。</p>\n<p>另：在高版本的VS中需要使用，<code>fopen_s(&amp;fp, &quot;file.txt&quot;, &quot;wb&quot;);</code>。</p>\n<h2 id=\"t-mode\"><a href=\"#t-mode\" class=\"headerlink\" title=\"t mode\"></a>t mode</h2><p>也即text(translated) mode.</p>\n<p>Open in text (translated) mode. In this mode, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading/writing with <code>&quot;a+&quot;</code>, <code>fopen_s</code> checks for a CTRL+Z at the end of the file and removes it, if possible. This is done because using <code>fseek</code> and <code>ftell</code> to move within a file that ends with a CTRL+Z, may cause <code>fseek</code> to behave improperly near the end of the file.</p>\n<p>Also, in text mode, carriage return–linefeed combinations are translated into single linefeeds on input, and linefeed characters are translated to carriage return–linefeed combinations on output. When a Unicode stream-I/O function operates in text mode (the default), the source or destination stream is assumed to be a sequence of multibyte characters. Therefore, the Unicode stream-input functions convert multibyte characters to wide characters (as if by a call to the <code>mbtowc</code> function). For the same reason, the Unicode stream-output functions convert wide characters to multibyte characters (as if by a call to the <code>wctomb</code> function).</p>\n<h2 id=\"b-mode\"><a href=\"#b-mode\" class=\"headerlink\" title=\"b mode\"></a>b mode</h2><p>Open in binary (untranslated) mode; translations involving carriage-return and linefeed characters are suppressed.</p>\n"},{"title":"基于持续自由能的多目标跟踪技术研究","url":"http://code4fun.me/2017/01/06/energy4track/","content":"<p>该方法的目的是采用一种能量方法在多目标跟踪问题中来对跟踪结果进行优化。模型分成两部分来进行介绍，第一部分为能量函数，另一部分为对能量函数的优化。</p>\n<h2 id=\"能量函数\"><a href=\"#能量函数\" class=\"headerlink\" title=\"能量函数\"></a>能量函数</h2><p>对于能量函数，我们需要两个方面的要求，首先他需要反映目标的状态，其次他应该是一个凸函数，这样才能在不考虑初值的情况下取得一个全局最优解。我们下面将分情况来介绍各个能量模型。$ test_{ass} $</p>\n<p>$$ E(X) = E<em>{det} + \\alpha E</em>{dyn} $$</p>\n<p>$$ E(X) = E<em>{det} + \\alpha E</em>{dyn} + \\beta E<em>{reg} + \\gamma E</em>{per} $$ </p>\n<h3 id=\"量测模型能量\"><a href=\"#量测模型能量\" class=\"headerlink\" title=\"量测模型能量\"></a>量测模型能量</h3>"},{"title":"2017 新年计划","url":"http://code4fun.me/2017/01/02/2017 plan/","content":"<p>上次写这种年度计划，还仅仅是个读书计划，还是2013年1月18日，在印象笔记里面，结果后来就不了了之了，整整一年都没有再管这个事情，完全抛之脑后，这次重新认真的指定一个计划。</p>\n<p><img src=\"http://7xqmjb.com1.z0.glb.clouddn.com/20170102148328807738435.jpg\" alt=\"jpg\"></p>\n<h2 id=\"每月计划\"><a href=\"#每月计划\" class=\"headerlink\" title=\"每月计划\"></a>每月计划</h2><ul>\n<li>对当月进度进行盘点（重要！！）</li>\n<li>完成4篇博客文章（简书同步）</li>\n</ul>\n<h2 id=\"整体性计划\"><a href=\"#整体性计划\" class=\"headerlink\" title=\"整体性计划\"></a>整体性计划</h2><ul>\n<li>完成读书任务并至少为技术书籍每本撰写读书笔记</li>\n<li>在Github上收获100颗star</li>\n<li>完成两个iOS App（初步指定为一个微博，一个设计类App）</li>\n<li>阅读 Alamofire 的源代码，并总结笔记</li>\n<li>网站简历完成✅</li>\n<li>完善 Laravel 的设计模式</li>\n</ul>\n<h2 id=\"待点亮技能点\"><a href=\"#待点亮技能点\" class=\"headerlink\" title=\"待点亮技能点\"></a>待点亮技能点</h2><ul>\n<li>Swift</li>\n<li>微服务</li>\n<li>docker（运用其去部署一个服务）✅</li>\n<li>RESTful API</li>\n<li>GTD</li>\n</ul>\n<h2 id=\"读书清单\"><a href=\"#读书清单\" class=\"headerlink\" title=\"读书清单\"></a>读书清单</h2><ul>\n<li>软技能  ✅</li>\n<li>Beginning Laravel</li>\n<li>iOS 10 Swift Programming Cookbook</li>\n<li>objio 三本书</li>\n<li>bignerd 两本书</li>\n<li>失控</li>\n<li>引爆点 <a href=\"\">一份读书笔记</a>(<a href=\"http://www.iiiyu.com/2015/01/31/read-the-tipping-point/\" target=\"_blank\" rel=\"external\">http://www.iiiyu.com/2015/01/31/read-the-tipping-point/</a>)</li>\n<li>把你的英语用起来。恶魔奶爸</li>\n<li>汤姆·索亚历险记</li>\n<li>牧羊少年奇幻之旅 英文版（已看过中文版）</li>\n<li>野心时代</li>\n<li>科技想要什么</li>\n<li>信息论 编码与密码学</li>\n<li>vim 实用技巧 ✅</li>\n<li>编码的奥秘代码大全</li>\n<li>企业应用架构</li>\n<li>RESTful Web APIs</li>\n<li>第一本docker书</li>\n<li>微服务设计</li>\n<li>啊哈! 算法</li>\n<li>程序员健康指南:get fit, fell better, and keep coding</li>\n<li>这本书叫什么:奇谲的逻辑谜题</li>\n<li>技术之瞳</li>\n<li>GitHub 入门与实践 ✅</li>\n<li>如何阅读一本书</li>\n<li>Pro Git</li>\n<li>UP &amp; GOING JS ✅</li>\n<li>小强升职记</li>\n<li>奇石 ✅</li>\n</ul>\n"},{"title":"Mysql password expired","url":"http://code4fun.me/2016/12/02/Mysql password expired/","content":"<p>今天登录网页，突然出现了这个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Your password has expired. To log in you must change it using a client that supports expired passwords.</div></pre></td></tr></table></figure>\n<p>其实解决方法很简单，只需要登录到服务器中的 Mysql，然后修改root 的密码就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;new_password&apos;, &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER;</div></pre></td></tr></table></figure>\n"},{"title":"Laravel 项目移植指南","url":"http://code4fun.me/2016/11/20/Laravel-migrate/","content":"<p>由于一些特殊原因，虽然采用 Laravel 开发的网站，但是并没有使用 Vagrant，于是只得手工移植。下面是具体流程。</p>\n<h2 id=\"代码移植\"><a href=\"#代码移植\" class=\"headerlink\" title=\"代码移植\"></a>代码移植</h2><p>采用的 Github 进行版本控制及管理，所以很简单，单纯的配置好 Github，然后<code>git pull</code> 一下。</p>\n<h2 id=\"安装composer\"><a href=\"#安装composer\" class=\"headerlink\" title=\"安装composer\"></a>安装composer</h2><p>当然，作为一个现代的 PHP 开发，我们采用 composer 进行依赖管理，具体安装方法可以参考<a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">官网</a>, 基本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;</div><div class=\"line\">php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;92102166af5abdb03f49ce52a40591073a7b859a86e8ff13338cf7db58a19f7844fbc0bb79b2773bf30791e935dbd938&apos;) &#123; echo &apos;Installer verified&apos;; &#125; else &#123; echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); &#125; echo PHP_EOL;&quot;</div><div class=\"line\">php composer-setup.php</div><div class=\"line\">php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;</div></pre></td></tr></table></figure>\n<p>上面是全局安装，将 composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。<br>但是由于一些众所周知的原因，composer 在国内无法访问，只得采用<a href=\"http://pkg.phpcomposer.com/#how-to-install-composer\" target=\"_blank\" rel=\"external\">国内的源</a>，所以我们需要修改 composer 的全局配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>\n<p>一切就绪后就可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer install</div></pre></td></tr></table></figure>\n<p>由于网络环境的问题，可能会出现各种 time out， 多试几次就好了。</p>\n<h2 id=\"修改-PHP-配置文件\"><a href=\"#修改-PHP-配置文件\" class=\"headerlink\" title=\"修改 PHP 配置文件\"></a>修改 PHP 配置文件</h2><p>这时候如果试着用<code>php artisan serve</code>运行服务器，可能会出现类似下面的错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">The Process class relies on proc_open, which is not available on your PHP installation.</div></pre></td></tr></table></figure></p>\n<p>这是 PHP 配置文件的问题，可以通过修改<code>php.ini</code>中的<code>disable_functions</code>，删除掉报错的相关函数即刻。 </p>\n<h2 id=\"路由-rewrite\"><a href=\"#路由-rewrite\" class=\"headerlink\" title=\"路由 rewrite\"></a>路由 rewrite</h2><p>假设已经配置好基本的网站服务器文件，这时候还需要进行路由重写，这个主要是使得链接更加美观。</p>\n<h3 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Apache-配置\"><a href=\"#Apache-配置\" class=\"headerlink\" title=\"Apache 配置\"></a>Apache 配置</h3><p>首先确保打开<code>mod_rewrite</code>模块，然后修改<code>.htaccess</code>如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Options +FollowSymLinks</div><div class=\"line\">RewriteEngine On</div><div class=\"line\"></div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class=\"line\">RewriteRule ^ index.php [L]</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a></p>\n</blockquote>\n"},{"title":"One App for one thing","url":"http://code4fun.me/2016/11/20/oneapp4onething/","content":"<h2 id=\"有些事情就是需要找出唯一来啊，本文就把常用的事情用列表列出，在我看来最好的那个-App，不过估计只有-iOS-端的，谷粉就对不起-lt-＿-＿-gt-。\"><a href=\"#有些事情就是需要找出唯一来啊，本文就把常用的事情用列表列出，在我看来最好的那个-App，不过估计只有-iOS-端的，谷粉就对不起-lt-＿-＿-gt-。\" class=\"headerlink\" title=\"有些事情就是需要找出唯一来啊，本文就把常用的事情用列表列出，在我看来最好的那个 App，不过估计只有 iOS 端的，谷粉就对不起~ &lt;(＿　＿)&gt; 。\"></a>有些事情就是需要找出唯一来啊，本文就把常用的事情用列表列出，在我看来最好的那个 App，不过估计只有 iOS 端的，谷粉就对不起~ &lt;(＿　＿)&gt; 。</h2><p>不过鉴于不是每个人都乐于为 App 付费，分成两部分，付费和免费版（一元钱的给算成免费版了）,一个的可能就是免费或者付费了，表示无出其右的。</p>\n<ul>\n<li><h1 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h1><ul>\n<li>微博 <a href=\"https://itunes.apple.com/us/app/moke-chun-cui-ti-yan-for-xin/id880813963?mt=8\" target=\"_blank\" rel=\"external\">墨客</a>/ <a href=\"https://itunes.apple.com/us/app/vvebo-wei-bo-ke-hu-duan/id670910957?mt=8\" target=\"_blank\" rel=\"external\">VVebo</a></li>\n<li>Twitter <a href=\"https://itunes.apple.com/us/app/tweetbot-3-for-twitter.-elegant/id722294701?mt=8\" target=\"_blank\" rel=\"external\">Tweetbot</a>/ <a href=\"https://itunes.apple.com/us/app/twitterrific-5-for-twitter/id580311103?mt=8\" target=\"_blank\" rel=\"external\">Twitterrific</a> </li>\n<li>播客 <a href=\"https://itunes.apple.com/app/castro-high-fidelity-podcasts/id723142770?mt=8&amp;ign-mpt=uo%3D4\" target=\"_blank\" rel=\"external\">Castro</a>/ <a href=\"https://itunes.apple.com/us/app/overcast-podcast-player/id888422857?mt=8\" target=\"_blank\" rel=\"external\">Overcast</a></li>\n<li>RSS <a href=\"https://itunes.apple.com/us/app/reeder-2/id697846300?mt=8\" target=\"_blank\" rel=\"external\">Reeder 2</a>/ <a href=\"https://itunes.apple.com/us/app/inoreader-rss-news-reader/id892355414?mt=8\" target=\"_blank\" rel=\"external\">Inoreader</a></li>\n<li>相机 <a href=\"https://itunes.apple.com/us/app/camera+/id329670577?mt=8\" target=\"_blank\" rel=\"external\">Camera+</a>/ <a href=\"https://itunes.apple.com/cn/app/hellocamera-camera360gai-nian/id545623778?mt=8\" target=\"_blank\" rel=\"external\">HelloCamera</a></li>\n</ul>\n</li>\n<li><h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><ul>\n<li>邮箱 <a href=\"https://itunes.apple.com/us/app/mailbox/id576502633?mt=8\" target=\"_blank\" rel=\"external\">Mailbox</a>/ <a href=\"https://itunes.apple.com/us/app/microsoft-outlook/id951937596?mt=8\" target=\"_blank\" rel=\"external\">Outlook</a></li>\n<li>文件浏览 <a href=\"https://itunes.apple.com/us/app/goodreader/id777310222?mt=8\" target=\"_blank\" rel=\"external\">GoodReader</a>/ <a href=\"https://itunes.apple.com/us/app/documents-5-fast-pdf-reader/id364901807?mt=8\" target=\"_blank\" rel=\"external\">Documents 5</a></li>\n<li>GTD <a href=\"https://itunes.apple.com/cn/app/omnifocus-2-for-iphone/id690305341?mt=8\" target=\"_blank\" rel=\"external\">OmniFocus</a>/ OmniFocus 盗版（感觉 GTD 没有能够和 OF 相比的了）</li>\n<li>词典 <a href=\"https://itunes.apple.com/us/app/ou-lu-ying-yu-ci-dian-eudic/id393670998?mt=8\" target=\"_blank\" rel=\"external\">欧陆词典</a></li>\n<li>女性 <a href=\"https://itunes.apple.com/us/app/clue-period-tracker/id657189652?mt=8\" target=\"_blank\" rel=\"external\">Clue</a></li>\n<li>日历 <a href=\"https://itunes.apple.com/cn/app/fantastical-2-calendar-reminders/id718043190?mt=8&amp;ign-mpt=uo%3D4\" target=\"_blank\" rel=\"external\">Fantastical</a>/ <a href=\"Sunrise\">Sunrise</a></li>\n<li>文档 <a href=\"https://itunes.apple.com/us/app/dash-api-docs/id935284832?ls=1&amp;mt=8\" target=\"_blank\" rel=\"external\">Dash</a></li>\n</ul>\n</li>\n<li><h1 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h1><ul>\n<li>记录 <a href=\"https://itunes.apple.com/us/app/quick-drafts-notes-errands/id569838247?mt=8\" target=\"_blank\" rel=\"external\">Drafts</a>/ <a href=\"https://itunes.apple.com/us/app/quick-drafts-notes-errands/id569838247?mt=8\" target=\"_blank\" rel=\"external\">Quick Drafts</a></li>\n<li>睡眠或者闹钟 <a href=\"https://itunes.apple.com/us/app/sleep-cycle-alarm-clock/id320606217?mt=8\" target=\"_blank\" rel=\"external\">Sleep Cycle</a></li>\n<li>记账 <a href=\"https://itunes.apple.com/us/app/next-for-iphone-track-your/id596366290?mt=8\" target=\"_blank\" rel=\"external\">Next</a></li>\n<li>消息推送 <a href=\"https://itunes.apple.com/us/app/pushbullet/id810352052?mt=8\" target=\"_blank\" rel=\"external\">Pushbullet</a></li>\n<li>跑步 <a href=\"https://itunes.apple.com/us/app/runtastic-pro-gps-running/id366626332?mt=8\" target=\"_blank\" rel=\"external\">Runtastic</a>/ <a href=\"https://itunes.apple.com/us/app/nike+-running/id387771637?mt=8\" target=\"_blank\" rel=\"external\">Nike+ Running</a></li>\n<li>启动 <a href=\"https://itunes.apple.com/us/app/launch-center-pro/id532016360?mt=8\" target=\"_blank\" rel=\"external\">Launch Center Pro</a></li>\n<li>效率 <a href=\"https://itunes.apple.com/cn/app/workflow-powerful-automation/id915249334?mt=8\" target=\"_blank\" rel=\"external\">Workflow</a>  <a href=\"https://itunes.apple.com/us/app/if-by-ifttt/id660944635?mt=\" target=\"_blank\" rel=\"external\">IF(原IFTTT)</a></li>\n</ul>\n</li>\n</ul>\n<p> 以上是我日常使用的一些软件，完全带有主观色彩的，不服来辩，一个个总结也蛮累的，希望大家喜欢</p>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山zzZZ</a></p>\n</blockquote>\n"},{"title":"描述问题的能力","url":"http://code4fun.me/2016/11/19/描述问题的能力/","content":"<p>之前一直没觉得这个能力有什么，最近给一个人做项目才发现这个问题。</p>\n<p>目前和两个人一起做着项目，不过两个人的描述问题方式简直千差万别，让人感慨，两人不妨称其为A以及B。</p>\n<p>如果对于同样一个短信发送乱码的问题。</p>\n<blockquote>\n<p>A 的描述：<br>短信发送乱码<br>B 的描述：<br>在进行XX操作（将具体的操作流程进行一番描述）发送短信时，会出现乱码如下。（一个乱码短信的截图）。</p>\n</blockquote>\n<p>相信大家看到A的描述肯定是一脸懵逼，WTF，这都是什么鬼，根本没有半点意义嘛，如果沟通的条件还算方便的话，还可以通过邮件或者IM软件等进行沟通，但是这个过程必定是低效的，本来可能花五分钟时间就可以搞定的问题，这么来回问答，估计要半个小时才能弄懂做什么，当然问题仍然没有结束，可能这个任务在一个清单上，而描述又在另外的地方，做起这个任务来，肯定是来回折腾，十分麻烦。</p>\n<p>也许有的时候，我们总是忽略这一点，感觉作为一个程序员，大部分时候是和电脑打交道，和人打交道的时候毕竟是少数。但是，事实上，并不是这个样子。当我们使用一些软件/框架出现bug的时候，如果能对bug很好地描述，让开发者可以复现，可以很快地解决这个问题，双方都会收益。</p>\n"},{"title":"YouCompleteMe 升级vim 8 后需要做的事情","url":"http://code4fun.me/2016/11/12/2016-11-14/","content":"<p>之前一直使用YouCompleteMe这个插件做补全，很好用，结果在升级vim 8 之后，突然不能使用了，打开 vim 一堆错误。只得重新编译。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.vim/bundle/YouCompleteMe</div><div class=\"line\">git pull origin master</div><div class=\"line\">git submodule update --init --recursive</div><div class=\"line\">./install.py --clang-completer</div></pre></td></tr></table></figure></p>\n<p>完美解决问题。</p>\n"},{"title":"社交恐惧","url":"http://code4fun.me/2016/10/19/longtimenosee/","content":"<p>好久没弄博客了，do的网速太渣了。</p>\n<p>一直在思考一个问题，那就是如果人与人之间一直是透明的，并且是可以衡量的，那样会怎样。</p>\n"},{"title":"中兴捧月蓝剑第一题题解","url":"http://code4fun.me/2016/06/13/中兴捧月蓝剑第一题题解/","content":"<h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><p>问题大概是说，有一堆1和0，1表示房子，0表示空地，要求是连续几个1（不包括对角线）的四周（上下左右左上左下右上右下）都是0的成为美丽房子。</p>\n<p>简单的使用dfs即可。然后注意判断存在对角线的不算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> m, n;</div><div class=\"line\"><span class=\"keyword\">int</span> flag;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">beautifulhouse</span><span class=\"params\">(<span class=\"keyword\">char</span>** grid, <span class=\"keyword\">int</span> gridRowSize, <span class=\"keyword\">int</span> gridColSize)</span> </span>&#123;</div><div class=\"line\">    m = gridRowSize;</div><div class=\"line\">    n = gridColSize;</div><div class=\"line\">    <span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; gridRowSize; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; gridColSize;j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(grid[i][j] != <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            flag = <span class=\"number\">0</span></div><div class=\"line\">            result++;</div><div class=\"line\">            dfs(grid, i, j);</div><div class=\"line\">            result -= flag;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">char</span>** grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &amp;gt;= m || j &amp;gt;= n) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        grid[i][j] = <span class=\"number\">2</span>;</div><div class=\"line\">        dfs(grid, i - <span class=\"number\">1</span>, j);</div><div class=\"line\">        dfs(grid, i + <span class=\"number\">1</span>, j);</div><div class=\"line\">        dfs(grid, i, j - <span class=\"number\">1</span>);</div><div class=\"line\">        dfs(grid, i, j + <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; m - <span class=\"number\">1</span> &amp;&amp; j &lt; n - <span class=\"number\">1</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        flag = <span class=\"number\">1</span>;</div><div class=\"line\">        dfs(grid, i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">if</span>(i &lt; m - <span class=\"number\">1</span> &amp;&amp; j &amp;gt; <span class=\"number\">0</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        flag = <span class=\"number\">1</span>;</div><div class=\"line\">        dfs(grid, i + <span class=\"number\">1</span>, j - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><p>bst的一条路径，没什么可以说的。</p>\n<blockquote>\n<p><a href=\"code4fun.me\">呼呼呼山</a></p>\n<p>Jun 12, 2016 8:37 PM</p>\n</blockquote>\n"},{"title":"macOS PHP 开发环境配置","url":"http://code4fun.me/2016/05/29/mac-os-x-1011-php-kai-fa-huan-jing-pei-zhi/","content":"<p>macOS 上的 homebrew 和 ubuntu 上的 apt-get 这些包管理器的最大的好处，就是将我们从无休止的编译中解放出来，让环境配置变得如此容易。不用去管这条、那条的编译条件。<br>下面是基于 homebrew 的安装配置流程。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>联网</li>\n<li>安装 XCode-select（用来安装homebrew）</li>\n<li>安装 homebrew<h2 id=\"安装最新版-PHP\"><a href=\"#安装最新版-PHP\" class=\"headerlink\" title=\"安装最新版 PHP\"></a>安装最新版 PHP</h2>根据<a href=\"http://www.lanecn.com/article/main/aid-97\" target=\"_blank\" rel=\"external\">鸟哥的博客</a>，PHP 7 有了很大的性能提升，而程序用的框架 Laravel 又及时地支持了，用 homebrew 安装代码如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap homebrew/dupes</div><div class=\"line\">brew tap homebrew/versions</div><div class=\"line\">brew tap homebrew/homebrew-php</div><div class=\"line\">brew install php70</div></pre></td></tr></table></figure>\n<p>安装好后需要修改一下配置文件<code>/usr/local/etc/php/7.0/php.ini</code><br>在PHP.INI中设置时区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">date.timezone = PRC或date.timezone = Asia/Shanghai</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装-nginx\"><a href=\"#安装-nginx\" class=\"headerlink\" title=\"安装 nginx\"></a>安装 nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install nginx</div></pre></td></tr></table></figure>\n<h3 id=\"nginx-的配置\"><a href=\"#nginx-的配置\" class=\"headerlink\" title=\"nginx 的配置\"></a>nginx 的配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/etc/nginx/nginx.conf</div><div class=\"line\">vi /usr/local/etc/nginx/vhost/example.com.conf</div></pre></td></tr></table></figure>\n<h3 id=\"vhost-配置\"><a href=\"#vhost-配置\" class=\"headerlink\" title=\"vhost 配置\"></a>vhost 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">listen 8888;</div><div class=\"line\">server_name localhost ;</div><div class=\"line\">access_log /Users/zhishanzhang/Sites/wwwlogs/example.com_nginx.log combined;</div><div class=\"line\">index index.html index.htm index.php;</div><div class=\"line\">root /Users/zhishanzhang/Sites/pdh;</div><div class=\"line\">location ~ .*\\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv)$ &#123;</div><div class=\"line\">    valid_referers none blocked *.localhost localhost ;</div><div class=\"line\">    if ($invalid_referer) &#123;</div><div class=\"line\">        return 403;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">location ~ [^/]\\.php(/|$) &#123;</div><div class=\"line\">    fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">#    fastcgi_pass unix:/dev/shm/php-cgi.sock;</div><div class=\"line\">    fastcgi_index index.php;</div><div class=\"line\">    include fastcgi.conf;</div><div class=\"line\">    &#125;</div><div class=\"line\">location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</div><div class=\"line\">    expires 30d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">location ~ .*\\.(js|css)?$ &#123;</div><div class=\"line\">    expires 7d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一些命令：\"><a href=\"#一些命令：\" class=\"headerlink\" title=\"一些命令：\"></a>一些命令：</h3><p>Nginx web server.</p>\n<ul>\n<li><p>Start server with default config:</p>\n<p>  nginx</p>\n</li>\n<li><p>Start server with custom config file:</p>\n<p>  nginx -c config_file</p>\n</li>\n<li><p>Start server with a prefix for all relative paths in config file:</p>\n<p>  nginx -c config_file -p prefix/for/relative/paths</p>\n</li>\n<li><p>Test configuration without affecting the running server:</p>\n<p>  nginx -t</p>\n</li>\n<li><p>Reload configuration by sending a signal with no downtime:</p>\n<p>  nginx -s reload</p>\n</li>\n</ul>\n<h2 id=\"配置-php-fpm\"><a href=\"#配置-php-fpm\" class=\"headerlink\" title=\"配置 php-fpm\"></a>配置 php-fpm</h2><p><code>vi /usr/local/etc/php/7.0/php-fpm.d/www.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen = 127.0.0.1:9000</div></pre></td></tr></table></figure>\n<h2 id=\"安装-xdebug\"><a href=\"#安装-xdebug\" class=\"headerlink\" title=\"安装 xdebug\"></a>安装 xdebug</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install php70-xdebug</div><div class=\"line\">vi /usr/local/etc/php/7.0/conf.d/ext-xdebug.ini</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[xdebug]</div><div class=\"line\">zend_extension=&quot;/usr/local/opt/php70-xdebug/xdebug.so&quot;</div><div class=\"line\">xdebug.remote_enable=1</div><div class=\"line\">xdebug.remote_port=10000</div><div class=\"line\">xdebug.profile_enable=1</div></pre></td></tr></table></figure>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><ul>\n<li>出现 502 Bad Gateway 是什么原因？</li>\n</ul>\n<p>一般应该是 php-fpm 的原因，检查 nginx 配置中 <code>fastcgi_pass</code> 的是采用的端口还是<code>sock</code>，这个要和<code>php-fpm</code>的配置中保持一样</p>\n<ul>\n<li>出现 403 Forbidden 的原因</li>\n</ul>\n<p>这个肯定是权限问题，检查文件夹的权限，我出现问题的原因是，由于用的是之前的配置环境，里面有对于资源引用的一个判断，抛出 403 错误</p>\n<ul>\n<li>出现首页可以打开，但是点击别的链接 404 Not Found 的原因</li>\n</ul>\n<p>这个一般就是，域名的重写问题，如果是 Apache 可以检查 <code>.htacess</code> 文件，如果是 nginx 可以检查看配置中是否有重写的规则，例如下面就是 Laravel 的域名重写规则。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山</a></p>\n</blockquote>\n"},{"title":"tmux shortcuts & cheatsheet","url":"http://code4fun.me/2016/02/23/tmux-shortcuts-cheatsheet/","content":"<h2 id=\"start-new\"><a href=\"#start-new\" class=\"headerlink\" title=\"start new:\"></a>start new:</h2><p> <code>tmux</code></p>\n<h3 id=\"start-new-with-session-name\"><a href=\"#start-new-with-session-name\" class=\"headerlink\" title=\"start new with session name:\"></a>start new with session name:</h3><p><code>tmux new -s myname</code></p>\n<h3 id=\"attach\"><a href=\"#attach\" class=\"headerlink\" title=\"attach\"></a>attach</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmux a  </div><div class=\"line\">#  (or at, or attach)</div></pre></td></tr></table></figure>\n<h3 id=\"attach-to-named\"><a href=\"#attach-to-named\" class=\"headerlink\" title=\"attach to named\"></a>attach to named</h3><p><code>tmux a -t myname</code></p>\n<h2 id=\"Sessions\"><a href=\"#Sessions\" class=\"headerlink\" title=\"Sessions\"></a>Sessions</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:new&lt;CR&gt;  new session</div><div class=\"line\">s  list sessions</div><div class=\"line\">$  name session</div></pre></td></tr></table></figure>\n<h3 id=\"list-sessions\"><a href=\"#list-sessions\" class=\"headerlink\" title=\"list sessions:\"></a>list sessions:</h3><p><code>tmux ls</code></p>\n<h3 id=\"kill-session\"><a href=\"#kill-session\" class=\"headerlink\" title=\"kill session:\"></a>kill session:</h3><p><code>tmux kill-session -t myname</code></p>\n<h3 id=\"Kill-all-the-tmux-sessions\"><a href=\"#Kill-all-the-tmux-sessions\" class=\"headerlink\" title=\"Kill all the tmux sessions\"></a>Kill all the tmux sessions</h3><p><code>tmux ls | grep : | cut -d. -f1 | awk &#39;{print substr($1, 0, length($1)-1)}&#39; | xargs kill</code></p>\n<p>In tmux, hit the prefix <code>ctrl+b</code> (my modified prefix is ctrl+a) and then:</p>\n<h2 id=\"Windows-tabs\"><a href=\"#Windows-tabs\" class=\"headerlink\" title=\"Windows (tabs)\"></a>Windows (tabs)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">c  create window</div><div class=\"line\">w  list windows</div><div class=\"line\">n  next window</div><div class=\"line\">p  previous window</div><div class=\"line\">f  find window</div><div class=\"line\">,  name window</div><div class=\"line\">&amp;  kill window</div></pre></td></tr></table></figure>\n<h2 id=\"Panes-splits\"><a href=\"#Panes-splits\" class=\"headerlink\" title=\"Panes (splits)\"></a>Panes (splits)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">%  vertical split</div><div class=\"line\">&quot;  horizontal split</div><div class=\"line\">o  swap panes</div><div class=\"line\">q  show pane numbers</div><div class=\"line\">x  kill pane</div><div class=\"line\">+  break pane into window (e.g. to select text by mouse to copy)</div><div class=\"line\">-  restore pane from window</div><div class=\"line\">⍽  space - toggle between layouts</div><div class=\"line\">&lt;prefix&gt; q (Show pane numbers, when the numbers show up type the key to goto that pane)</div><div class=\"line\">&lt;prefix&gt; &#123; (Move the current pane left)</div><div class=\"line\">&lt;prefix&gt; &#125; (Move the current pane right)</div><div class=\"line\">&lt;prefix&gt; z toggle pane zoom</div></pre></td></tr></table></figure>\n<h2 id=\"Sync-Panes\"><a href=\"#Sync-Panes\" class=\"headerlink\" title=\"Sync Panes\"></a>Sync Panes</h2><p>You can do this by switching to the appropriate window, typing your Tmux prefix (commonly Ctrl-B or Ctrl-A) and then a colon to bring up a Tmux command line, and typing:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:setw synchronize-panes</div></pre></td></tr></table></figure>\n<p>You can optionally add on or off to specify which state you want; otherwise the option is simply toggled. This option is specific to one window, so it won’t change the way your other sessions or windows operate. When you are done, toggle it off again by repeating the command. <a href=\"http://blog.sanctum.geek.nz/sync-tmux-panes/\" target=\"_blank\" rel=\"external\">tip source</a></p>\n<h2 id=\"Resizing-Panes\"><a href=\"#Resizing-Panes\" class=\"headerlink\" title=\"Resizing Panes\"></a>Resizing Panes</h2><p>You can also resize panes if you don’t like the layout defaults. I personally rarely need to do this, though it is handy to know how. Here is the basic syntax to resize panes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PREFIX : resize-pane -D (Resizes the current pane down)</div><div class=\"line\">PREFIX : resize-pane -U (Resizes the current pane upward)</div><div class=\"line\">PREFIX : resize-pane -L (Resizes the current pane left)</div><div class=\"line\">PREFIX : resize-pane -R (Resizes the current pane right)</div><div class=\"line\">PREFIX : resize-pane -D 20 (Resizes the current pane down by 20 cells)</div><div class=\"line\">PREFIX : resize-pane -U 20 (Resizes the current pane upward by 20 cells)</div><div class=\"line\">PREFIX : resize-pane -L 20 (Resizes the current pane left by 20 cells)</div><div class=\"line\">PREFIX : resize-pane -R 20 (Resizes the current pane right by 20 cells)</div><div class=\"line\">PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells)</div><div class=\"line\">PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells)</div></pre></td></tr></table></figure>\n<h2 id=\"Copy-mode\"><a href=\"#Copy-mode\" class=\"headerlink\" title=\"Copy mode\"></a>Copy mode</h2><p>Pressing PREFIX <code>[</code> places us in Copy mode. We can then use our movement keys to move our cursor around the screen. By default, the arrow keys work. we set our configuration file to use Vim keys for moving between windows and resizing panes so we wouldn’t have to take our hands off the home row. tmux has a vi mode for working with the buffer as well. To enable it, add this line to <code>.tmux.conf</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setw -g mode-keys vi</div></pre></td></tr></table></figure>\n<p>With this option set, we can use <code>h</code>,<code>j</code>, <code>k</code>, and <code>l</code> to move around our buffer.</p>\n<p>To get out of Copy mode, we just press the ENTER key. Moving around one character at a time is not very efficient. Since we enabled vi mode, we can also use some other visible shortcuts to move around the buffer.</p>\n<p>For example, we can use <code>w</code> to jump to the next word and <code>b</code> to jump back one word. And we can use <code>f</code>, followed by any character, to jump to that character on the same line, and <code>F</code> to jump backwards on the line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function                vi             emacs</div><div class=\"line\">Back to indentation     ^              M-m</div><div class=\"line\">Clear selection         Escape         C-g</div><div class=\"line\">Copy selection          Enter          M-w</div><div class=\"line\">Cursor down             j              Down</div><div class=\"line\">Cursor left             h              Left</div><div class=\"line\">Cursor right            l              Right</div><div class=\"line\">Cursor to bottom line   L</div><div class=\"line\">Cursor to middle line   M              M-r</div><div class=\"line\">Cursor to top line      H              M-R</div><div class=\"line\">Cursor up               k              Up</div><div class=\"line\">Delete entire line      d              C-u</div><div class=\"line\">Delete to end of line   D              C-k</div><div class=\"line\">End of line             $              C-e</div><div class=\"line\">Goto line               :              g</div><div class=\"line\">Half page down          C-d            M-Down</div><div class=\"line\">Half page up            C-u            M-Up</div><div class=\"line\">Next page               C-f            Page down</div><div class=\"line\">Next word               w              M-f</div><div class=\"line\">Paste buffer            p              C-y</div><div class=\"line\">Previous page           C-b            Page up</div><div class=\"line\">Previous word           b              M-b</div><div class=\"line\">Quit mode               q              Escape</div><div class=\"line\">Scroll down             C-Down or J    C-Down</div><div class=\"line\">Scroll up               C-Up or K      C-Up</div><div class=\"line\">Search again            n              n</div><div class=\"line\">Search backward         ?              C-r</div><div class=\"line\">Search forward          /              C-s</div><div class=\"line\">Start of line           0              C-a</div><div class=\"line\">Start selection         Space          C-Space</div><div class=\"line\">Transpose chars                        C-t</div></pre></td></tr></table></figure>\n<h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">d  detach</div><div class=\"line\">t  big clock</div><div class=\"line\">?  list shortcuts</div><div class=\"line\">:  prompt</div></pre></td></tr></table></figure>\n<h2 id=\"Configurations-Options\"><a href=\"#Configurations-Options\" class=\"headerlink\" title=\"Configurations Options:\"></a>Configurations Options:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Mouse support - set to on if you want to use the mouse</div><div class=\"line\">* setw -g mode-mouse off</div><div class=\"line\">* set -g mouse-select-pane off</div><div class=\"line\">* set -g mouse-resize-pane off</div><div class=\"line\">* set -g mouse-select-window off</div><div class=\"line\"></div><div class=\"line\"># Set the default terminal mode to 256color mode</div><div class=\"line\">set -g default-terminal &quot;screen-256color&quot;</div><div class=\"line\"></div><div class=\"line\"># enable activity alerts</div><div class=\"line\">setw -g monitor-activity on</div><div class=\"line\">set -g visual-activity on</div><div class=\"line\"></div><div class=\"line\"># Center the window list</div><div class=\"line\">set -g status-justify centre</div><div class=\"line\"></div><div class=\"line\"># Maximize and restore a pane</div><div class=\"line\">unbind Up bind Up new-window -d -n tmp \\; swap-pane -s tmp.1 \\; select-window -t tmp</div><div class=\"line\">unbind Down</div><div class=\"line\">bind Down last-window \\; swap-pane -s tmp.1 \\; kill-window -t tmp</div></pre></td></tr></table></figure>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h2><ul>\n<li><a href=\"http://pragprog.com/book/bhtmux/tmux\" target=\"_blank\" rel=\"external\">tmux: Productive Mouse-Free Development</a></li>\n<li><a href=\"http://superuser.com/questions/343572/tmux-how-do-i-reorder-my-windows\" target=\"_blank\" rel=\"external\">How to reorder windows</a></li>\n<li><a href=\"http://tangosource.com/blog/a-tmux-crash-course-tips-and-tweaks/\" target=\"_blank\" rel=\"external\">A Tmux crash course: tips and tweaks</a></li>\n</ul>\n"},{"title":"Git 的 .gitignore 配置","url":"http://code4fun.me/2016/02/13/git-de-gitignore-pei-zhi/","content":"<p>.gitignore 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置 .gitignore 的一些心得。</p>\n<p>1、配置语法：</p>\n<p>以斜杠“/”开头表示目录；</p>\n<p>以星号“*”通配多个字符；</p>\n<p>以问号“?”通配单个字符；</p>\n<p>以方括号“[]”包含单个字符的匹配列表；</p>\n<p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p>\n<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>\n<p>2、示例：<br>（1）规则：fd1/*</p>\n<p>说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</p>\n<p>（2）规则：/fd1/*</p>\n<p>说明：忽略根目录下的 /fd1/ 目录的全部内容；</p>\n<p>（3）规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\">!.gitignore</div><div class=\"line\">!/fw/bin/</div><div class=\"line\">!/fw/sf/</div></pre></td></tr></table></figure>\n<p>说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录</p>\n"},{"title":"软件调试的艺术(The Art of Debugging with GDB, DDD, and Eclipse)","url":"http://code4fun.me/2016/01/19/ruan-jian-diao-shi-de-yi-shu-the-art-of-debugging/","content":"<ul>\n<li><p><a href=\"#toc_0\">调试的原则</a></p>\n</li>\n<li><p><a href=\"#toc_1\">主要调试器操作</a></p>\n<ul>\n<li><p><a href=\"#toc_2\">单步调试源代码</a></p>\n<ul>\n<li><p><a href=\"#toc_3\">设置断点</a></p>\n</li>\n<li><p><a href=\"#toc_4\">删除和禁用断点</a></p>\n</li>\n<li><p><a href=\"#toc_5\">检查变量</a></p>\n</li>\n<li><p><a href=\"#toc_6\">设置监视点</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#toc_7\">P.S. 命令缩写</a></p>\n</li>\n</ul>\n<h2 id=\"调试的原则\"><a href=\"#调试的原则\" class=\"headerlink\" title=\"调试的原则\"></a>调试的原则</h2><ul>\n<li>调试的本质：确认原则</li>\n<li>从简单工作开始调试</li>\n<li>使用自顶向下的方法</li>\n<li>使用调试工具确定段错误的位置</li>\n<li>通过发出中断确定无限循环的位置</li>\n<li>使用二分搜索</li>\n</ul>\n<h2 id=\"主要调试器操作\"><a href=\"#主要调试器操作\" class=\"headerlink\" title=\"主要调试器操作\"></a>主要调试器操作</h2><h3 id=\"单步调试源代码\"><a href=\"#单步调试源代码\" class=\"headerlink\" title=\"单步调试源代码\"></a>单步调试源代码</h3><p>break 设置断点</p>\n<p>condition breakpointnumber condition 条件断点</p>\n<p>break 30 if num_y==1 条件断点</p>\n<p>clear bplinenumber 删除断点</p>\n<p>info break 查询要找的断点编号</p>\n<p>next 执行下一行</p>\n<p>step 在函数调用时进入函数</p>\n<p>continue 恢复执行并继续</p>\n<p>tbreak 临时断点</p>\n<h3 id=\"设置断点\"><a href=\"#设置断点\" class=\"headerlink\" title=\"设置断点\"></a>设置断点</h3><p>break line_number</p>\n<p>break function</p>\n<p>break filename:line_number</p>\n<p>break filename:function</p>\n<p>break +offset</p>\n<p>break -offset</p>\n<h3 id=\"删除和禁用断点\"><a href=\"#删除和禁用断点\" class=\"headerlink\" title=\"删除和禁用断点\"></a>删除和禁用断点</h3><p>delete breakpoint_list</p>\n<p>delete 删除所有断点</p>\n<p>clear 清除GDB将执行的下一个指令处的断点，这种方法适用于要删除GDB已经到达的断点的情况。</p>\n<p>clear function, clear filename:funciton, clear line_number, clear filename:line_number 根据位置清除断点</p>\n<p>disable breakpoint_list</p>\n<p>enable breakpoint_list</p>\n<p>enable once breakpoint_list 在断点下次引起GDB暂停执行后被禁用</p>\n<h3 id=\"检查变量\"><a href=\"#检查变量\" class=\"headerlink\" title=\"检查变量\"></a>检查变量</h3><p>print 命令</p>\n<h3 id=\"设置监视点\"><a href=\"#设置监视点\" class=\"headerlink\" title=\"设置监视点\"></a>设置监视点</h3><p>watch z</p>\n<p>watch (z &gt; 29)</p>\n<h2 id=\"P-S-命令缩写\"><a href=\"#P-S-命令缩写\" class=\"headerlink\" title=\"P.S. 命令缩写\"></a>P.S. 命令缩写</h2><p>b 表示 break</p>\n<p>i b 表示 info break</p>\n<p>cond 表示 condition</p>\n<p>r 表示 run</p>\n<p>n 表示 next</p>\n<p>s 表示 step</p>\n<p>c 表示 continue</p>\n<p>bt 表示 breaktrace</p>\n"},{"title":"用泛用型播客客户端订阅喜马拉雅内容","url":"http://code4fun.me/2015/12/22/用泛用型播客客户端订阅喜马拉雅内容/","content":"<p>经常听博客，最开始用官方客户端，之前喜欢用Overcast，后来开始使用Castro，这个比喜马拉雅的使用体验好很多，就是简简单单的听个博客，不需要看那些大大的banner，什么的。</p>\n<p>可是这也有一个问题，那就是有些播客并没法搜索到，找订阅源也比较麻烦，可是喜马拉雅上就有现成的，怎么使用是个问题，不过经过抓包终于找到了喜马拉雅的订阅源。</p>\n<p>下面以锵锵三人行进行举例，首先我们找到锵锵三人行在喜马拉雅上的界面。</p>\n<blockquote>\n<p><a href=\"http://www.ximalaya.com/15880293/album/1605426\" target=\"_blank\" rel=\"external\">http://www.ximalaya.com/15880293/album/1605426</a></p>\n</blockquote>\n<p>当然这个链接是无法进行订阅的，因为它不是RSS的格式，不过只需要把第一个数字去掉，在最后添加.xml即可，结果如下。</p>\n<blockquote>\n<p><a href=\"http://www.ximalaya.com/album/1605426.xml\" target=\"_blank\" rel=\"external\">http://www.ximalaya.com/album/1605426.xml</a></p>\n</blockquote>\n<p>这样就可以直接订阅到播客客户端了。</p>\n"},{"title":"Python 调试指南","url":"http://code4fun.me/2015/09/05/Python 调试指南/","content":"<h1 id=\"Python-调试指南\"><a href=\"#Python-调试指南\" class=\"headerlink\" title=\"Python 调试指南\"></a>Python 调试指南</h1><p>很久以前，我的调试都是采用print，由于写的内容比较简单，所以也可以快乐的过下去，但是随着代码量的增加，简单的print调试方法，已经不能很好的解决问题了，再加上听了内核恐慌的调试那一期节目，终于开始了拖了很久的调试的学习，当然Python也有很多的库可以用来进行调试，这里我们只考虑其官方自带的库<a href=\"https://docs.python.org/3/library/pdb.html\" target=\"_blank\" rel=\"external\">pdb</a>，本以为是一件很麻烦的事情，可是学习后突然发现，原来是如此的简单，调试一共分为两种模式。</p>\n<h2 id=\"1-不引入pdb库，运行时添加参数。\"><a href=\"#1-不引入pdb库，运行时添加参数。\" class=\"headerlink\" title=\"1.不引入pdb库，运行时添加参数。\"></a>1.不引入pdb库，运行时添加参数。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m pdb test.py</div></pre></td></tr></table></figure>\n<p>这时候就需要用到一些快捷键进行调试，对于稍微有点英语基础的人来说这些还是比较简单的，首先我们让他执行下一行命令，可以是 <strong>n</strong> (next),或者显示当前的代码情况<strong>l</strong>(list),打印变量<strong>p</strong>(print),或者对某些变量进行一些操作（<strong>可以声明变量，但是这有一个坑，就是当你声明一个变量为一些命令字符，例如p的时候，就会出现问题，此时需要采用在变量前面加一！的方式解决</strong>）， 从一个函数中返回<strong>r</strong>(return)，进入一个函数<strong>s</strong>(step into)，继续执行 <em>c</em> （continue），以及破坏性地推出<em>q</em>(quit)，以及万能的回车键（会重复上一次执行的命令）。</p>\n<h2 id=\"2-引入pdb库，设置断点\"><a href=\"#2-引入pdb库，设置断点\" class=\"headerlink\" title=\"2.引入pdb库，设置断点\"></a>2.引入pdb库，设置断点</h2><p>有些时候，当函数很长的时候，我们没必要让其从头一步步运行，我们能大致估计出问题出现的位置，此时我们可以设定一个断点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">pdb.set_trace()</div></pre></td></tr></table></figure>\n<p>然后正常运行，在断点位置，自动进入调试状况，快捷键依旧和之气的一样。</p>\n<h2 id=\"3-常用快捷键总结\"><a href=\"#3-常用快捷键总结\" class=\"headerlink\" title=\"3.常用快捷键总结\"></a>3.常用快捷键总结</h2><p>| <em>快捷键</em> | <em>short for</em> | <em>含义</em> |<br>| n | next | 继续执行 |<br>| b | breakpoint | 设置断点，例如 “b 77”，就是在当前脚本的77行打上断点，还能输入函数名作为参数，断点就打到具体的函数入口，如果只敲b，会显示现有的全部断点 |<br>| c | continue | 让程序正常运行，直到遇到断点 |<br>| r | return | 返回执行结果 |<br>| q | quit | 强制退出 |<br>| s | step into | 进入函数 |<br>| p | print | 打印变量 |<br>| l | list | 输出当前代码状况 |<br>| cl | clear | 清除断点 |<br>| h | help | 帮助 |</p>\n"},{"title":"jsPDF 那些坑","url":"http://code4fun.me/2015/08/24/jsPDF/","content":"<h1 id=\"jsPDF-那些坑\"><a href=\"#jsPDF-那些坑\" class=\"headerlink\" title=\"jsPDF 那些坑\"></a>jsPDF 那些坑</h1><p>前段时间由于工作需要，需要把之前网页上的打印报名表功能改成打印成pdf，于是Google之，发现了<a href=\"https://parall.ax/products/jspdf\" target=\"_blank\" rel=\"external\">jsPDF</a>这个js插件，本以为可以快快的解决问题，却发现里面真是太多坑了。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>这个很简单只需要，从<a href=\"https://github.com/MrRio/jsPDF\" target=\"_blank\" rel=\"external\">Github</a>上下载源代码，然后你会发现里面是包括着各种库文件以及多个测试，当然这些都不是必须的，我们只需要引用里面的dist中的一个文件以及两个插件即可。如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Scripts down here --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://html2canvas.hertzen.com/build/html2canvas.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Code editor --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/ace/1.1.01/noconflict/ace.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Scripts in development mode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/jspdf.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候坑就出现了，因为里面的依赖的jQuery库是用的Google的cdn，所以我们就跪了，还是乖乖换成百度的cdn或者存成本地吧。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://libs.baidu.com/jquery/1.8.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"打印输出\"><a href=\"#打印输出\" class=\"headerlink\" title=\"打印输出\"></a>打印输出</h2><p>由于我的主要应用是打印页面上的html文件，所以在此就以此举例。要打印的html文档部分如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my_show\"</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my_show\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my_show\"</span>&gt;</span>fun<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>对于网页有两个函数可以使用一个是fromHTML另一个是addHTML，但是比较悲剧的事fromHTML不支持中文，所以我们就只能使用addHTML这个函数了，直接打印的函数很简单，如下，不过就是这个函数导致了后面的诸多坑。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pdf = <span class=\"keyword\">new</span> jsPDF(<span class=\"string\">'p'</span>, <span class=\"string\">'mm'</span>, <span class=\"string\">'a4'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> print_content = $(<span class=\"string\">'.my_show'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> filename = <span class=\"string\">'准考证.pdf'</span>;</div><div class=\"line\">pdf.addHTML(print_content,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    pdf.output(<span class=\"string\">'dataurlnewwindow'</span>);</div><div class=\"line\">    pdf.output(<span class=\"string\">'save'</span>, filename);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p>在这举例的html文档比较短，完全可以容纳到一页里面，但是在实际使用中的html内容比较多，不可能容纳到一个页面里面，但是这样打印，并不会分页，只打印一页的内容，这样怎么破呢？官方给的方案是使用参数’pagesplit’，示例如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pdf = <span class=\"keyword\">new</span> jsPDF(<span class=\"string\">'p'</span>, <span class=\"string\">'pt'</span>, <span class=\"string\">'a4'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">         pagesplit: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">pdf.addHTML($(<span class=\"string\">\".pdf-wrapper\"</span>), options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    pdf.save(<span class=\"string\">\"test.pdf\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>但是采用这个生成的pdf的分辨率兼职时惨不忍睹，这能干毛啊。于是考虑多次调用addHTML来生成，首先在浏览器的console中进行测试，发现OK，于是开心的码出了下面的代码，以为可以解决问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = print_content.length - <span class=\"number\">1</span>; i &lt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">&#123;</div><div class=\"line\">  pdf.addPage();</div><div class=\"line\">  pdf.addHTML(print_content[i], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">pdf.output(<span class=\"string\">'dataurlnewwindow'</span>);</div></pre></td></tr></table></figure>\n<p>结果没有成功，于是就蛋疼了，在console里明明测试成功，为什么就是不行呢，后来发现是用for循环的问题，不用for循环的时候就OK的，这实在想不通了，后来经过多次测试，估计是因为addHTML函数的时候，可能还没有把内容打印出来，就已经运行到输出了，所以才会生成空白的文件，于是果断添加了个延时进行测试，然后可以正常生产pdf了，可是这样太慢了，又想到了采用循环调用的方法，这也是最后的解决方案。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printbypage</span>(<span class=\"params\">pdf, k</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(k &lt;= $(<span class=\"string\">'.my_show'</span>).length)</div><div class=\"line\">  &#123;</div><div class=\"line\">    pdf.output(<span class=\"string\">'dataurlnewwindow'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  pdf.addHTML($(<span class=\"string\">'.my_show'</span>)[k], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k &amp;lt; $(<span class=\"string\">'.my_show'</span>).length - <span class=\"number\">1</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      pdf.addPage();</div><div class=\"line\">    &#125;</div><div class=\"line\">    printbypage(pdf, k + <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printmyshow</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pdf = <span class=\"keyword\">new</span> jsPDF(<span class=\"string\">'p'</span>, <span class=\"string\">'mm'</span>, <span class=\"string\">'a4'</span>);</div><div class=\"line\">  printbypage(pdf, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>完美解决问题。</p>\n<h2 id=\"小坑\"><a href=\"#小坑\" class=\"headerlink\" title=\"小坑\"></a>小坑</h2><ul>\n<li>当打印生成背景为黑白的时候，只需要设置打印元素的背景颜色为白色。</li>\n<li>一些国外的脚本引用最好都更换为本地的，以防止不稳定。</li>\n<li>坑爹的不支持IE9以下，好在数字公司，企鹅公司等的浏览器具有chrome内核，不过有的时候会默认为兼容模式，所以可以采用meta标签让其使用chrome内核，如下:<ul>\n<li>若页面需默认用极速核，增加标签：<code>&lt;meta name=”renderer” content=”webkit” /&gt;</code></li>\n<li>若页面需默认用ie兼容内核，增加标签：<code>&lt;meta name=”renderer” content=”ie-comp” /&gt;</code></li>\n<li>若页面需默认用ie标准内核，增加标签：<code>&lt;meta name=”renderer” content=”ie-stand” /&gt;</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"让你的Mac也可以不走锐捷（Npucat for ＊nix）","url":"http://code4fun.me/2015/08/19/让你的Mac也可以不走锐捷（Npucat for ＊nix）/","content":"<p>鉴于之前的西工大的猫只有windows版本，为了部分＊nix用户，于是重新修改了一下代理程序，由于程序较长就不贴出来了，下载链接如下(<a href=\"http://pan.baidu.com/s/1kT4D7x1\" target=\"_blank\" rel=\"external\">百度云</a>)。</p>\n<p>由于是用Python写的，而＊nix系统基本都已经装好Python，所以把下载好程序，进入当前文件夹运行下面命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup python npucatnix.py &gt;npu.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup python npucatnix.py &gt; /dev/null 2&gt; &amp;1 &amp;</div></pre></td></tr></table></figure>\n<p>第一个命令会把产生的log文件保存到当前目录，一般也没什么用，所以推荐第二个命令。</p>\n<p>然后对于Mac，设置如下。</p>\n<p>打开设置－网络</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%889.38.50.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%889.38.50.png\" alt=\"屏幕快照 2015-08-19 下午9.38.50\"></a></p>\n<p>&nbsp;</p>\n<p>选择高级</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%889.39.23.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%889.39.23.png\" alt=\"屏幕快照 2015-08-19 下午9.39.23\"></a></p>\n<p>&nbsp;</p>\n<p>选择web代理，服务器为127.0.0.1 端口为1024。</p>\n<p>然后你就可以尽情的上网了</p>\n<p>youku</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%8810.02.41.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%8810.02.41.png\" alt=\"屏幕快照 2015-08-19 下午10.02.41\"></a></p>\n<p>B站</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%8810.04.02.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/08/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-08-19-%E4%B8%8B%E5%8D%8810.04.02.png\" alt=\"屏幕快照 2015-08-19 下午10.04.02\"></a></p>\n"},{"title":"匆匆那年","url":"http://code4fun.me/2015/07/05/匆匆那年/","content":"<blockquote>\n<p>人生苦短，我用Python；世事无常，珍惜眼前人。</p>\n</blockquote>\n<p>曾经喜欢了一个女孩三年，后来又被另一个女孩喜欢了三年，而如今爱着另外一个女孩已经两年加了。</p>\n<p>有的时候不得不感叹世事无常，昨天仿佛还在高中教室门口的长廊上看天看云，今天已经搬离了大学四年的宿舍，坐在返乡的火车上骚情。火车总是一个适合一个人思考的地方，看世界百态，酸甜苦辣。</p>\n<p>每次坐火车总是会写点东西，在高节奏的当下，好久没有打开日记本记上几笔，亦或者是当下的生活太多欢愉。</p>\n<p>今天在候车的时候突然想到前一段时间看到的新闻，说某人快递寄一个贵重物品，快递给寄丢了，只赔偿很少的钱，然后快递公司被强烈谴责。其实想想我也是对这些新闻媒体醉了，在这件事情上快递公司虽然弄丢东西有错，但是在没有保值的情况下赔很少的钱完全是合理的。快递的保值费用基本就是一个保险，如果你没有入这个保险却享受了这个的权益，那大家还有什么入保险的意义。就好像之前看的一个比较极端的例子，如果一个私有的消防队，每年向周围的民众收取一定的费用来作为在发生火灾之后进行抢救的费用，一户人家没有缴纳费用而发生了火灾，人民给这个消防队打了电话，于是消防队出动了，可是却没有灭火而只是停在旁边，只是防止火势蔓延到邻居那里，因为他的邻居缴纳了费用。无疑，这是发生在万恶的资本主义社会的一个会在道德上遭受谴责的故事，可是仔细想想这个故事中的消防队做错了吗？如果他们救火了会发生什么呢？提到的这两个例子应该是表达了一样的意思。</p>\n<p>想到这其实是觉得本科这四年给带来的提高更主要的也许是思维上的吧。从毕设的时候就发现了，整个毕设几乎没有用到多少课本上的东西。基本都是重头开始学的，可是不管是学校提供的还是在学校这个平台上获得的  ，都是一种体验吧。这也许是读研的唯一目的吧，在继续静静地读几年书，提高一些思维能力，然后再步入社会这个大染缸，以此，才能更好地不要被社会磨光棱角吧。</p>\n"},{"title":"自动关闭广告窗口软件v0.1","url":"http://code4fun.me/2015/06/12/noad/","content":"<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>本软件为绿色免安装软件，直接将压缩包解压即可使用。内存占用约为6M，CPU占用不会超过1%，不含任何插件，绝对绿色环保。</p>\n<p><strong>目前软件在前期，担心大家使用存在问题，同时希望得到一些反馈，所以有一个自动打开帮助网页，也就是我的这篇博客的功能，希望大家可以理解，会在v0.2版本去掉。如果觉得很烦的，可以私信我。</strong></p>\n<p>所有需要屏蔽的窗口名称均保存在名称为 data.txt 的文件中，所有需要关闭的窗口名称只需要另起一行添加到里面即可，对于需要删除的直接删除保存就好，可以在程序运行过程添加，不会出现任何问题。</p>\n<p>例如你想自动关闭名称为“推广消息”的qq聊天，只需要在data.txt的最后添加推广信息即可。</p>\n<p>另外一个用法，可以偷偷将其考到小伙伴的电脑上，然后把文件里面那个doubi.txt改成data.txt，即可关闭一些常用的软件，让你的小伙伴发现打不开浏览器，登不了微信。</p>\n<p>欢迎大家补充广告名称或者是都比名称。</p>\n<h2 id=\"下载链接\"><a href=\"#下载链接\" class=\"headerlink\" title=\"下载链接\"></a>下载链接</h2><p><a href=\"http://pan.baidu.com/s/1hqiuxPM\" target=\"_blank\" rel=\"external\">自动打开帮助文档网页版</a></p>\n<h2 id=\"反馈\"><a href=\"#反馈\" class=\"headerlink\" title=\"反馈\"></a>反馈</h2><p>有任何建议或意见欢迎给我发邮件 zhangzhishanlo#gmail.com<br>或者微博留言<a href=\"http://www.weibo.com/huhuhushan\" target=\"_blank\" rel=\"external\">huhuhushan</a></p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>添加状态栏图标</li>\n<li>添加开机自启功能</li>\n<li>添加自动获取关闭窗口功能</li>\n</ul>\n<blockquote>\n<p><a href=\"http://code4fun.me\">呼呼呼山zzZZ</a></p>\n<p>  2015/6/13 星期六 0:55:32</p>\n</blockquote>\n"},{"title":"西工大的猫 帮助文档","url":"http://code4fun.me/2015/06/06/西工大的猫 帮助文档/","content":"<h2 id=\"最新下载连接\"><a href=\"#最新下载连接\" class=\"headerlink\" title=\"最新下载连接\"></a><a href=\"http://pan.baidu.com/s/1qWsTbWS\" target=\"_blank\" rel=\"external\">最新下载连接</a></h2><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>本文件为绿色免安装软件，<strong><em>直接点击，npu.exe 或者 npu.bat 或者将NPUcat.exe拖到cmd窗口</em>。</strong></li>\n<li>启动代理</li>\n<li>打开软件（浏览器，百度云等）的设置</li>\n<li>网络设置</li>\n<li>使用代理（服务器为127.0.0.1，端口为1998）</li>\n<li>使用浏览器/IE设置</li>\n</ul>\n<h2 id=\"小Tips\"><a href=\"#小Tips\" class=\"headerlink\" title=\"小Tips\"></a>小Tips</h2><ul>\n<li>用<a href=\"http://xbeta.info/idm.htm\" target=\"_blank\" rel=\"external\">IDM</a>代替迅雷下载，可以方便的用代理，速度自测比迅雷快</li>\n<li>对于一些无法用代理的软件，可以使用全局代理<a href=\"http://www.proxifier.com/index.htm\" target=\"_blank\" rel=\"external\">Proxifier</a>进行代理。</li>\n<li>如果是chrome浏览器，可以使用SwitchyOmega，可以方便切换是否使用代理。</li>\n</ul>\n<h2 id=\"反馈\"><a href=\"#反馈\" class=\"headerlink\" title=\"反馈\"></a>反馈</h2><p>有任何建议或意见欢迎给我发邮件 zhangzhishanlo#gmail.com<br>或者微博留言<a href=\"http://www.weibo.com/huhuhushan\" target=\"_blank\" rel=\"external\">huhuhushan</a><br>另外希望大家可以反馈，是否需要 Linux 或者 Mac 版本的。</p>\n<h2 id=\"升级日志\"><a href=\"#升级日志\" class=\"headerlink\" title=\"升级日志\"></a>升级日志</h2><h3 id=\"v1-31\"><a href=\"#v1-31\" class=\"headerlink\" title=\"v1.31\"></a>v1.31</h3><ul>\n<li>修改了图标</li>\n<li>修复了百度百科无法访问的问题</li>\n</ul>\n"},{"title":"慢慢来，不要急","url":"http://code4fun.me/2015/04/25/慢慢来，不要急/","content":"<p>记得之前上初中的时候，住校，一个月才可以回一次家，每次回家父母都会说，又长高了、又变瘦了，可是这个过程自己或者身边的同学都没有提过。因为每年去爷爷家过年的时候，都习惯在门上比着头顶画一道线，来标一下自己的身高，只有这时候才能直观的感受到，呀，真的长高了这么多啊。</p>\n<p>生活中的事情不大抵都是如此嘛，没有人可以一口吃个胖子，所有进步都是一点一滴的。今天突然想到这个是因为，今天在整理印象笔记的文章的时候，发现之前摘抄了太多文章，然而又都没有好好看过，所以决定暂时停止添加新的文章，从而也就减少了以前刷微博的理由，于是把微博客户端和RSS订阅都放在了最后一屏，并且把ibook从文件夹里挪了出来，打算用那些省出来的时间看看书。虽然，如今已经不算一个重度的社交应用的用户，正常情况下，每天只会打开微博和微信几次，人人和QQ空间早就在手机上删了，不过之前确实是一个很重度的用户，虽然那时候手机还很差，都无法安装人人客户端，可是还是每天都会无数次打开网页版的人人，乃至有时候如果手机联系不到，往往人人的消息可以联系的到。渐渐的把这些都放弃了，当然这个过程是痛苦的，毕竟<code>刷</code>这个动作是一个很轻松愉悦的事情，看看鸡汤文、美女自拍，虽然那时候还没有各种代购。直到有一天突然发现，在这个上面浪费了太多时间，并且没有太多有技术含量的东西，于是渐渐的淡出了人人和空间，由于一直觉得微信和微博还有一些比较不错的文章，也习惯了把文章分享到印象笔记等等，并且一直觉得这个过程还是挺充实的，所以还是保留着这些习惯。前一阵，在微信上屏蔽了一些自拍党和代购党，瞬间觉得朋友圈干净了很多。乃至今日，再放弃微博和RSS等碎片阅读，从而可以抽出更多的时间来进行一些深入的阅读，觉得这么做还是挺值得的。</p>\n<p>当然，如果直接说从天天刷的地步直接完全停止所有的应用，无疑是十分不现实的，可是通过一段时间的过渡，发现了之前那么做的收益，这个过程就变得十分自然了。所以对这些事情，我们没必要着急，没有什么是可以一蹴而就的。不可能一夜从一个跑几步就喘的胖子，变成八块腹肌的型男，这个肯定是一步步的变化的过程。</p>\n<p>人最怕的是着急，急则乱，反而使效率降低，什么都做不成。</p>\n<blockquote>\n<p><a href=\"code4fun.me\">呼呼呼山</a><br>2015/4/25 星期六 23:38</p>\n</blockquote>\n"},{"title":"VPS SSH connection timed out","url":"http://code4fun.me/2015/03/15/vps-ssh-connection-timed-out/","content":"<p>今天打算设置Shadow Socks来进行科学上网，结果突然发现VPS连接不上了，然后就是各种蛋疼，导致今天一天心情都是很不好，然后只得借助网页版的登陆查问题，中间抽风一次，手机竟然连上了，然后就赶紧用手机把Shadow Socks用手机下载然后设置完成，还好设置比较方便，分分钟搞定了，电脑就可以不用蛋疼的用VPN上网了，虽然手机上还是不能全局代理，但是临时用一下VPN就好了。再加上SwitchyOmega的大力配合，基本上可以感受到一个无墙的网络环境了。</p>\n<p>强力推荐大家采用ShadowSocks配合SwitchyOmega进行科学上网。</p>\n<p>然后，Google出奇迹，再翻阅了大量的网页，然后根据各种提示进行自检的时候，发现都没有问题，然后再各种网络环境以及操作系统检查排除了网络问题，ip问题，然后检查防火墙配置赶紧也没有问题，再我几乎要绝望，打算重装SSH的时候，突然想到是不是可以改一下port，然后就尝试一下，改了那个port，然后竟然，竟然成功了。</p>\n<p>虽然浪费了很多时间之后，就这么不明所以的成功了，但是这期间还是学了很多自检的命令的，从事后修改端口成功来看，应该还是防火墙iptables之类的设置有误。</p>\n"},{"title":"做事情的方法比事情常常比事情本身更重要","url":"http://code4fun.me/2015/03/14/做事情的方法比事情常常比事情本身更重要/","content":"<p>开头先讲几个例子。</p>\n<p>１．此时有几张大小固定的照片（例如手机截图），你需要拼在一起，并且打上水印你会怎么办？</p>\n<p>２Ｂ青年：打开画图工具或者ＰＳ之类的软件，开始一张张合并，加水印。</p>\n<a id=\"more\"></a>\n<p>普通青年：用PS做一张透明模板，然后调好距离，放上水印，每次只需要图片托进去就好了。</p>\n<p>程序猿　：写一段代码，自动把某文件夹下面的所有图片拼起来，并且加好水印。</p>\n<p>２．确定一堆文档或者代码的行数</p>\n<p>２Ｂ青年：一个文件一个文件的统计代码行数然后相加。（再２Ｂ点就完全是手数了　ｏ（╯□╰）ｏ）</p>\n<p>普通青年：手工把所有代码粘到文档里看最后的统计结果</p>\n<p>程序猿　：写一个shell脚本把所有的文件拷贝到一个里面看统计结果或者采用正则表达式全局搜索显示行数</p>\n<p>&nbsp;</p>\n<p>暂且就举上面两个例子，也许这些例子你并不一定碰到过，但是其余的很多类似的肯定发生过。之所以想到这个是今天在听【内核恐慌】的时候，听到木遥提前说他很羡慕那些具有工程师特质的人，而此时吴涛就提到说小学的时候自己为了做作业而写了个自动计算四则运算的程序。而木遥听到四则运算则想到的是除了这几种运算外还有什么别的运算吗？也许这就是工程师思维与科学家思维之间的区别，对于同样的四则运算也许大部分人只是觉得这就是老师布置的作业，没什么特别之处，虽然结果是大家都完成了这些任务，但是结果确实完全不同的。有些人在解决问题的时候，看到的只是当前的问题，而有些人看到的则是是不是可以通过一些方法来减轻这种重复劳动，还有些人看到的则是为什么要解决这个问题。</p>\n<p>其实简单的来说工程师思维就是一种效率至上的思维方式，这个效率至上并不一定指的是对某个特定任务的完成时间比你短，就如例子一中也许如果只是拼一张照片，直接拼可能只用了３分钟，而写一个小程序用了３０分钟，看起来时间要长的多，可是再次遇到相同问题的时候，你还是需要３分钟，而这时候可能工程师只需要３秒钟。也许生活中有些人并不明白我为什么要花这么久的时间折腾手机，能用不就好了，在我看来作为生活中用的最频繁的东西，肯定只有折腾的最顺手才可以用的习惯，例如在dock栏里放一个launch center pro就可以很方便的进行一些日常的操作而不需要四处乱翻，也许设置的过程中会麻烦一些，但是这是一个长期的操作，带来的是以后的大便利。</p>\n<p>有点跑题，在这里我们不去探讨科学家思维和工程师思维各自的优缺点，而只是借此来引出一个问题－－为什么每个人都需要学一门编程语言。</p>\n<p>也许并不是每个人都能够理解计算机的运行原理，内存分布等等复杂的问题，但是现在有太多们高级语言可以去学习，有太多的语言程度是只要能读懂英语就可以读懂代码的地步。门槛已经降低到很大的程度了，随着计算机的普及，我们太多的工作都是依赖计算机来完成的，而会一门编程语言会大大提高我们的工作效率。</p>\n<p>在连美国总统奥巴马都可以参加每天编程一小时的活动，也许对于我们更是有时间精力去掌握一门编程语言，让我们的生活更加丰富多彩，我们不需要去达到自己写一个APP或者可以搭建一个网站的程度，只要能够给我们生活带来一点便利，这就是值得了。</p>\n<p>在这里，对于编程语言推荐像Python, Ruby这类的具有很大扩展性的教成熟的脚本语言，学着简单，用着舒心。</p>\n<p><span id=\"sample-permalink\" tabindex=\"-1\"><a href=\"http://code4fun.me/?p=150\">http://code4fun.me/?p=150</a></span></p>\n"},{"title":"时间与金钱","url":"http://code4fun.me/2015/03/03/时间与金钱/","content":"<p>这一篇和上一篇隔的时间太久了，中间经历了很多的事情，回国回家回西安。</p>\n<p>之前让朋友从日本带的键盘终于到了，忍不住秀一下。</p>\n<p>按理说有了新键盘，应该发奋图强了，可是最近突然变得什么都不想干，也许是有所牵挂的原因吧。</p>\n<p>今天把文章的评论取消了，就是这么任性，突然想起之前看过的一个故事，放在这就是我现在没名气就算我开着评论也没人评论，如果某一天我有名气了，即使不开评论大家也可以找到我的，何必在乎这个是不是有评论呢，其实主要是垃圾评论太多了，烦死了。乃至本着一切输入都是有害的原则，少一个评论窗口更加安全一些。</p>\n<p>前一段，在微博上看到ifanr的某个栏目在招人，其实就是软件测评，然后本着试一试的态度，就写了一篇测评稿寄过去了，然后没想到的是竟然过了，说起来当刚知道的时候还是蛮开心的，然后当天兴致勃勃的写了一篇测评稿，可是渐渐的感觉貌似大家需要一直聊天，不聊天吧显得不够活跃，可是这个肯定不能用来当饭吃，花在上面的时间着实是过于多了一些，所以现在是打算放弃了，还是自己做一点事情比较好。</p>\n<p>最近柴静的苍穹之下火了一把，不过从芬兰走到北京再从北京走到西安，这中间没有经历太多的雾霾的感觉，也许回国之后，影响最大的不是雾霾而是那令人崩溃的网络环境，虽然有VPN可以用，可是这个不太稳定啊，断断断。</p>\n<p>写了半天貌似和标题没多大关系，其实想说的就是年轻的时候要敢于给自己投资，不管是一副贴心的键盘也好，少去赚一些钱也好，把时间放在应该放的地方才能获得更大的成就。</p>\n"},{"title":"九浅一深 Python 3 编码问题","url":"http://code4fun.me/2015/01/29/Python 3 decode/","content":"<p>Python 3 与 2 有一个很大的不同就是编码问题，这个问题也导致了很多之前的程序没法很好的运行了，尤其是在网络方面，之前的各类示范代码都会报错，会出现一些类似下面的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; u&apos;hello&apos; + b&apos;world!&apos;</div><div class=\"line\">TypeError: Can&apos;t convert &apos;bytes&apos; object to str implicitly</div></pre></td></tr></table></figure>\n<p>这个还不是最坑的，还是可以接受的，下面的错误才是莫名奇妙，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; import urllib.request</div><div class=\"line\">&gt;&gt;&gt; print(urllib.request.urlopen(&apos;http://code4fun.me&apos;).read().decode(&apos;utf-8&apos;))</div><div class=\"line\">nicodeEncodeError: &apos;gbk&apos; codec can&apos;t encode character &apos;\\xbb&apos; in position xxxx</div></pre></td></tr></table></figure>\n<p>并且是时好时坏，由于电脑是双系统，所以有的时候会在 Windows 下写一些代码，然后有些本来好好的代码，就会抽风，然后报上面的错误。这个的只要原因是 Windows 会默认编码方式是 ‘gbk’，对此目前还没有找到很好的办法解决，可以参看<a href=\"http://stackoverflow.com/questions/3218014/unicodeencodeerror-gbk-codec-cant-encode-character-illegal-multibyte-sequen\" target=\"_blank\" rel=\"external\">stack overflow</a>。</p>\n<p>这个简直是不能忍了，于是现在是彻底放弃 Windows 写 Python 的想法，有的时候不得不用 Windows 的时候就选择 SSH 到 Linux 然后继续在 Linux 下写一些代码，然后有些本来好好的代码，就会抽风，然后报上面的错误。</p>\n<p>废话说了一堆，下面就说一下 Python 3 中的编码问题，从 Python 3 开始，存在两种形式 text 和 binary data，这个代替了 Python 2 中的 Unicode strings 和 8-bit strings。 所以当我们在 Python 3 中正常的写一个字符串时默认是 Unicode 格式的，也就是 Python 3 中的 str 类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; type(&apos;code4fun&apos;)</div><div class=\"line\">&lt;class &apos;str&apos;&gt;</div><div class=\"line\">&gt;&gt;&gt; type(u&apos;code4fun&apos;)</div><div class=\"line\">&lt;class &apos;str&apos;&gt;</div><div class=\"line\">&gt;&gt;&gt; type(b&apos;code4fun&apos;)</div><div class=\"line\">&lt;class &apos;bytes&apos;&gt;</div></pre></td></tr></table></figure>\n<p>而 Python 2 中则是只有前面加了 ‘u’ 之后才是unicode编码的，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; type(&apos;code4fun&apos;)</div><div class=\"line\">&lt;type &apos;str&apos;&gt;</div><div class=\"line\">&gt;&gt;&gt; type(u&apos;code4fun&apos;)</div><div class=\"line\">&lt;type &apos;unicode&apos;&gt;</div><div class=\"line\">&gt;&gt;&gt; type(b&apos;code4fun&apos;)</div><div class=\"line\">&lt;type &apos;str&apos;&gt;</div></pre></td></tr></table></figure>\n<p>相信大家可以从上面这两段运行结果可以清晰的发现区别，也就是在 Python 3 中用 str 类型来存储文本，而用 bytes 类型来存储数据。</p>\n<p>当然，我们难免会接触到很多 bytes 需要转化为 str 或者反之的情况，这时候就需要引入两个函数 decode() 以及 encode() 了。</p>\n<p>decode() 也就是解码的意思，何谓之解码呢， Unicode 就和 ASCII 一样都是一种编码方式，由于 CPU 能识别的只是01010，而人类的语言是由字母和笔画组成的，于是就在不同的字符和二进制数字（十六进制和二进制类似）之间有一个对应关系，最简单的是 ASCII 表，只有127个，当然汉字没在里面，就连法语、德语等需要 ‘ö’ 此类字符的国家也没有包括起来，于是就开始进行扩增，经过各种协调统一之后就有了 Unicode 而 UTF-8 就是其中的一种包含常用字符且不占据很多空间的编码方式。</p>\n<p>上面说那么多，其实就是为了让大家理解 unicode 和 bytes 之间的关系，从而梳理清楚 decode() 和 encode() 的关系。一堆 bytes 就是一堆二进制的形式的字符人类无法理解，所以我们需要对他们进行解码从而可以得到我们可以理解的形式，而字符串编码之后就可以得到计算机可以理解的 bytes 类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; print(&apos;呼呼呼山&apos;.encode())</div><div class=\"line\">b&apos;\\xe5\\x91\\xbc\\xe5\\x91\\xbc\\xe5\\x91\\xbc\\xe5\\xb1\\xb1&apos;</div><div class=\"line\">&gt;&gt;&gt; print(b&apos;\\xe5\\x91\\xbc\\xe5\\x91\\xbc\\xe5\\x91\\xbc\\xe5\\xb1\\xb1&apos;.decode(&apos;utf-8&apos;))</div><div class=\"line\">呼呼呼山</div></pre></td></tr></table></figure>\n<h2 id=\"最后做个总结\"><a href=\"#最后做个总结\" class=\"headerlink\" title=\"最后做个总结\"></a>最后做个总结</h2><p>计算机方便理解的是 bytes 类型，而人类方便理解的是 str 类型，那么我们就可以方便的构造一个三明治模型，</p>\n<p><img src=\"/images/unicodesan_1538722256_26901.png\" alt=\"unicode sandwich\"></p>\n<p>外面与计算机接触的部分是 bytes，而我们自己处理的部分是 unicode，一方面 Python 3 的默认为 unicode，更加方便我们处理，另一方面我们也可以直观的理解，不需要多次乱七八糟的转化。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"http://nedbatchelder.com/text/unipain.html\" target=\"_blank\" rel=\"external\">Pragmatic Unicode</a><br><a href=\"https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit\" target=\"_blank\" rel=\"external\">Text Vs. Data Instead Of Unicode Vs. 8-bit</a><br><a href=\"http://woodpecker.org.cn/diveintopython3/strings.html\" target=\"_blank\" rel=\"external\">Dive Into Python 3</a></p>\n"},{"title":"那些显示对方ip信息的图片是怎么制作的？","url":"http://code4fun.me/2015/01/25/那些显示对方ip信息的图片是怎么制作的？/","content":"<p>之前逛贴吧，总是能够看到很多很酷玄的签名，就如下面这张虽然很简陋，例如显示出你现在的位置啊，浏览器啦什么的。之前一直不知道是怎么弄得，后来发现原来php是可以搞定的。</p>\n<p>那些显示对方ip信息的图片是怎么制作的呢？今天就由我带领着大家来制作一张吧，当然这些可以很炫酷的签名档了，如果想特别定制的话可以私信我，本来是想在自己博客上提供一个网页自动生成一些选项的，但是本着 <strong>一切输入都是有害的</strong>  的原则，没有做，见谅了。o(<em>￣▽￣</em>)ゞ</p>\n<p>其实这个图片制作也是很简单的，下面是我的源码，也可以参看<a href=\"https://github.com/zhangzhishan/scripts/edit/master/informationpic.php\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p>其中ip地址是可以采用PHP直接获得的，然后地址查询API是用的<a href=\"http://www.netimpact.com\" target=\"_blank\" rel=\"external\">Netimpact</a>提供的免费服务，每天只可查询250次，所以可能后面的就会出现不了结果的状况。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\">$u_agent = $_SERVER[<span class=\"string\">'HTTP_USER_AGENT'</span>];</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Unknown'</span>;</div><div class=\"line\"></div><div class=\"line\">$platform = <span class=\"string\">'Unknown'</span>;</div><div class=\"line\"></div><div class=\"line\">$version = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/linux/i'</span>, $u_agent))&#123;</div><div class=\"line\"></div><div class=\"line\">$platform = <span class=\"string\">'Linux'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span> (preg_match(<span class=\"string\">'/macintosh|mac os x/i'</span>, $u_agent))&#123;</div><div class=\"line\"></div><div class=\"line\">$platform = <span class=\"string\">'mac'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span> (preg_match(<span class=\"string\">'/windows|win32/i'</span>, $u_agent))&#123;</div><div class=\"line\"></div><div class=\"line\">$platform = <span class=\"string\">'windows'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"string\">'/MSIE/i'</span>, $u_agent)&amp;amp;&amp;amp;!preg_match(<span class=\"string\">'/Opera/i'</span>, $u_agent))</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Internet Explorer'</span>;</div><div class=\"line\"></div><div class=\"line\">$ub = <span class=\"string\">'MSIE'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span>(preg_match(<span class=\"string\">'/Firefox/i'</span>,$u_agent))</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Mozilla Firefox'</span>;</div><div class=\"line\"></div><div class=\"line\">$ub = <span class=\"string\">'Firefox'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span>(preg_match(<span class=\"string\">'/Chrome/i'</span>,$u_agent))</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Google Chrome'</span>;</div><div class=\"line\"></div><div class=\"line\">$ub = <span class=\"string\">'Chrome'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span>(preg_match(<span class=\"string\">'/Safari/i'</span>,$u_agent))</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Apple Safari'</span>;</div><div class=\"line\"></div><div class=\"line\">$ub = <span class=\"string\">'Safari'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elseif</span>(preg_match(<span class=\"string\">'/Opera/i'</span>,$u_agent))</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">$bname = <span class=\"string\">'Opera'</span>;</div><div class=\"line\"></div><div class=\"line\">$ub = <span class=\"string\">'Opera'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$known = <span class=\"keyword\">array</span>(<span class=\"string\">'Version'</span>, $ub, <span class=\"string\">'other'</span>);</div><div class=\"line\"></div><div class=\"line\">$pattern = <span class=\"string\">'#(?&amp;lt;browser&amp;gt;'</span>.join(<span class=\"string\">'|'</span>, $known).<span class=\"string\">')[/ ]+(?&amp;lt;version&amp;gt;[0-9.|a-zA-Z.]*)#'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match_all($pattern, $u_agent, $matches)) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$i = count($matches[<span class=\"string\">'browser'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ($i != <span class=\"number\">1</span>) &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (strripos($u_agent, <span class=\"string\">\"Version\"</span>) &amp;lt; strripos($u_agent,$ub))&#123;</div><div class=\"line\"></div><div class=\"line\">$version = $matches[<span class=\"string\">'version'</span>][<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">$version = $matches[<span class=\"string\">'version'</span>][<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">$version = $matches[<span class=\"string\">'version'</span>][<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>($version == <span class=\"keyword\">null</span> || $version==<span class=\"string\">\"\"</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">$version=<span class=\"string\">\"?\"</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$ua = [</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'userAgent'</span> =&amp;gt; $u_agent,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'name'</span> =&amp;gt; $bname,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'version'</span> =&amp;gt; $version,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'platform'</span> =&amp;gt; $platform,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'pattern'</span> =&amp;gt; $pattern</div><div class=\"line\"></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">$browser = <span class=\"string\">\"Your browser: \"</span>.$ua[<span class=\"string\">'name'</span>].<span class=\"string\">\" \"</span>.$ua[<span class=\"string\">'version'</span>].<span class=\"string\">\" on \"</span>.$ua[<span class=\"string\">'platform'</span>];</div><div class=\"line\"></div><div class=\"line\">$img_number = imagecreate(<span class=\"number\">850</span>,<span class=\"number\">60</span>);</div><div class=\"line\"></div><div class=\"line\">$backcolor = imagecolorallocate($img_number,<span class=\"number\">125</span>,<span class=\"number\">185</span>,<span class=\"number\">222</span>);</div><div class=\"line\"></div><div class=\"line\">$textcolor = imagecolorallocate($img_number,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>);</div><div class=\"line\"></div><div class=\"line\">imagefill($img_number,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$backcolor);</div><div class=\"line\"></div><div class=\"line\">$agent=$_SERVER[<span class=\"string\">'HTTP_USER_AGENT'</span>];</div><div class=\"line\"></div><div class=\"line\">$ip=$_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>];</div><div class=\"line\"></div><div class=\"line\">$host_name = gethostbyaddr($_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>]);</div><div class=\"line\"></div><div class=\"line\">$url = <span class=\"string\">\"http://api.netimpact.com/qv1.php?key=uiWMSWCvUGimIahk&amp;amp;qt=geoip&amp;amp;d=json&amp;amp;q=$ip\"</span>;</div><div class=\"line\"></div><div class=\"line\">$d = file_get_contents($url);</div><div class=\"line\"></div><div class=\"line\">$details = json_decode($d);</div><div class=\"line\"></div><div class=\"line\">$data = explode(<span class=\"string\">','</span> , $d);</div><div class=\"line\"></div><div class=\"line\">$info = <span class=\"keyword\">array</span>(</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'country_code'</span> =&amp;gt; $data[<span class=\"number\">6</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'country_name'</span> =&amp;gt; $data[<span class=\"number\">2</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'region_name'</span> =&amp;gt; $data[<span class=\"number\">1</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'city'</span> =&amp;gt; $data[<span class=\"number\">0</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'latitude'</span> =&amp;gt; $data[<span class=\"number\">4</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'longitude'</span> =&amp;gt; $data[<span class=\"number\">5</span>] ,</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'isp'</span> =&amp;gt; $data[<span class=\"number\">3</span>] ,</div><div class=\"line\"></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$messages = <span class=\"string\">\"Dear friends from $data[0], $data[1], $data[2]($data[4], $data[5]).\"</span>;</div><div class=\"line\"></div><div class=\"line\">$message2 = <span class=\"string\">\"Using $agent\"</span>;</div><div class=\"line\"></div><div class=\"line\">$time = date(<span class=\"string\">'Y-m-d H:i:s'</span>);</div><div class=\"line\"></div><div class=\"line\">Imagestring($img_number,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,$messages,$textcolor);</div><div class=\"line\"></div><div class=\"line\">Imagestring($img_number,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">20</span>,$browser,$textcolor);</div><div class=\"line\"></div><div class=\"line\">Imagestring($img_number,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">40</span>,$time,$textcolor);</div><div class=\"line\"></div><div class=\"line\">header(<span class=\"string\">\"Content-type: image/jpeg\"</span>);</div><div class=\"line\"></div><div class=\"line\">imagejpeg($img_number);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>"},{"title":"磨刀不误砍柴工——二十个你必须知道的Sublime Text快捷键","url":"http://code4fun.me/2015/01/21/磨刀不误砍柴工——二十个你必须知道的Sublime Text快捷键/","content":"<p>有点标题党，纯属娱乐。</p>\n<p>作为其他编辑器一派的，Sublime Text绝对是个不错的选择，虽然没有Emacs那么强大，也没有Vim那样专注，但是在Windows下绝对是个不错的选择，插件和可配置性还是很强大的。（Emacs没试过，不过Windows下的Vim配置着实不爽）</p>\n<h2 id=\"ctrl-shift-p\"><a href=\"#ctrl-shift-p\" class=\"headerlink\" title=\"ctrl + shift + p\"></a>ctrl + shift + p</h2><p>如果要在Sublime里面选择一个最强大的命令，那绝对是这个，这个快捷键可以显示当前文档所有可用的命令或者设置（包括插件）, 自动生成函数块之类的。</p>\n<p>下面是演示的python自动新建一个类的过程。</p>\n<p>&nbsp;</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/01/ctrlshiftp.gif\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/ctrlshiftp.gif\" alt=\"ctrlshiftp\"></a></p>\n<h2 id=\"ctrl-r-和-ctrl-g-ctrl-p\"><a href=\"#ctrl-r-和-ctrl-g-ctrl-p\" class=\"headerlink\" title=\"ctrl + r 和 ctrl+g ctrl + p\"></a>ctrl + r 和 ctrl+g ctrl + p</h2><p>这三个是相互可以转化的，所以放在了一起。</p>\n<p>ctrl+g是跳转到指定行， ctrl + r 是函数名查找，ctrl + p是 文件搜索，但是如果把ctrl+g出现的冒号删除就成了ctrl+p的功能，若换成@就实现了ctrl+r的功能。</p>\n<h2 id=\"ctrl-b\"><a href=\"#ctrl-b\" class=\"headerlink\" title=\"ctrl + b\"></a>ctrl + b</h2><p>这个也是很强大的功能，函数写完当然要进行编译了，这个就是用来进行编译的，里面内设了一些常用语言的编译，然后你也可以自己设定，由于日常有些工作需要matlab，所以我就设置了一个matlab的编译，下面是我的设置，其余的可以参考这个，自行解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Change path to matlab.exe per local settings</div><div class=\"line\">&quot;cmd&quot;: [&quot;F:/Video/MATLAB R2013b/bin/matlab.exe&quot;, &quot;-nodesktop&quot;, &quot;-nosplash&quot;,</div><div class=\"line\">&quot;-r&quot;, &quot;\\&quot;run(&apos;$file&apos;)\\&quot;&quot;],</div><div class=\"line\">&quot;selector&quot;: &quot;source.m&quot;,</div><div class=\"line\">&quot;working_dir&quot;: &quot;$&#123;project_path:$&#123;folder&#125;&#125;&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"ctrl-注释，不多说了\"><a href=\"#ctrl-注释，不多说了\" class=\"headerlink\" title=\"ctrl + / 注释，不多说了\"></a>ctrl + / 注释，不多说了</h2><h2 id=\"ctrl-或者-代码的缩进调整\"><a href=\"#ctrl-或者-代码的缩进调整\" class=\"headerlink\" title=\"ctrl+[ 或者 ]  代码的缩进调整\"></a>ctrl+[ 或者 ]  代码的缩进调整</h2><h2 id=\"下面是对变量的一些操作：\"><a href=\"#下面是对变量的一些操作：\" class=\"headerlink\" title=\"下面是对变量的一些操作：\"></a>下面是对变量的一些操作：</h2><h3 id=\"ctrl-左右移动键-每次移动一个变量\"><a href=\"#ctrl-左右移动键-每次移动一个变量\" class=\"headerlink\" title=\"ctrl + 左右移动键 每次移动一个变量\"></a>ctrl + 左右移动键 每次移动一个变量</h3><h3 id=\"alt-左右移动键-每次移动一个单词（如果有下划线分开，就会停止）\"><a href=\"#alt-左右移动键-每次移动一个单词（如果有下划线分开，就会停止）\" class=\"headerlink\" title=\"alt + 左右移动键 每次移动一个单词（如果有下划线分开，就会停止）\"></a>alt + 左右移动键 每次移动一个单词（如果有下划线分开，就会停止）</h3><h3 id=\"shift-左右移动键-随着移动会对那些字进行选择（可以和ctrl以及alt，home-end等联合使用）\"><a href=\"#shift-左右移动键-随着移动会对那些字进行选择（可以和ctrl以及alt，home-end等联合使用）\" class=\"headerlink\" title=\"shift + 左右移动键 随着移动会对那些字进行选择（可以和ctrl以及alt，home, end等联合使用）\"></a>shift + 左右移动键 随着移动会对那些字进行选择（可以和ctrl以及alt，home, end等联合使用）</h3><p>   shift 和一些移动键的结合也是相当强大的，可以直接进行选择编辑。</p>\n<h3 id=\"ctrl-d-选择变量\"><a href=\"#ctrl-d-选择变量\" class=\"headerlink\" title=\"ctrl + d 选择变量\"></a>ctrl + d 选择变量</h3><p>   多次按可以进行同一变量的多个选择</p>\n<h3 id=\"ctrl-delete-从该处删除单词直到词尾\"><a href=\"#ctrl-delete-从该处删除单词直到词尾\" class=\"headerlink\" title=\"ctrl + delete 从该处删除单词直到词尾\"></a>ctrl + delete 从该处删除单词直到词尾</h3><h3 id=\"f3-向后搜索单词（联合shift向前索引，alt-表示-find-all）\"><a href=\"#f3-向后搜索单词（联合shift向前索引，alt-表示-find-all）\" class=\"headerlink\" title=\"f3 向后搜索单词（联合shift向前索引，alt 表示 find all）\"></a>f3 向后搜索单词（联合shift向前索引，alt 表示 find all）</h3><h3 id=\"ctrl-m-在两个配对的（大中小）括号之间跳转\"><a href=\"#ctrl-m-在两个配对的（大中小）括号之间跳转\" class=\"headerlink\" title=\"ctrl + m 在两个配对的（大中小）括号之间跳转\"></a>ctrl + m 在两个配对的（大中小）括号之间跳转</h3><h3 id=\"ctrl-space-自动补全选择\"><a href=\"#ctrl-space-自动补全选择\" class=\"headerlink\" title=\"ctrl + space 自动补全选择\"></a>ctrl + space 自动补全选择</h3><h2 id=\"多行编辑：\"><a href=\"#多行编辑：\" class=\"headerlink\" title=\"多行编辑：\"></a>多行编辑：</h2><h3 id=\"shift-enter-在该行上面插入一行\"><a href=\"#shift-enter-在该行上面插入一行\" class=\"headerlink\" title=\"shift + enter 在该行上面插入一行\"></a>shift + enter 在该行上面插入一行</h3><p>ctrl + enter 在该行下面插入一行</p>\n<h3 id=\"ctrl-l选择整行\"><a href=\"#ctrl-l选择整行\" class=\"headerlink\" title=\"ctrl + l选择整行\"></a>ctrl + l选择整行</h3><h3 id=\"ctrl-alt-上下键-选择多行，方便进行多行的更改\"><a href=\"#ctrl-alt-上下键-选择多行，方便进行多行的更改\" class=\"headerlink\" title=\"ctrl + alt + 上下键 选择多行，方便进行多行的更改\"></a>ctrl + alt + 上下键 选择多行，方便进行多行的更改</h3><h3 id=\"ctrl-home-end回到全文文首-末尾\"><a href=\"#ctrl-home-end回到全文文首-末尾\" class=\"headerlink\" title=\"ctrl + home / end回到全文文首 / 末尾\"></a>ctrl + home / end回到全文文首 / 末尾</h3><h2 id=\"多文件，多窗口：\"><a href=\"#多文件，多窗口：\" class=\"headerlink\" title=\"多文件，多窗口：\"></a>多文件，多窗口：</h2><h3 id=\"ctrl-page-up-down-查看上-下一个文件\"><a href=\"#ctrl-page-up-down-查看上-下一个文件\" class=\"headerlink\" title=\"ctrl + page up / down 查看上 / 下一个文件\"></a>ctrl + page up / down 查看上 / 下一个文件</h3><h3 id=\"alt-shift-数字-多窗口，数字是窗口的个数（在此时ctrl-数字会跳转到第几个窗口）\"><a href=\"#alt-shift-数字-多窗口，数字是窗口的个数（在此时ctrl-数字会跳转到第几个窗口）\" class=\"headerlink\" title=\"alt + shift + 数字 多窗口，数字是窗口的个数（在此时ctrl + 数字会跳转到第几个窗口）\"></a>alt + shift + 数字 多窗口，数字是窗口的个数（在此时ctrl + 数字会跳转到第几个窗口）</h3><h3 id=\"alt-数字-跳到第几个文件（类似chrome）\"><a href=\"#alt-数字-跳到第几个文件（类似chrome）\" class=\"headerlink\" title=\"alt+数字 跳到第几个文件（类似chrome）\"></a>alt+数字 跳到第几个文件（类似chrome）</h3><h2 id=\"one-more-thing-f11-全屏-更加专注于代码\"><a href=\"#one-more-thing-f11-全屏-更加专注于代码\" class=\"headerlink\" title=\"one more thing: f11 全屏 更加专注于代码\"></a>one more thing: f11 全屏 更加专注于代码</h2>"},{"title":"初探二维码生成","url":"http://code4fun.me/2015/01/20/初探二维码生成/","content":"<p>最近一直在折腾各种图像的东西，过一段时间要整理一下，且说一下今天的二维码生成。</p>\n<p>在python万能的各种库面前，大部分你想做的工作基本上都有了现成的工作，虽然不需要知道二维码的原理就可以简单的生成，但是看一下历史、原理什么的总归是好的。<a href=\"http://www.qrcode.com/zh/history/\" title=\"二维码历史\" target=\"_blank\" rel=\"external\">http://www.qrcode.com/zh/history/</a>。经过之前查找资料，发现英文版的网站内容竟然比汉语的多，由于不懂日语，所以也没看日文版的。</p>\n<p>二维码生成的库<a href=\"https://pypi.python.org/pypi/qrcode\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/qrcode</a>， 安装很简单，直接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install qrcode</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<p>然后在官网上有简单的介绍，最简单的是直接在命令行里面输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">qr &apos;hello, world!&apos; &gt; &apos;hello.jpg&apos;</div></pre></td></tr></table></figure>\n<p>即可直接生成一个名字为hello.jpg的最简单的二维码文件.<br>当然我们也可以在一个python程序里面运用这个，一切也是很简单的。再加上强大的PIL库，生成一个带自己logo的二维码是妥妥的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># Author = huhuhushan</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> qrcode <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageFont</div><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageDraw</div><div class=\"line\"></div><div class=\"line\">data = <span class=\"string\">'http://code4fun.me'</span></div><div class=\"line\">qr = QRCode(version=<span class=\"number\">20</span>, error_correction=ERROR_CORRECT_L)</div><div class=\"line\">qr.add_data(data)</div><div class=\"line\">qr.make()</div><div class=\"line\"></div><div class=\"line\">im = qr.make_image()</div><div class=\"line\">draw = ImageDraw.Draw(im)</div><div class=\"line\">xsize, ysize = im.size</div><div class=\"line\">subim = Image.open(<span class=\"string\">'logo.jpg'</span>)</div><div class=\"line\">subim = subim.resize((<span class=\"number\">200</span>, <span class=\"number\">200</span>))</div><div class=\"line\">im.paste(subim, (xsize/<span class=\"number\">2</span><span class=\"number\">-100</span>, ysize/<span class=\"number\">2</span><span class=\"number\">-100</span>, xsize/<span class=\"number\">2</span>+<span class=\"number\">100</span>, ysize/<span class=\"number\">2</span>+<span class=\"number\">100</span>))</div><div class=\"line\">im.resize((<span class=\"number\">50</span>, <span class=\"number\">50</span>))</div><div class=\"line\">im.show()</div><div class=\"line\">im.save(<span class=\"string\">'test2.jpg'</span>)</div></pre></td></tr></table></figure>\n<p>下面就来一个示例，具体的代码可以参见我的github:<a href=\"https://github.com/zhangzhishan/python-scripts\" target=\"_blank\" rel=\"external\">https://github.com/zhangzhishan/python-scripts</a>, 会不定期写一些小脚本。</p>\n"},{"title":"github密码泄漏","url":"http://code4fun.me/2015/01/20/github密码泄漏/","content":"<p>在测试一些互联网应用的时候，大家很多都会采用自己的帐号名，然后有些做完就顺手传到github上去了，然后个人信息什么的就都在上面了。 这个主要是给大家提个醒，并不算什么漏洞。一搜索，帐号密码真是比比皆是。</p>\n<a id=\"more\"></a>\n<p>下面是一些截图证明，大家赶紧把那些带帐号密码的文件改一下。</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225615.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225615.png\" alt=\"QQ截图20150118225615\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225721.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225721.png\" alt=\"QQ截图20150118225721\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225830.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225830.png\" alt=\"QQ截图20150118225830\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225849.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118225849.png\" alt=\"QQ截图20150118225849\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118230239.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118230239.png\" alt=\"QQ截图20150118230239\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118231728.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118231728.png\" alt=\"QQ截图20150118231728\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118231740.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118231740.png\" alt=\"QQ截图20150118231740\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118232206.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118232206.png\" alt=\"QQ截图20150118232206\"></a> <a href=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118232217.png\"><img src=\"http://code4fun.me/wp-content/uploads/2015/01/QQ截图20150118232217.png\" alt=\"QQ截图20150118232217\"></a></p>\n"},{"title":"js定时自动提交","url":"http://code4fun.me/2015/01/19/js定时自动提交/","content":"<p>中国电信登录的时候可以选择，采用随机密码登录，也就是给你手机发送一条验证码，但是由于该提交在验证码之前，且没有次数限制，所以在一定程度上可以造成短信炸弹，利用起来也很简单，只需要基本的js代码即可.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ss</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// location.reload()</span></div><div class=\"line\">    loginName.value = <span class=\"string\">'18949592282'</span>;<span class=\"comment\">//phone number</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'s12'</span>).click(); </div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'passWord_reset'</span>).click(); </div><div class=\"line\">    setTimeout(<span class=\"string\">\"ss()\"</span>, <span class=\"number\">60000</span>); </div><div class=\"line\">&#125;</div><div class=\"line\">ss();</div></pre></td></tr></table></figure>"},{"title":"新时代的1984","url":"http://code4fun.me/2015/01/11/新时代的1984/","content":"<p>终于修好了VPS， 在前几天，突然VPS被停了，原因是发出DDoS攻击，好吧，登录进去，查看了一下日志，发现竟然被黑了，然后被用来进行DDoS攻击了，好吧…… ╮(╯-╰)╭ 然后经过与服务商的沟通，想恢复是没希望的了，并且经过查看里面有后门，总是有个莫名的程序在运行，虽然不知道是干嘛的。</p>\n<p>回归正题，花了几天读完了《1984》，虽然那个时代似乎并没有真正的倒来，但又似乎是离我们那么近。虽然还没有变态到四处都是电幕来监控我们的一举一动，但是，在新时代的我们似乎又多了一些别的东西。无处不在的网络构成了新的电幕，虽然现在我们并没有那么深刻的感受，可是事实上不是如此的吗？在大数据时代的我们，我们逐渐脱离不了网络了，我们遇到感兴趣的东西会去网络上搜索，遇到不懂的也会去网络上搜索，并且还会自己把我们的所想所做晒到网络上去。根据这些信息就可以逐渐勾勒出你这个人来。</p>\n<p>之前电幕还是仅仅监控的我们的一举一动，虽然可以看出我们的表情，但是无法监控我们的思想。可是现如今，根据我们的搜索浏览记录甚至是可以在一定程度上得到你的所思所想。电幕也许可以知道你在看什么书，可是他并不知道你是认真看得还是怎么看得，可是在电子书时代，网络知道你在那部分做了笔记，甚至可以统计你的阅读时间，你在某一章画了更多的时间，反复读了多遍，一切都变成可以量化的了。</p>\n<p>如果有心去做，可以获得你的很多的信息，在你都不知道的角落里，遍布了你的信息。如果有人对你怀有恶意，并且有些能力，去搜集这些信息，那么就会可以作出很多让人难以置信的事情，让人防不胜防。互联网上的脚印，如今已经很难抹去，基本上留下来了就会一直留在那里。</p>\n"},{"title":"XSS攻击——跨站脚本攻击与防御 第二章 发现XSS的工具集（1）Burp Suit","url":"http://code4fun.me/2014/12/27/Burp Suit/","content":"<p><strong>介绍</strong></p>\n<p>发现寻找XSS漏洞是一个很复杂以及消耗时间的任务，为了找到这些漏洞的位置，我们使用一大批的工具和技术。在这一章，我们探索那些作者在研究测试中发现的非常有价值的工具。</p>\n<a id=\"more\"></a>\n<p>注意许多XSS漏洞可以仅仅使用浏览器以及对细节的关注就可发现，这些都是主要在搜索框喝着类似的输入中。根据提交一个测试值给表单然后观察相应结果，你可以很快地发现这些简单的漏洞。然而，这些类似的漏洞你可以用一个Web扫描器在很短的时间内发现他们。一旦发现这些漏洞，工具就成了攻击过程中很宝贵的一部分。能够在百忙之中改变requests和response是发现一些有价值漏洞唯一的方法。我们应该注意这些工具并不仅仅可以用在发现XSS漏洞，在进行Web渗透测试中也很有用。</p>\n<p><strong>Burp</strong></p>\n<p>现代浏览器是为速度和效率而生的，这就意味着Web应用的安全评估就是一个很痛苦的任务，因为探究一个Web应用需要深层的分析，通常，为了测试一个应用，你想降低从服务器获得数据和发送数据到服务器的传输速度从而你可以阅读以及改变传输的数据。从而代理出现了。</p>\n<p>在安全的早期，代理可以降低向外传输数据的链接速度，所以用户仅仅可以改变传输到服务器的数据；然而，这仅仅是分析Web应用的一部分。有时你非常应该改变接受的数据。例如，你想改变一个cookie使得它不使用Httponly或者移除一个Javascript功能。有时你想获得一个你浏览器发出的每一个请求的双向传输的细节。然后就出现了Burp Proxy(<a href=\"http://www.portswigger.net/burp/)（译者注：原文链接有误）\" target=\"_blank\" rel=\"external\">http://www.portswigger.net/burp/)（译者注：原文链接有误）</a></p>\n<p>Burp Proxy是一个叫做Burp Suit的用于Web渗透的Java工具的一部分，但是对于本书的目的，仅仅一个功能是尤其有用的，那就是代理。上手，你需要安装Java的运行环境，你可以从Java的官方网站下载。一旦安装成功，你在你的浏览器改变你的代理设置，使用localhost或者127.0.0.1端口为8080.</p>\n<p>图2.1chrome的代理服务器设置</p>\n<p><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-051601的屏幕截图2-300x150.png\" alt=\"2014-12-27 05:16:01的屏幕截图\"></p>\n<p>图2.2 Burp Suit的主窗口</p>\n<p>&nbsp;</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-051621的屏幕截图.png\"><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-051621的屏幕截图-300x183.png\" alt=\"2014-12-27 05:16:21的屏幕截图\"></a></p>\n<p>&nbsp;</p>\n<p>一旦完成以上操作，你就可以启动Burp Proxy了，启动后是一个空白的窗口。 其中Intercept和Options窗口（是我们关注的最重要的窗口。首先，让我们来配置Burp Proxy来监控发送和接受的请求。在Options选项下取消勾选资源类型的限制，勾选Server Response拦截，以及取消勾选‘text’作为一个content type。这样将会展示你链接的所有服务器的所有的数据。</p>\n<p>图2.3 Burp Suit Proxy Options配置屏</p>\n<p><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-054745的屏幕截图-300x205.png\" alt=\"2014-12-27 05:47:45的屏幕截图\"></p>\n<p>&nbsp;</p>\n<p>Note：这也是一种识别你系统里面的间谍软件的方法，因为当有任何数据在你的客户端北修改之后，它讲停止并且警告你。如果你想查看你安装了什么间谍软件，你应该对于所有的客户端进行坚挺，因为每一个需要通过代理去展示什么在使用它。</p>\n<p>&nbsp;</p>\n<p>一但完成配置，你应该可以上网并且观察到从主机传入或者传出的所有数据。这既允许你查看传输的数据又允许你在你认为合适的时候进行修改。当然，你进行的任何修改在被传输给浏览器后会影响你并且值影响你，然而，如果它可以关闭javascript的保护，这就可以被用来做一些罪恶的事情，像持续型XSS，通常由于客户端方面的保护它并不被允许。同样的，在Asynchronous Javascript and 　XML（AJAX）的时代，这个工具对于监视和修改双向的传输数据也是很有力的，同时关掉客户端产生的任何防止浏览器进行修改的保护。</p>\n<p>图2.4 请求监听</p>\n<p><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-060305的屏幕截图-300x197.png\" alt=\"2014-12-27 06:03:05的屏幕截图\"></p>\n<p>这也可以帮助移除一些有可能泄露给目标的信息，包括cookies， referrers或者其他一些不必须的信息，就如上图所示。另一个有用的特性是转换成16进制模式。特别是在你查看采用交替编码方式，像US-ASCII或者UTF-16.</p>\n<p>在下面两幅图中，你可以看到，他们或者是不可见字符（null）或者是不在标准的ASCII码0-127的范围内而是在128-255的范围内。在这两种情况中，查看源文件将提供很少甚至无法提供他们采用的编码方法或者实施攻击所需要的特定字符集。（译者注：<a href=\"http://ha.ckers.org/weird/us-ascii.html网站已经被移除）\" target=\"_blank\" rel=\"external\">http://ha.ckers.org/weird/us-ascii.html网站已经被移除）</a></p>\n<p>图2.5 作为16进制监控（us-ascii）</p>\n<p><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-062314的屏幕截图-300x237.png\" alt=\"2014-12-27 06:23:14的屏幕截图\"></p>\n<p>图2.6 作为16进制监控  (utf-16)</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-062135的屏幕截图.png\"><img src=\"http://code4fun.me/wp-content/uploads/2014/12/2014-12-27-062135的屏幕截图-300x195.png\" alt=\"2014-12-27 06:21:35的屏幕截图\"></a></p>\n<p>Burp Proxy是迄今为止最有用的手动评估Web应用的安全工具之一。他不仅可以帮助我们发现明显的问题，如果你知道你的目标的话它也可以进行规则配置。例如，如果你想仅仅寻找XML文件来调试AJAX应用，就可以创建一个仅仅获取该信息的规则。</p>\n<p>最后，Burp仅仅是在大量的可以实现部分或者更多的Burp的功能的软件之一，但是没有别的软件以这种方式工作或者 有Burp Suit这么强大的能力。Burp Suit是一个用来理解HHTP实际工作过程的学习工具。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":"不吐不快","url":"http://code4fun.me/2014/12/22/不吐不快/","content":"<p>放弃了一把键盘，决定来俄罗斯转一圈，想的是也不急这一阵，还可以再赚的嘛。结果，真是惨不忍睹，赔了夫人又折兵啊，刚到这，在喝咖啡中，钱包就被偷了。</p>\n<p>据我猜测，当时情况是这样的。由于屋内太热，就习惯性的把外套脱了，后搭在椅子上，然后钱包本来在衣服内兜，结果这样就露出来了。然后，点完东西，就蹭了一会Wi-Fi，在这期间，后面有一拨人过来，衣服蹭了一下，没有在意，而是习惯性的看了一下旁边桌上放着的相机，嗯。在那，就放心了。然后一会，服务员就过来问护照，刚开始没听清，以为是要查护照呢。还在纳闷，怎么喝个咖啡还要查护照啊，就去翻钱包，然后就发现钱包找不到了，然后才知道是服务员在门口发现一个钱包和护照，然后这时候已经猜到钱包丢了，果然，拿到钱包时候，被翻了个底朝天，就还剩下一张五角钱的纸币，皱巴巴的在角落里，一张信用卡、一张银联卡都不见了，还有一张工行的卡，由于之前坐坏了在表面贴了张卡贴，没有被认出来留下，其余的凡是和钱有关的卡都不见了，然后就是我的200欧元、500瑞典克朗以及刚换的还没捂热乎的4500卢布。<br>哎，what a fuck！</p>\n<p>嗯，后来反思一下，损失这么多的原因还是自己不够注意。</p>\n<p>第一 当时有所察觉，而没有去看钱包。警惕性不够。并且这还是在本身就知道俄罗斯这边贼贼多的情况下，还是被咖啡馆这个环境蒙蔽了。</p>\n<p>第二 衣服不应该那么处理，完全等于把钱放在身后，很明显，且自己不易察觉。往常安全的一个原因就是一般都随身背着书包，然后把钱包放在书包里并且把书包背在身前，目标不明显，且安全性比较好。</p>\n<p>第三 钱放的太密集，所有钱都放到了一起，按往常习惯应该肯定是分开放的，结果这次把所有钱都放一块了，一个大失误。</p>\n<p>小心使得万年船啊。</p>\n"},{"title":"XSS攻击——跨站脚本攻击与防御 第一章 跨站脚本原理(3) XML和AJAX介绍","url":"http://code4fun.me/2014/12/19/XML和AJAX介绍/","content":"<h2 id=\"XML和AJAX介绍\"><a href=\"#XML和AJAX介绍\" class=\"headerlink\" title=\"XML和AJAX介绍\"></a>XML和AJAX介绍</h2><p>我们假设本书的读者都有JavaScript和Html的基础，这两门技术都是基于一个被广泛传播很久的标准，已经有无数的关于他们是怎么工作以及你可以采用他们在网络上做什么的信息。然而，介于AJAX和XML(eXtensible Markup Language)刚刚被引入互联网世界，我们觉得对这两门技术进行一个基础的概述是很有必要的。</p>\n<p>人们一般认为AJAX比XML更强一些，因为XML是AJAX的缩写的一部分。但是事实上并不是如此的。AJAX描述了一种可以有时悄悄进行web开发练习的方法。从基础上来说，AJAX是一组为了创建可以提高用户体验、可用性以及速度的Web应用的技术的集合。<br>在2005年这个词被主流Web开发者所使用，但AJAX的历史很悠久的。这门在今天被广泛使用的核心技术是由微软在开发远程脚本技术的时候首次使用。和传统的由DHTML定义的技术如IFRAME和LAYER比起来，由AJAX定义的这组技术是一个好的多选择。<br>AJAX的最基本的组成元素是XMLHttpRequest JavaScript对象。这个对象提供一种可以从远程服务器得到数据但是不需要刷新整个已经载入的页面的机制。根据使用的浏览器，这个对象可以产生很多不同的特色。XMLHttpRequest对象设计的很简单直观，下面的例子就是怎么发送请求以及使用请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// instantiate new XMLHttpRequest</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// handle request result</span></div><div class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (request.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// do something with the content</span></div><div class=\"line\">        alert(request.responseText);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// open a request to /service.php</span></div><div class=\"line\">request.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/service.php'</span>, <span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// send the request</span></div><div class=\"line\">request.send(<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>由于各种原因，XMLHttpRequest对象并不能在所有浏览器上以相同的方式执行。这是由于AJAX是一门新技术，虽然他的标准很快就被制定了，但是仍然有很多我们需要解决各种浏览器的互斥问题的情况。这些问题通常是借助于AJAX的库来解决，但是作为安全研究，我们一般都要使用纯净的基础版本。<br>正如我们前面提到的，XMLHttpRequest对象是依赖浏览器版本的。例如微软的IE浏览器需要使用ActiveXObjext(‘Msxml2.XMLHTTP’)或者甚至是ActiveXObjext(‘Microsoft.XMLHTTP’)来创建和标准的XMLHttpRequest类似的对象。其余的浏览器也许有不同的方法来实现相同的事情，为了保证可以适配所有的浏览器的不同之处，我们通常喜欢用这里定义的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getXHR</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.createRequest) &#123;</div><div class=\"line\">        xhr = <span class=\"built_in\">window</span>.createRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObjext) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xhr = <span class=\"keyword\">new</span> ActiveXObjext(<span class=\"string\">'Msxml2.XMLHTTP'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObjext(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> xhr;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// make new XMLHttpRequest objext</span></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = getXHR();</div></pre></td></tr></table></figure>\n<p>表1.1总结了XMLHttpRequest对象的方法和属性<br><!-- table.sample { border-width: 1px 1px 1px 1px; border-spacing: 2px; border-style: outset outset outset outset; border-color: gray gray gray gray; border-collapse: separate; background-color: white; } table.sample th { border-width: 1px 1px 1px 1px; padding: 1px 1px 1px 1px; border-style: inset inset inset inset; border-color: gray gray gray gray; background-color: white; -moz-border-radius: 0px 0px 0px 0px; } table.sample td { border-width: 1px 1px 1px 1px; padding: 1px 1px 1px 1px; border-style: inset inset inset inset; border-color: gray gray gray gray; background-color: white; -moz-border-radius: 0px 0px 0px 0px; } --></p>\n<p>abort()中止请求</p>\n<p><table class=\"XMLHttpRequest对象方法和属性\"></table></p>\n<p><tbody></tbody></p>\n<p><tr></tr></p>\n<p><th>方法/属性</th></p>\n<p><th>描述</th><br></p>\n<p><tr></tr></p>\n<p><td>abort()</td></p>\n<p><td>中止请求</td><br></p>\n<p><tr></tr></p>\n<p><td>getAllResponseHeaders()</td></p>\n<p><td>以字符串的形式取回响应的头部</td><br></p>\n<p><tr></tr></p>\n<p><td>getResponseHeader(name)</td></p>\n<p><td>取回特定名字的头部的值</td><br></p>\n<p><tr></tr></p>\n<p><td>setRequestHeader(name, value)</td></p>\n<p><td>根据名字设定头部的值</td><br></p>\n<p><tr></tr></p>\n<p><td>open(method, URL, [asynchronous], [username, password])</td></p>\n<p><td>设定使用的方法以及取回的网址，打开请求对象</td><br></p>\n<p><tr></tr></p>\n<p><td>onreadystatechange</td></p>\n<p><td>这个属性可以获得当这个请求通过不同的状态时将要调用的事件的引用</td><br></p>\n<p><tr></tr></p>\n<p><td>readyState</td></p>\n<p><td>readyState参数定义了请求的状态，可能的值有:<br>0 - 未初始化<br>1 - 打开<br>2 - 已发出<br>3 - 正在接收<br>4 - 加载完成</td><br></p>\n<p><tr></tr></p>\n<p><td>status</td></p>\n<p><td>status属性返回响应状态码，如果请求成功则是200，如果需要重定向则是302，其他的状态码也是可能的</td><br></p>\n<p><tr></tr></p>\n<p><td>statusText</td></p>\n<p><td>这个属性返回和状态码相关的描述</td><br></p>\n<p><tr></tr></p>\n<p><td>responseText</td></p>\n<p><td>responseText属性返回响应体</td><br></p>\n<p><tr></tr></p>\n<p><td>responseXML</td></p>\n<p><td>responseXML与responseText相似，但是如果服务器以XML作为响应，浏览器将将它转化为易存储的结构，这种结构通常被称为Documnet Object Model(DOM)</td><br><br><br><br>请注意responseXML和responseText的区别，他们都是返回响应体，但他们在功能方面确实有一些不同。</p>\n<p>特别地，responseText被用于取回文本文档、HTML页面、二进制页面以及所有不是XML格式的网页。当我们需要处理XML的时候，我们使用responseXML属性，它会将响应文档解析成DOM对象。</p>\n<p>我们已经展示了，responseText是怎么工作的，所以让我们看一下responseXML的应用。在提供另一个例子之前，我们先解释一下XML的作用。</p>\n<p>XML是用来展示含义而不是像HTML那样展示结构，XML是一种具有具有自我描述性的没有作为的语言。其他与XML标准相关的是XPath, Extensible Stylesheet Language Transformation(XSLT), XML Schema Definition (XSD), Xlink, XForms, Simple Object Access Protecol (SOAP), XMLRPC等等。我们不能对这些全部进行讲解，因为这已经超出了本书 的范围，但是你可以在<a href=\"http://www.w3c.org\" target=\"_blank\" rel=\"external\">www.w3c.org</a>上查阅他们。</p>\n<p>虽然XML和HTML不同，但是他们都是由被称作元素和标签的块组成的。XML和HTML的元素都是高度结构化的。他们可以用一个树的结构表现，这通常被称作DOM。事实上，DOM是由World Wide Web Consortium定义的一组规格，它定义了XML结构是怎么被创建的以及他具有哪些方法属性，正如我们前面所说，HTML也可以被解析成DOM树。</p>\n<p>其中一个最常使用的DOM函数是getElementsByTagName,它返回一个元素的数组。另一个流行的函数是getElementById，返回一个基于id的单独的元素。例如，借助JavaScript的帮助，我们可以轻松的提取所有的<code>&lt;p&gt;</code>元素并且用”Hello World”代替他们。例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// get a list of all element</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// iterate over the list</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; p.lenght; i++) &#123;</div><div class=\"line\">    <span class=\"comment\">// set the text of each to 'Hello World!'</span></div><div class=\"line\">    p[i].innerHTML = <span class=\"string\">'Hello World'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>采用类似的方法，我们可以和XMLHttpRequest对象中的XML响应属性相互配合，就如前面描述的那样。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getXHR</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.createRequest) &#123;</div><div class=\"line\">        xhr = <span class=\"built_in\">window</span>.createRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObjext) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xhr = <span class=\"keyword\">new</span> ActiveXObjext(<span class=\"string\">'Msxml2.XMLHTTP'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObjext(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> xhr;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// make new XMLHttpRequest object</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = getXHR();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// handle request result</span></div><div class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (request.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// do something with the content but in XML</span></div><div class=\"line\">        alert(request.responseXML.getElementsById(<span class=\"string\">'message'</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// open a request to /service.xml.php</span></div><div class=\"line\">request.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/service.xml.php'</span>, <span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"comment\">// send the request</span></div><div class=\"line\">request.send(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// make new XMLHttpRequest objext</span></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = getXHR();</div></pre></td></tr></table></figure>\n<p>如果服务器响应包括以下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">messageForYou</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">overHere</span> <span class=\"attr\">id</span>=<span class=\"string\">\"message\"</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">overHere</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">messageForYou</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>浏览器就将在一个警告框里显示”Hello World!”。</p>\n<p>理解基础的XML和AJAX是很重要的，它们已经成为了Internet不可或缺的一部分，它们对于理解这些技术对于传统Web应用的安全测试的影响也是很重要的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>XSS是一种可以窃取敏感信息、劫持用户sessions、危机浏览器以及系统安全的攻击向导，XSS攻击自从Web早期就已经存在。今天他们对于电子商务产生了最大的威胁。</p>\n"},{"title":"XSS攻击——跨站脚本攻击与防御 第一章 跨站脚本原理(2) Web应用安全","url":"http://code4fun.me/2014/12/16/XSS攻击——跨站脚本攻击与防御 第一章 跨站脚本原理(2) Web应用安全/","content":"<p>Web为八亿网民提供了场所，是一亿网站之家以及每天具有数十亿美金的传输。作为全球化的一个现象，国际贸易已经依赖于互联网。这距离电子邮件、留言板、聊天室、网上拍卖、网上购物、网上新闻、网上银行以及其他网络软件成为我们生活中的一部分，并没有花多长时间。现在，用户交出了他的姓名、住址、社保号、信用卡信息、电话号码、母亲的婚前姓氏，年薪、出生日期有时甚至是他最喜欢的颜色或者是幼儿园老师的名字来接受财政声明、纳税记录或者每天的现货贸易。并且就像我前面提到的，十分之八的网站有严重的安全问题使得你的数据很危险。甚至是最安全的系统也在被新的最近被定义为”Web应用安全“的问题困扰着。</p>\n<a id=\"more\"></a>\n<p>收集个人信息及隐私的组织有义务保护数据，由于Web应用安全问题变得越来越重要，我们需要更认真的去思考这个问题。我们面对的已经不仅仅是相对惹人烦的认证窃取，脚本小子入侵以及全部公开的滑稽。新的具有控制全国电网、操作水利发电大坝、开处方、管理大多数美国公司的工资名单、使用企业内网或者管理其他相当重要功能的网站上线。考虑一下，如果这些系统被恶意渗透的会是怎么样。很难想象信息安全有如此重要。Web应用如今已成为系统渗透中最简单直接且最引人注目的方法。</p>\n<p>直到最近，每个人认为防火墙、SSL、免打扰系统、网络扫描器以及密码是网络安全的解决办法。安全教授从高筑墙的军事思想得到启发，建立黑白名单。对于大部分，这种策略是很有效的，可是Web和电子商务改变了这种状况。电子商务需要防火墙允许Web（80端口的HTTP和443端口的HTTPS）传输，似乎是一夜之间互联网从有墙的网络变成了全球的电子商务市场。墙不再是密不透风的，安全管理员发现他们没办法保护这个不安全的Web应用。</p>\n<p>Web开发者现在在创造激发电子商务的应用的同时也对网络安全负责。基础的软件设计原则不得不随之改变。变革之前的经验是大部分软件只有一个相对较少的用户数量。开发者现在创造出可以在网络服务器上运行的应用，任何人在任何地点都可以得到。他们软件传播的数量和范围以指数增加，由此安全问题也加剧了。现在全球数亿用户可以直接访问公司的服务器，其中可能就有一部分是恶意的敌人。新的事由例如XSS，SQL注入以及数十种新的基于Web的攻击需要处理。</p>\n<p>图1.1 漏洞层级</p>\n<p><a href=\"http://code4fun.me/wp-content/uploads/2014/12/vulnerability_stack.png\"><img src=\"http://code4fun.me/wp-content/uploads/2014/12/vulnerability_stack-300x209.png\" alt=\"vulnerability_stack\"></a></p>\n<p>Web应用安全是一个包含很多法则、技术、设计理念的话题，通常我们感兴趣的领域是如图1.1中从服务器往上的软件层面。这包括应用服务器例如JBoss，IBM WebSphere，BEA WebLogic以及其余1000多个。然后我们前进到一些商业的或者开源的Web应用，像PHP Nuke，Microsoft Outlook Web Access以及ASP。这些之后就是内部定制的Web应用。这一层是Web应用安全的重灾区。</p>\n<p>Web应用开发者不得不考虑的最严重的威胁之一是XSS攻击。虽然XSS是Web安全中相对较小的一部分，但是它可能是关于用户的最危险的。一个很小的bug可能导致浏览器弱点，借助此攻击者可以窃取数据，了解用户的浏览历史或者其余更多的事情。</p>\n<p>讽刺的是，许多人不理解XSS攻击的危害以及他是怎样被用来攻击普通受害者的。这本书的目标就是通过一系列的讨论、例子和证据来教育读者了解XSS的重要性。</p>\n"},{"title":"XSS攻击——跨站脚本攻击与防御 第一章 跨站脚本原理(1)","url":"http://code4fun.me/2014/12/15/XSS攻击——跨站脚本攻击与防御 第一章 跨站脚本原理(1)/","content":"<p>注：此系列翻译自 <a href=\"http://book.douban.com/search/Seth%20Fogie\" target=\"_blank\" rel=\"external\">Seth Fogie</a>的书籍《Cross Site Scripting Attacks》</p>\n<p>本章主要内容：</p>\n<p>跨站脚本的历史</p>\n<p>Web应用安全</p>\n<p>XML和AJAX介绍</p>\n<a id=\"more\"></a>\n<p><strong>介绍</strong></p>\n<p>跨站脚本攻击可以追溯到1996年，万维网(World Wide Web)刚发明的时候。那是一个电子商务刚刚起步，页是网景、雅虎等公司的气泡时期。数以千计的网页正在采用HTML框架构建中。然后JavaScript就出现了，它导致了跨站的出现，永远改变了Web应用安全。JavaScript使得Web开发者可以创建采用图像轮转、浮动菜单以及弹窗等交互式网站。虽然和今天的Asynchronous JavaScript和XML（AJAX）应用标准比起来很普通，但是很快黑客就发现了这片新大陆。</p>\n<p>黑客们发现，当可信任用户浏览网站时，他们可以在同一个浏览器窗口里强制加载任何网站（银行、拍卖、商店、邮箱等等）到一个HTML框架。然后他们可以跨过两个网站间的分界线并且从一个框架里读取数据到另一个。他们可以窃取存在HTML表格中的用户名与密码、cookies或者屏幕上的机密信息。媒体以浏览器漏洞报道了这个问题。网景公司作为当时主要的浏览器厂商实施了同源政策(same-origin policy)。同源政策限制了JavaScript从一个网站获取另外网站的数据。浏览器黑客们认为这是一个挑战，然后想出了很多聪明的办法攻破这个限制。</p>\n<p>1999年12月，David Ross正在研究IE浏览器的安全相应问题。David受到也在寻找IE安全问题的Georgi Guninski工作的启发，他演示了网站内容的脚本注入（”Script Injection”），但是这个问题似乎只存在IE浏览器的服务端，在客户端并不存在。David在微软内部发表了一篇题为“Script Injection”的paper。这篇论文描述了这种情况，以及其发现过程，如何借助cookies攻击，跨站脚本（XSS）病毒如何运行，以及对此种情况的I/O过滤办法。</p>\n<p>最后这个内容被分享到CERT(译者注：computer emergency response team)。他这么做的目的是以一种负责人的方式通知公众这种情况，从而使得在整个行业内的网站得到修复而不仅仅是微软的。再一次一月中旬的讨论中，这个组织从下面一系列相当幽默的建议中选择了”Cross Site Scripting”，</p>\n<ul>\n<li>未授权网站脚本(Unauthorized Site Scripting)</li>\n<li>非官方网站脚本(Unofficial Site Scripting)</li>\n<li>URL参数脚本注入(Uniform Resource Locator(URL) Parameter Script Insertion)</li>\n<li>跨站脚本(Cross-site Scripting)</li>\n<li>合成脚本(Synthesized Scripting)</li>\n<li>脚本欺骗(Fraudulent Scripting)</li>\n</ul>\n<p>在2000年1月25日，微软在华盛顿的贝尔维尤的一个酒店约见CERT，相关厂商（例如Apache）和其余一些感兴趣的组织一起讨论这个概念。</p>\n<p>David在Ivan Brugiolo、John Coates和Michael Roe的帮助下又重新写了这篇内部论文，以使得它适合公开。以和CERT协调，微软在2000年2月公开了这篇论文以及其他材料。过去几年的某天，这篇论文被从Microsoft.com上移除了，但是没有东西会在互联网上消失。我们现在可以在<a href=\"http://ha.ckers.org/cross-site-scripting.html\" target=\"_blank\" rel=\"external\">http://ha.ckers.org/cross-site-scripting.html</a>找到他。</p>\n<p>同时，黑帽子们为了感染用户在HTML聊天室、留言板、访客记录、邮件等任何地方提交包含HTML/JavaScript的文本，这就是这种攻击叫做HTML注入的来源。黑客们创造了一种基本的JavaScript恶意软件模型，他们提交这些代码以改变屏幕名称，显示讽刺信息，窃取cookies，改变网站页面颜色，显示病毒警告和其他一些不具有很明显恶意的危害。不久之后另一种攻击变种出现了，通过社会工程学，欺骗用户去点击一个特殊装饰的恶意链接也可以导致和HTML注入相同的结果，Web用户除了关闭JavaScript没有别的办法自卫。</p>\n<p>那些年原来被认为是跨站脚本的漏洞变成了一个没有特殊名字的浏览器漏洞。HTML注入和恶意链接现在被分类为跨站脚本的变种，反射型跨站脚本和存储型跨站脚本。不幸的是这就是许多人弄不清这些术语的原因。更糟的是，”CSS”这个缩写与一个新诞生的浏览器技术Cascading Style Sheets弄混。最后在2000年早期，一个聪明人提议用“XSS”代替跨站脚本的缩写来避免混乱。然后就像我们知道的，它流传了下来，XSS有了自己的身份。几十篇描述他破坏性的论文和海量的漏洞利用建议充斥着网络。可很少有人听。</p>\n<p>直到2005年，大量的安全专家和开发者都很少注意XSS。他们主要关注缓冲区溢出，僵尸网络，病毒，蠕虫病毒，间谍软件等等。同时全球每个月有100万新的网络服务器出现，他们有着脆弱的防火墙并且认为Secure Sockets Layer(SSL)是很奇怪的东西。更多的人认为使得XSS出现的JavaScript是一门玩具编程语言。“它不能获得操作系统的root权限或者exploit数据库，所以为什么我需要关心呢？点击一个链接或者参观一个网址能有多危险呢？”在2005年10月我们得到了答案。Samy Worm，第一个XSS蠕虫关闭了著名的社交网站MySpace。它的payload是相对温和的，Samy Worm被设计从一个MySpace用户的个人主页感染另一个用户，最终在短短24小时内感染了100万用户。安全世界惊醒了，然后JavaScript恶意程序的研究开始广泛开展起来。</p>\n<p>短短几个月后，在2006年，JavaScript端口扫描器，攻破内网，按键记录，木马，浏览器历史记录窃取出现了并且产生了持续的影响。在主要网站的数百个XSS漏洞被揭露出来，犯罪分子开始以假冒身份来进行欺骗。毫不奇怪的，根基WhiteHat Security的记录，超过70%的网站现在是可利用的。MITRE的公共漏洞披露(CVE)项目是一个在商业软件或者开源软件中公开漏洞的集合，它标明XSS已经超过缓冲区泄漏成为被发现最多的漏洞。理所当然地，面对信息安全和电子商务，XSS成了潜在地最具有破坏性的漏洞。今天，当观众被问到是否听说过XSS时，几乎所有人都会举手。</p>\n<p>&nbsp;</p>\n"},{"title":"Linux bash快捷键","url":"http://code4fun.me/2014/12/14/linux-bash-e5-bf-ab-e6-8d-b7-e9-94-ae/","content":"<pre>[来自网络]bash快捷操作\n\n生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。\n\n编辑命令\n\n    Ctrl + a ：移到命令行首\n    Ctrl + e ：移到命令行尾\n    Ctrl + f ：按字符前移（右向）\n    Ctrl + b ：按字符后移（左向）\n    Alt + f ：按单词前移（右向）\n    Alt + b ：按单词后移（左向）\n    Ctrl + xx：在命令行首和光标之间移动\n    Ctrl + u ：从光标处删除至命令行首\n    Ctrl + k ：从光标处删除至命令行尾\n    Ctrl + w ：从光标处删除至字首\n    Alt + d ：从光标处删除至字尾\n    Ctrl + d ：删除光标处的字符\n    Ctrl + h ：删除光标前的字符\n    Ctrl + y ：粘贴至光标后\n    Alt + c ：从光标处更改为首字母大写的单词\n    Alt + u ：从光标处更改为全部大写的单词\n    Alt + l ：从光标处更改为全部小写的单词\n    Ctrl + t ：交换光标处和之前的字符\n    Alt + t ：交换光标处和之前的单词\n    Alt + Backspace：与 Ctrl + w 类似\n\n重新执行命令\n\n    Ctrl + r：逆向搜索命令历史\n    Ctrl + g：从历史搜索模式退出\n    Ctrl + p：历史中的上一条命令\n    Ctrl + n：历史中的下一条命令\n    Alt + .：使用上一条命令的最后一个参数\n\n控制命令\n\n    Ctrl + l：清屏\n    Ctrl + o：执行当前命令，并选择上一条命令\n    Ctrl + s：阻止屏幕输出\n    Ctrl + q：允许屏幕输出\n    Ctrl + c：终止命令\n    Ctrl + z：挂起命令\n\nBang (!) 命令\n\n    !!：执行上一条命令\n    !blah：执行最近的以 blah 开头的命令，如 !ls\n    !blah:p：仅打印输出，而不执行\n    !$：上一条命令的最后一个参数，与 Alt + . 相同\n    !$:p：打印输出 !$ 的内容\n    !*：上一条命令的所有参数\n    !*:p：打印输出 !* 的内容\n    ^blah：删除上一条命令中的 blah\n    ^blah^foo：将上一条命令中的 blah 替换为 foo\n    ^blah^foo^：将上一条命令中所有的 blah 都替换为 foo\n</pre>\n\n<p>&nbsp;</p>\n"},{"title":"selenium 自动登陆 ——浏览器在手，天下我有。","url":"http://code4fun.me/2014/12/13/selenium/","content":"<p>在之前的一篇文章中写过关于ie自动登陆的PAMIE模块的使用。</p>\n<p>当时就是在纠结，在Linux下怎么办呢？一个机缘巧合的机会遇到了selenium。</p>\n<p>废话不多说了，<a href=\"https://pypi.python.org/pypi/selenium\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>安装还是很简单，直接用pip就好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -U selenium</div></pre></td></tr></table></figure></p>\n<p>或者下载下来，然后在根目录运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py install</div></pre></td></tr></table></figure></p>\n<p>安装好后，先来小试一把。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">from selenium import webdriver</div><div class=\"line\">browser = webdriver.Chrome()</div><div class=\"line\">browser.get(&apos;http://code4fun.me&apos;)</div></pre></td></tr></table></figure></p>\n<p>然后并没有很爽快的开始进行下去， 而是出现了一个错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;</div><div class=\"line\">  File &quot;/usr/local/lib/python2.7/dist-packages/selenium/webdriver/chrome/webdriver.py&quot;, line 59, in __init__</div><div class=\"line\">    self.service.start()</div><div class=\"line\">  File &quot;/usr/local/lib/python2.7/dist-packages/selenium/webdriver/chrome/service.py&quot;, line 66, in start</div><div class=\"line\">    &quot;ChromeDriver executable needs to be available in the path. &quot;</div><div class=\"line\">selenium.common.exceptions.WebDriverException: Message: ChromeDriver executable needs to be available in the path. Please download from http://chromedriver.storage.googleapis.com/index.html and read up at http://code.google.com/p/selenium/wiki/ChromeDriver</div></pre></td></tr></table></figure>\n<p>原来是没有安装chromedriver，那好下载链接已经给出来了，那就乖乖去下载好了，系统是elementary 64位的， 那就乖乖选择64位的咯，下载下来把文件放到路径里面去就好了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv -f chromedriver /usr/local/share/chromedriver</div><div class=\"line\">sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</div><div class=\"line\">sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</div></pre></td></tr></table></figure>\n<p>就是先把文件移到share文件夹下，然后再从其中几个路径用ln，链接过去，其实当然也可以每个地方都复制一遍。</p>\n<p>把这些都移动过去之后，我们重复上一次的命令，就可以愉快的看到自动打开了浏览器，并且进入了我们想进入的网站。</p>\n"},{"title":"外包结束","url":"http://code4fun.me/2014/12/13/外包结束/","content":"<p>好多天没有更新了，今天估计结束了最后一个外包，以后就专心更新博客了。<br>今天晚上十点半出去跑步，然后出门就是大雪花啪啪啪的打的脸疼。还是坚持跑完4.8km，不锻炼是不行的。</p>\n"},{"title":"Pay For What You Need!","url":"http://code4fun.me/2014/12/10/pay-for-what-you-need/","content":"<p>最近见了太多的伸手党，这个，我期末作业要设计网页谁能帮我做个啊。那个，我有个课程设计，帮我做个贪吃蛇吧。见到这种人，真想说一声WTF。没有人需要给你白干事，你没有努力，想混过去，很简单，可以出门右拐去某宝，也可以自己去网上找些已经公布的代码。</p>\n<p>当然有些问题借助谷歌可能解决不了，大家也愿意帮你解决问题。但是，出现问题直接问别人，这是纯属浪费别人的时间，大部分问题在 <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">Stack Overflow</a>分分钟就可以找到答案。</p>\n<p>另外一个问题就是关于软件付费的问题，也许国内的习惯已经让大家乐于且没有意识去使用盗版软件，前几天看到朋友圈下面，有人推荐了一款APP，然后下面有人回复“这是付费软件”，另外就有人回复“可以用某某助手”。往严重里说，盗版就是偷窃。有的时候可能有些人，还会有一股浩然正气，我这是赚了资本主义的黑心钱，可是这些软件好多都是一个小团队乃至一个人，辛辛苦苦一行行代码写出来的啊。有些软件，我们也许并不是那么需要，或者完全可以找一个类似的免费软件，或者说如果你真的特别需要那个软件，买一个又何妨，最近国内一大批一元的软件，或者说就算六块，不就是两瓶可乐的事情吗？</p>\n<p>但我们执着于寻找盗版的时候，你是否忘了，你在浪费的是宝贵的时间，也许你用这段时间，去看一本书，将来可能就因为这本书而得到一份好工作。或者说出去只是跑跑步，说不定就遇到你生命中那个Ta。</p>\n<p>有句话说的很好，一个程序员都不支持程序员了，那还指望谁去支持？</p>\n<p>所以，为你需要的东西付费。Pay For What You Need ！</p>\n"},{"title":"Python之PAMIE自动登陆走起","url":"http://code4fun.me/2014/12/09/Python之PAMIE自动登陆走起/","content":"<p>在Python中有一个功能是不得不说的就是Python的丰富的库，凡是你想要的基本都可以找到现成的库。</p>\n<p>当然对于一个有极度追求效率的人，在我看来，用10min去解决一个要多次重复，每次重复时间会花费10s的问题是非常值得的，于是在很久之前要去下很多篇PPT的时候，就发现了这个PAMIE module，然后就顺利的花了一段时间解决了问题，很短的代码，就解决了大量重复的操作，今天帮人写一个自动登陆的脚本，又重新拿起这个module来，下面就详细说一下这个module。</p>\n<p>当然第一步是官网<a href=\"http://pamie.sourceforge.net/\" target=\"_blank\" rel=\"external\">http://pamie.sourceforge.net/</a>。</p>\n<p>PAMIE是“Python Automated Module For I.E.”，也就是用来自动调用IE的一个模块，在Linux下使用就比较蛋疼了，然后尝试去google 是否有“similar module PAMIE in LInux”，然后发现没有任何结果，如果有人知道的话，欢迎留言。</p>\n<p>然后下载地址是<a href=\"http://sourceforge.net/projects/pamie/files/PAMIE/PAM3.0%20for%20Python%203.0/PAM3.0.zip/download\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/pamie/files/PAMIE/PAM3.0%20for%20Python%203.0/PAM3.0.zip/download</a>，现在已经支持python 3，还是不错的。貌似由于这个需要win32com.client 支持，所以如果直接放入python库的话，会报错，经过搜索发现只需要下载Python extensions for Windows即可，下载地址<a href=\"http://sourceforge.net/projects/pywin32/files/?source=navbar\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/pywin32/files/?source=navbar</a></p>\n<p>貌似没有找到有官方文档支持，其实也不需要用官方文档，因为我们完全可以直接看源文件，里面的PAM30.py函数定义都可以根据名字猜出是干什么的，例如buttonExists(self, name) 肯定是检测是否有名字是button的键的，其中name的值可以是utton的id，name，value或者index，需要使用的时候我们直接审查一下元素，看这个元素的名字到底是什么就可以了。</p>\n<p>下面是一个简单的自动登陆示例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Author = huhuhushan</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> PAM30 <span class=\"keyword\">import</span> PAMIE</div><div class=\"line\"></div><div class=\"line\">ie = PAMIE()</div><div class=\"line\"></div><div class=\"line\">url = <span class=\"string\">\"你要打开的网址\"</span></div><div class=\"line\"></div><div class=\"line\">ie.navigate(<span class=\"string\">\"url\"</span>)</div><div class=\"line\"></div><div class=\"line\">ie.setTextBox(<span class=\"string\">\"userName1\"</span>, <span class=\"string\">'username'</span>)</div><div class=\"line\"></div><div class=\"line\">ie.setTextBox(<span class=\"string\">'password1'</span>, <span class=\"string\">'password'</span>)</div><div class=\"line\"></div><div class=\"line\">imagesrc = ie.getImageValue(<span class=\"string\">'random'</span>, <span class=\"string\">'src'</span>)</div><div class=\"line\"></div><div class=\"line\">randtext = imagesrc[<span class=\"number\">-4</span>:]</div><div class=\"line\"></div><div class=\"line\">ie.setTextBox(<span class=\"string\">'rand'</span>, randtext)</div><div class=\"line\"></div><div class=\"line\">ie.clickImage(<span class=\"string\">\"/images/bot_lodin.gif\"</span>)</div></pre></td></tr></table></figure>\n<p>当然这个过程可能，有些变量名字会改变，不过都是很简单的。</p>\n<p>比较坑爹的地方就是ie升级后，这个调用API的时候就会报错，<code>TypeError: getElementsByTagName() takes 1 positional argument but 2 were given</code>。</p>\n<p>貌似从ie9 开始就出现问题了，不过经过测试发现采用兼容模式是可以运行的。</p>\n"},{"title":"Python入门第一话","url":"http://code4fun.me/2014/12/08/Python入门第一话/","content":"<p>在程序猿界一直流传着这样一个未解之谜，就是如果你学一门语言的话，如果你的第一个程序不是”hello,world!”的话是不可能学会这么语言的。</p>\n<p>当然，这是一个笑话，不过学习语言，我们当然还是从最基础的打印输出开始。</p>\n<p>正如，前言提到的部分，我们是采用的Python的语法，也许Python 3 最坑爹的地方就是，把小白的第一步print函数给修改了，于是给大家造成了很大的困惑，就见各种贴吧论坛上，各种纳闷，为什么我的print出错了啊，只因为是用着Python 3 的编译器，跑着Python 2 的程序。下面就是Python3的”hello,world!”</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"hello, world!\"</span>)</div></pre></td></tr></table></figure>\n<p>需要注意的是Python 不是像其他语言，例如C 用大括号‘{}’，作为程序的分隔符，而是采用四个空格或者制表符（也就是Tab键）来进行分隔。并且空格和制表符不可以混用，如果混用的话就会报错，当然你要统一一种选择，这个具体的用哪一种是没有强制要求的，不过建议使用四个空格。最开始的时候，Python这种语法特性，可能会让人别扭，不过时间长了之后，你就会发现这种语法的美感，写出来的都是很清晰易于阅读的代码。不像C一样，对与’{‘的位置一直无法统一。</p>\n<p>知道了，print之后，下一个问题就是我们print不可能总是直接print那句话，当我们需要print很长一句话的时候，这样就会降低代码的可读性，或者多次输出的时候。例如下面的代码就丑到爆。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">'Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Pythonâs elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.'</span>）</div></pre></td></tr></table></figure>\n<p>所以这就产生了找个短的东西来代表这一长串字符的，于是我们就可以尝试着去做一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pythonIntro = <span class=\"string\">'Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Pythonâs elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.'</span></div><div class=\"line\">print(pythonntro)</div></pre></td></tr></table></figure>\n<p>然后我们发现这样做是合理的，看来我们的猜测方法是正确的。</p>\n<p>我们没有去告诉Python 这个后面的东西是数字还是字符串，他就自己处理了，这也就是他和其他一些语言的区别，我们不需要大喊一声，“哎，编译器，这有一个变量，他的名字是pythonIntro， 他是指的是一句话，这句话内容是balabala ”，我们只需要简单的指定他的值就好，至于是数字还是一句话就交给Python来处理好了，不需要我们操心了。</p>\n<p>那一串短的东西，也就是叫做变量，故名思议是可以改变的，至于叫什么名字完全由你决定，但是要注意这个取名也是有学问的，如果你写出下面的程序，估计别人看到只会说一声WTF。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apple = <span class=\"string\">'orange'</span></div><div class=\"line\">print(apple)</div></pre></td></tr></table></figure>\n<p>开始可能我们喜欢拿一些简单的字母a，b什么的，可是当程序长了，这样你到后面就没法知道这是在干什么了，具体的命名方法有很多，可以自行百度。</p>\n"},{"title":"MySQL 一种插入用户方法的错误","url":"http://code4fun.me/2014/12/08/mysql-e4-b8-80-e7-a7-8d-e6-8f-92-e5-85-a5-e7-94-a8-e6-88-b7-e6-96-b9-e6-b3-95-e7-9a-84-e9-94-99-e8-af-af/","content":"<p>在早期的mysql版本中可以用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">inert into user(host, user, password, select_priv, insert_priv, update_priv) values(&apos;localhost&apos;, &apos;guest&apos;, password(&apos;pass&apos;), &apos;Y&apos;, &apos;Y&apos;, &apos;Y&apos;);</div></pre></td></tr></table></figure></p>\n<p>但是在5.0之后的版本的MySQL中，这个语法会报错的 错误内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR 1364 (HY000): Field &apos;ssl_cipher&apos; doesn&apos;t have a default value</div></pre></td></tr></table></figure>\n<p>简单来说也就是这个<code>ssl_cipher</code>没有默认值，而你的插入语句又没有为该值指定一个默认值，所以这样是错误的。</p>\n<p>在官方网站上<a href=\"http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_ssl_cipher\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_ssl_cipher</a>， 我们可以发现是从5.0引入的该变量，但是官方也没有给我们一些默认值的信息，所以我们只能采取一种曲线救国的方法。</p>\n<p>既然不能插入一条数据，但是我们的目的是添加用户，所以就可以直接用添加用户的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, DROP, CREATE</div><div class=\"line\">       -&gt; ON Mydatabase.*  //for all tables in DATABASE Mydatabase</div><div class=\"line\">       -&gt; TO &apos;user&apos;@&apos;localhost&apos;</div><div class=\"line\">       -&gt; IDENTIFIED BY &apos;password&apos;;</div></pre></td></tr></table></figure>\n<p>这样就ok了。</p>\n"},{"title":"reduce map partial","url":"http://code4fun.me/2014/12/07/reduce-map-partial/","content":""},{"title":"filter","url":"http://code4fun.me/2014/12/06/filter/","content":"<p><tt class=\"descname\"><span class=\"highlighted\">filter</span></tt><big>(</big><em>function</em>, <em>iterable</em><big>)</big></p>\n<p>Construct an iterator from those elements of <em>iterable</em> for which <em>function</em> returns true. <em>iterable</em> may be either a sequence, a container which supports iteration, or an iterator. If <em>function</em> is <tt class=\"docutils literal\"><span class=\"pre\">None</span></tt>, the identity function is assumed, that is, all elements of <em>iterable</em> that are false are removed.</p>\n<p>相当于一个过滤函数，根据function的定义筛选出符合function的值，</p>\n<p>例如filter(odd, number)，的返回值就是number中的所有奇数结果。</p>\n<p>可以如下定义，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">import random</div><div class=\"line\"></div><div class=\"line\">def filter(bool_func, seq):</div><div class=\"line\">    filtered_seq = []</div><div class=\"line\">    for eachitem in seq:</div><div class=\"line\">        if bool_func(eachitem):</div><div class=\"line\">            filtered_seq.append(eachitem)</div><div class=\"line\">    return filtered_seq</div><div class=\"line\"></div><div class=\"line\">def odd(n):</div><div class=\"line\">    return n % 2</div><div class=\"line\"></div><div class=\"line\">allNums = [i for i in range(100)]</div><div class=\"line\">random.shuffle(allNums)</div><div class=\"line\">print(filter(odd, allNums))</div></pre></td></tr></table></figure>\n"},{"title":"Python系列文章前言","url":"http://code4fun.me/2014/12/06/Python系列文章前言/","content":"<p>借着这个机会整理一下，学习使用Python这么久的各种心得体会，梳理一下知识。</p>\n<p>学习一门编程语言就是学习一门思想，而这种思想必然是体现在他的那些独特的语言特性中，例如你学C语言，而不懂指针，学C++而不知道继承等，这和没学基本没有区别，只是学习了一些简单的语法而已。就好像我们会一门语言，能够凑成句子，却不会使用俚语或者一些修辞手法，当然这样你已经可以和人进行基本的交流，但是你永远不能写一首小诗，或者在别人说出“小明可以买学生票”时不会不明所以。</p>\n<p>看了这么多python的书，从一开始，看着整本书下来，然后一点点做，从最基础的开始，就连print都要连续写好多遍的时候，那真是a hard way，后来发现这并不是一个好办法，因为那个完全是针对一个没有任何编程基础的人来说的，而对于一个有编程基础的人来说，那就是纯属受累不讨好的做法，浪费大量时间，也许比较简单的方法，就是翻一下官方文档，不得不是Python的官方文档还是写的相当赞的，内容翔实，并且有好多实例，基本就可以直接使用。所以出了问题，就直接翻官方文档，而不是百度知道，国内的博客圈，流行着太多的转载与复制现象，常常是你随便打开几篇，发现内容是完全一样的，毫无建树，让你恨不得说一声“WTF”。</p>\n<p>说了这么多，也基本说清楚了我要写这系列文章的原因，虽然市面上已经有很多很好的Python教程以及书籍，但是可以梳理一下自己的脉络，并且说不定文章中的某句话或者某个例子给人以恍然大悟的感觉，我又何乐而不为呢？</p>\n"},{"title":"读书太少 想得太多","url":"http://code4fun.me/2014/12/06/读书太少 想得太多/","content":"<p>现在的状况，就是读书太少，想得太多。</p>\n<p>前几天翻到之前的东西，很陌生的感觉，旁征博引，与现在的自己恍若两人，最近总是瞎折腾，把正事都耽误了。</p>\n<p>这几天桌子太矮，手腕发疼了，以后要减少玩电脑的时间了，不能像现在一样，恨不得一天24个小时都在玩，现在是真切的有点感觉每天的时间太少了，不够用的，总是恍惚间就已经一天过去了。感觉还什么都没有做呢，大部分时间就是挂在网上东张西望。</p>\n<p>沉迷于寻找APP的世界，可是自己又不能开发出一款APP来，明明有现在要做的东西，却静不下心来，东看看、西晃晃，一天就过去了，这样不好不好，</p>\n<p>其余的就按照计划的那些东西，一点点完成。</p>\n"},{"title":"一支红杏出墙来——VPS 翻墙","url":"http://code4fun.me/2014/12/02/一支红杏出墙来——VPS 翻墙/","content":"<p>VPS继续折腾中。</p>\n<p>虽然在墙外，但是马上就回国啦，并且还可以给大家送点福利的哦。所以让我们开始这次爬墙之旅吧。</p>\n<h2 id=\"VPS选择\"><a href=\"#VPS选择\" class=\"headerlink\" title=\"VPS选择\"></a>VPS选择</h2><p>当然首先是第一步你要有一个VPS，何谓之VPS呢，就是一个你摸不到但是你可以用的主机，当然这不是虚拟主机，虚拟主机对你的权限有很大的限制，但是主这个除了你听不见主机运行时的风扇声，别的你是都可以有的。</p>\n<p>对于VPS的选择，新手一枚，也不太了解，但是之前有github大礼包，里面有100刀的digtial ocean的代金券（瞬间成土豪了），所以当然就选择了这家了，并且还挺便宜的，5刀一个月，并且还可以分时计费，如果不嫌麻烦，并且单纯是vpn的话，可以在不需要VPN的时候晚上关机，那样算下来，每月成本也就是2刀，那是大大的便宜，比买一个收费的vpn也不会贵多少，并且单人专线，岂不爽哉。</p>\n<p>这个是给的推广链接<a href=\"https://www.digitalocean.com/?refcode=5bba2d7f7d05\" target=\"_blank\" rel=\"external\">https://www.digitalocean.com/?refcode=5bba2d7f7d05</a>，从这注册会得到10刀，可以先试用两个月的了。</p>\n<h2 id=\"VPN选择\"><a href=\"#VPN选择\" class=\"headerlink\" title=\"VPN选择\"></a>VPN选择</h2><p>对于VPN，我们也有很多选择L2TP，PPTP等，在这里我们选择更加安全的L2TP，这两个的区别可以参见</p>\n<p><a href=\"http://www.zhihu.com/question/20174552\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/question/20174552</a></p>\n<blockquote>\n<p>通俗的说，就是如果我要用一个安全的方法，寄一个礼物给你，我有两种方法选择。一种是找一个铁盒子，把东西装在，上上锁（你有这把锁的钥匙），然后用快递发给你。这个就是PPTP；另外一种方法，我自己雇一个人，自己买一辆车，然后开车送过去。这个是L2TP。</p>\n</blockquote>\n<h2 id=\"设定过程\"><a href=\"#设定过程\" class=\"headerlink\" title=\"设定过程\"></a>设定过程</h2><p>注：本文针对主机操作系统为Ubuntu 14.04的，其余操作系统在操作参数上面有些不同，开始就是因为参考的文章是给12的导致里面的配置不同，从而好久没有成功。可以参照<a href=\"https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_with_Ubuntu_14.04.html\" target=\"_blank\" rel=\"external\">https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_with_Ubuntu_14.04.html</a>。<br>下面就开始我们的折腾之旅吧。</p>\n<h3 id=\"安装相应软件\"><a href=\"#安装相应软件\" class=\"headerlink\" title=\"安装相应软件\"></a>安装相应软件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install openswan xl2tpd ppp lsof</div></pre></td></tr></table></figure>\n<h3 id=\"防火墙及内核相关设定\"><a href=\"#防火墙及内核相关设定\" class=\"headerlink\" title=\"防火墙及内核相关设定\"></a>防火墙及内核相关设定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">iptables -t nat -A POSTROUTING -j SNAT --to-source 你的服务器ip -o eth+</div><div class=\"line\">echo &quot;net.ipv4.ip\\_forward = 1&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.conf.all.accept\\_redirects = 0&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.conf.all.send\\_redirects = 0&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.conf.default.rp\\_filter = 0&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.conf.default.accept\\_source\\_route = 0&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.conf.default.send\\_redirects = 0&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">echo &quot;net.ipv4.icmp\\_ignore\\_bogus\\_error\\_responses = 1&quot; | tee -a /etc/sysctl.conf</div><div class=\"line\">for vpn in /proc/sys/net/ipv4/conf/\\*; do echo 0 &amp;gt; $vpn/accept\\_redirects; </div><div class=\"line\">echo 0 &amp;gt; $vpn/send\\_redirects; done</div><div class=\"line\">sysctl -p</div></pre></td></tr></table></figure>\n<p>上面服务器ip可以用命令ifconfig查看。<br>直接把上面这段代码复制粘贴到terminal里面就可以了。<br>接下来打开/etc/rc.local文件，将下面代码替换原来里面的内容，（注：如果用vi打开文件的话可以直接用命令d+G，删除所有内容）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for vpn in /proc/sys/net/ipv4/conf/\\*; do echo 0 &amp;gt; $vpn/accept\\_redirects; echo 0 &amp;gt; $vpn/send\\_redirects; done</div><div class=\"line\">iptables -t nat -A POSTROUTING -j SNAT --to-source 你的服务器ip -o eth+</div><div class=\"line\">exit 0</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置IPSEC\"><a href=\"#配置IPSEC\" class=\"headerlink\" title=\"配置IPSEC\"></a>配置IPSEC</h3><p>编辑文件<code>/etc/ipsec.conf</code><br>然后替换文件内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">version 2 # conforms to second version of ipsec.conf specification</div><div class=\"line\"></div><div class=\"line\">config setup</div><div class=\"line\">    dumpdir=/var/run/pluto/</div><div class=\"line\">    #in what directory should things started by setup (notably the Pluto daemon) be allowed to dump core?</div><div class=\"line\"></div><div class=\"line\">    nat_traversal=yes</div><div class=\"line\">    #whether to accept/offer to support NAT (NAPT, also known as “IP Masqurade”) workaround for IPsec</div><div class=\"line\"></div><div class=\"line\">    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v6:fd00::/8,%v6:fe80::/10</div><div class=\"line\">    #contains the networks that are allowed as subnet= for the remote client. In other words, the address ranges that may live behind a NAT router through which a client connects.</div><div class=\"line\"></div><div class=\"line\">    protostack=netkey</div><div class=\"line\">    #decide which protocol stack is going to be used.</div><div class=\"line\"></div><div class=\"line\">    force_keepalive=yes</div><div class=\"line\">    keep_alive=60</div><div class=\"line\">    # Send a keep-alive packet every 60 seconds.</div><div class=\"line\"></div><div class=\"line\">conn L2TP-PSK-noNAT</div><div class=\"line\">    authby=secret</div><div class=\"line\">    #shared secret. Use rsasig for certificates.</div><div class=\"line\"></div><div class=\"line\">    pfs=no</div><div class=\"line\">    #Disable pfs</div><div class=\"line\"></div><div class=\"line\">    auto=add</div><div class=\"line\">    #the ipsec tunnel should be started and routes created when the ipsec daemon itself starts.</div><div class=\"line\"></div><div class=\"line\">    keyingtries=3</div><div class=\"line\">    #Only negotiate a conn. 3 times.</div><div class=\"line\"></div><div class=\"line\">    ikelifetime=8h</div><div class=\"line\">    keylife=1h</div><div class=\"line\"></div><div class=\"line\">    ike=aes256-sha1,aes128-sha1,3des-sha1</div><div class=\"line\">    phase2alg=aes256-sha1,aes128-sha1,3des-sha1</div><div class=\"line\">    # https://lists.openswan.org/pipermail/users/2014-April/022947.html</div><div class=\"line\">    # specifies the phase 1 encryption scheme, the hashing algorithm, and the diffie-hellman group. The modp1024 is for Diffie-Hellman 2\\. Why ‘modp’ instead of dh? DH2 is a 1028 bit encryption algorithm that modulo’s a prime number, e.g. modp1028\\. See RFC 5114 for details or the wiki page on diffie hellmann, if interested.</div><div class=\"line\"></div><div class=\"line\">    type=transport</div><div class=\"line\">    #because we use l2tp as tunnel protocol</div><div class=\"line\"></div><div class=\"line\">    left=104.236.130.95</div><div class=\"line\">    #fill in server IP above</div><div class=\"line\"></div><div class=\"line\">    leftprotoport=17/1701</div><div class=\"line\">    right=%any</div><div class=\"line\">    rightprotoport=17/%any</div><div class=\"line\"></div><div class=\"line\">    dpddelay=10</div><div class=\"line\">    # Dead Peer Dectection (RFC 3706) keepalives delay</div><div class=\"line\">    dpdtimeout=20</div><div class=\"line\">    # length of time (in seconds) we will idle without hearing either an R_U_THERE poll from our peer, or an R_U_THERE_ACK reply.</div><div class=\"line\">    dpdaction=clear</div><div class=\"line\">    # When a DPD enabled peer is declared dead, what action should be taken. clear means the eroute and SA with both be cleared.&lt;/pre&gt;</div></pre></td></tr></table></figure>\n<p>编辑<code>/etc/ipsec.secrets</code>设定服务器ip以及你的秘钥如下：<code>服务器ip %any: PSK &quot;秘钥&quot;</code><br>例如：<code>123.123.14.4 %any: PSK &quot;ilovechina&quot;</code><br>注意这句话是放在<code>include /var/lib/openswan/ipsec.secrets.inc</code>上面的。</p>\n<p>对于上面的秘钥，是以后你连接vpn的时候还要用的，所以呢，还是简单易记一点比较好，虽然那样就丧失安全性。这个就随意了。以上设定结束后，检查，<code>ipsec verify</code><br>结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Checking your system to see if IPsec got installed and started correctly:</div><div class=\"line\">Version check and ipsec on-path \\[OK]</div><div class=\"line\">Linux Openswan U2.6.38/K3.13.0-24-generic (netkey)</div><div class=\"line\">Checking for IPsec support in kernel \\[OK]</div><div class=\"line\">SAref kernel support \\[N/A]</div><div class=\"line\">NETKEY: Testing XFRM related proc values \\[OK]</div><div class=\"line\">\\[OK]</div><div class=\"line\">\\[OK]</div><div class=\"line\">Checking that pluto is running \\[OK]</div><div class=\"line\">Pluto listening for IKE on udp 500 \\[OK]</div><div class=\"line\">Pluto listening for NAT-T on udp 4500 \\[OK]</div><div class=\"line\">Checking for &apos;ip&apos; command \\[OK]</div><div class=\"line\">Checking /bin/sh is not /bin/dash \\[WARNING]</div><div class=\"line\">Checking for &apos;iptables&apos; command \\[OK]</div><div class=\"line\">Opportunistic Encryption Support \\[DISABLED]</div></pre></td></tr></table></figure></p>\n<p>其中最后一个disabled，无所谓，/bin/sh的warning 也无所谓，只要其余的ok就好了。</p>\n<h3 id=\"配置xl2tpd\"><a href=\"#配置xl2tpd\" class=\"headerlink\" title=\"配置xl2tpd\"></a>配置xl2tpd</h3><p>编辑文件<code>/etc/xl2tpd/xl2tpd.conf</code><br>替换成下面的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[global]</div><div class=\"line\">ipsec saref = yes</div><div class=\"line\">saref refinfo = 30\\`</div><div class=\"line\"></div><div class=\"line\">;debug avp = yes</div><div class=\"line\">;debug network = yes</div><div class=\"line\">;debug state = yes</div><div class=\"line\">;debug tunnel = yes</div><div class=\"line\"></div><div class=\"line\">\\[lns default]</div><div class=\"line\">ip range = 172.16.1.30-172.16.1.100</div><div class=\"line\">local ip = 172.16.1.1</div><div class=\"line\">refuse pap = yes</div><div class=\"line\">require authentication = yes</div><div class=\"line\">;ppp debug = yes</div><div class=\"line\">pppoptfile = /etc/ppp/options.xl2tpd</div><div class=\"line\">length bit = yes</div></pre></td></tr></table></figure>\n<h3 id=\"配置PPP\"><a href=\"#配置PPP\" class=\"headerlink\" title=\"配置PPP\"></a>配置PPP</h3><p>编辑<code>/etc/ppp/options.xl2tpd</code><br>替换成下面的形式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">require-mschap-v2</div><div class=\"line\">ms-dns 8.8.8.8</div><div class=\"line\">ms-dns 8.8.4.4</div><div class=\"line\">auth</div><div class=\"line\">mtu 1200</div><div class=\"line\">mru 1000</div><div class=\"line\">crtscts</div><div class=\"line\">hide-password</div><div class=\"line\">modem</div><div class=\"line\">name l2tpd</div><div class=\"line\">proxyarp</div><div class=\"line\">lcp-echo-interval 30</div><div class=\"line\">lcp-echo-failure 4</div></pre></td></tr></table></figure>\n<h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><p>编辑文件<code>/etc/ppp/chap-secrets</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Secrets for authentication using CHAP</div><div class=\"line\"># client server    secret    IP addresses</div><div class=\"line\">user  l2tpd    password</div></pre></td></tr></table></figure>\n<h3 id=\"重启openswan和xl2tpd\"><a href=\"#重启openswan和xl2tpd\" class=\"headerlink\" title=\"重启openswan和xl2tpd\"></a>重启openswan和xl2tpd</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/ipsec restart</div><div class=\"line\">/etc/init.d/xl2tpd restart</div></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>如果一切正常的话，你现在就已经可以愉快的科学上网了，当然可能大多数情况下，你遇到的情况是无法连接到服务器，不过不用担心，看一下系统的log文件<code>/var/log/syslog 和 /var/log/auth.log</code>，对于error的地方，尽情的google吧。<br>最后就是送福利了，如果懒得配置这些还想科学上网，那就私信我吧。。。</p>\n"},{"title":"Hello,world!","url":"http://code4fun.me/2014/12/01/helloworld/","content":"<p>开通了digital ocean的vps，折腾很久终于把博客弄过来了，虽然三级域名的问题还没有解决，待努力。</p>\n<p>下面学习：</p>\n<ul>\n<li><p>php</p>\n</li>\n<li><p>mysql</p>\n</li>\n</ul>\n"},{"title":"遐思","url":"http://code4fun.me/2013/05/01/some thoughts/","content":"<p>当记忆或者想法不立即记录下来，基本上马上就会忘记。</p>\n<p>所以要快速的记录下来，就是这个软件就好了，可以同步，不需要考虑别的太多的想法了。</p>\n"},{"title":"water robot","url":"http://code4fun.me/2013/05/01/water_bot/","content":"<h2 id=\"带球好坏的衡量标准\"><a href=\"#带球好坏的衡量标准\" class=\"headerlink\" title=\"带球好坏的衡量标准\"></a>带球好坏的衡量标准</h2><ol>\n<li>球速度向进攻方向的时间</li>\n<li>我方在球后鱼的个数</li>\n<li>球在进攻半场的时间<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2>当球贴着球门边上的时候，球不会算进。<h2 id=\"拆后场\"><a href=\"#拆后场\" class=\"headerlink\" title=\"拆后场\"></a>拆后场</h2>后场很复杂，小拆一下<br>[x] forbiddendefencestrategy<br>[x] strategy45//让4,5号鱼跟着球的z坐标相等<br>[x] findbestdribbler   //就是简单的鱼球角和球目标点角的差最小的情况<br>[x] fishchoose<br>[x] fishaction<br>[ ] outupstrategy//13<br>[ ] outdownstrategy//14<br>[ ] interdefence<br>[ ] outerdefence<br>[ ] updefence<br>[ ] downdefence<br>[x] qiangduan<br>[x] finddangerousfish(intnum1,intnum2)//用于判断对方哪条鱼威胁更大<br>[ ] findhitfishpoint<br>[x] finddangerousfish(List<int>OppFishID)<br>[ ] dribblescore//貌似是一个粗略估计带球时间的函数，但是怎么出现的呢？<br>[ ] hitotherscore//粗略估计撞鱼所需时间的……<br>[x] wheelscore//这个函数没用？想做什么？<br>[ ] stopball//用鱼去停球<br>[ ] isbehindball//判断是否是鱼在球后以及球在鱼的鱼头、鱼尾中间<br>[ ] isupball//鱼是不是在球的上面，相对于整个球来说的<br>[ ] isdownball//同上,too<br>[ ] dribbleaway<br>[ ] wheelatgoal<br>[ ] wheelatedge//flag为true是从上往下绕，false从下往上绕<br>[ ] judgewulong//球在禁区内的乌龙情况判断<br>[ ] selectbestwheel<br>[x] countbehindball<br>/*</int></li>\n</ol>\n<ul>\n<li>choose的值</li>\n<li>1表示将球带离球门</li>\n<li>2表示撞鱼</li>\n<li>3表示抢断横鱼</li>\n<li>4dribble（2100）</li>\n<li>5同6</li>\n<li>6球特别靠近球门的情况下，我方要绕到球后</li>\n<li>7dribble -80度带球</li>\n<li>8dribble 80度带球</li>\n<li>9边界从上往下绕</li>\n<li>10边界从下往上绕</li>\n<li>11后场边界 顺时针走</li>\n<li>12后场边界 逆时针走</li>\n<li>13上边界 顺时针</li>\n<li>14下边界 逆时针</li>\n<li>15鱼静止</li>\n<li>*/<br>后场里面好多函数在前场、中场里也存在，浪费……<h2 id=\"心得体会总结\"><a href=\"#心得体会总结\" class=\"headerlink\" title=\"心得体会总结\"></a>心得体会总结</h2></li>\n</ul>\n<ol>\n<li>平台特性<br>1）     平台具有不对称性，所以设置参数不一定都相同<br>2）     坐标都有随机误差，但是对于所有的鱼以及球误差是相同的，点球时可以根据此来消除误差。<br>3）     平台具有随机性，调参时要对一个dll进行多次测试。同一个dll在不同的电脑上表现出来的效果也不同，可以多保存一些版本，比赛时根据场地情况，挑选最优的。<br>4）     当调试平台打不开的时候，可以将txt文件最前面不对称的数据删除，然后重新开即可。<br>5）     鱼靠墙边走，时间长了会被弹开。<br>6）     球顶在球门角上不算进球。<br>7）     安装reflector可以反编译dll得到代码，用reflexil插件可以对dll直接进行修改。<br>8）     该平台函数从上到下运行，中间的会被覆盖，只考虑最后的结果</li>\n<li>代码规范<br>1）     不要所有东西堆到主函数里面，要各自封装到自己的类里面<br>2）     将常用的判断设为函数<br>3）     规范函数、变量命名<br>4）     尽量少的使用全局变量<br>5）     防止自身循环调用的出现，平时写函数的时候不要乱调用<br>6）     复制粘贴模板的时候一定要看好，把所有的有用的都用到<br>7）     在编写代码的过程中注意及时添加注释，对于代码修改也要注释怎么修改的并署名。</li>\n<li>函数编写<br>1）     具有预测思想，根据此时的速度距离，预测下一拍的速度距离，以对参数进行调整。<br>2）     用step来约束某些if语句的执行次数<br>3）     带球好坏的衡量标准<br>A．     球速度向进攻方向的时间<br>B．     我方在球后鱼的个数<br>C．     球在进攻半场的时间<h2 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h2></li>\n<li>开场等待是否值得？</li>\n<li>在原后场的基础上增加部分动作即可，不用拆了全部重新写</li>\n<li>开场防守可否不去撞鱼 换为挡球 效果感觉好一些<h2 id=\"阶段性总结\"><a href=\"#阶段性总结\" class=\"headerlink\" title=\"阶段性总结\"></a>阶段性总结</h2>水球已经告一段落了，暂时不用继续那个扯淡的跑位以及带球了，总结：</li>\n<li>改代码的时候要注意，不要瞎改，注意要有思考，不要一味去改，那样可能越改越烂，就像把刚体中心换成鱼头坐标后，不仅没变好，反而由于距离接近，导致角度出现很大的问题。</li>\n<li>注意多加注释之类的，代码要分块，要清晰，不要多层if嵌套，有些常用判断可以弄成函数。</li>\n<li>有的时候当改正不起作用的时候，不妨清空，重新开始。</li>\n<li>由于平台不对称，所以参数设置也不一定要对称，调参数要多次观察，不要因为一次的偶然情况而胡乱修改。<h2 id=\"鱼球碰撞模型所在位置：\"><a href=\"#鱼球碰撞模型所在位置：\" class=\"headerlink\" title=\"鱼球碰撞模型所在位置：\"></a>鱼球碰撞模型所在位置：</h2>鱼球碰撞模型所在位置： URWPGSim2D.Core.CollisionResponse</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static VelocityAndAngularVelocityResponse CollisionResponseBetweenFishAndBall(Vector3 NormalAxis, ref Vector3 velocityA, ref Vector3 velocityB, Vector3 fishHeadPoint, Vector3 fishMassCenter, Vector3 actionPoint, ref float bodyDirectionRad);</div></pre></td></tr></table></figure>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>调试的时候 会出现好多千奇百怪的情况，由于随意拖球，有些在比赛中基本不会发生的情况也会出现，所以不要根据那些情况进行策略变化</p>\n<h2 id=\"点球问题，\"><a href=\"#点球问题，\" class=\"headerlink\" title=\"点球问题，\"></a>点球问题，</h2><p>点球问题，目测分三段，每段大概都是10s。<br>最原始的点球数据记录</p>\n<p>820—9s</p>\n<p>1200—–15s</p>\n<p>550—–6s</p>\n<p>82050515149</p>\n<p>120038363535</p>\n<p>55030303030</p>\n<p>把带球位置改成无限远</p>\n<p>82049495051</p>\n<p>120034353336</p>\n<p>55029292831</p>\n<p>感觉看起来鱼尾巴摆的也很厉害，但是貌似速度也都差不多，难道这个鱼游动 的速度，和调角的影响。<br>然后那个到禁区范围内的时间差不多5s正常，不会再快了。<br>那个一个小想法：把带球前往的位置 挪到无穷远处……</p>\n<h2 id=\"新平台的更改\"><a href=\"#新平台的更改\" class=\"headerlink\" title=\"新平台的更改\"></a>新平台的更改</h2><ol>\n<li>制胜球阶段时间加长为5min（所以那个点球紧急程度可以减一下）</li>\n<li>具体鱼体、场地数据没有对比</li>\n<li>平台略扯  进入点球之后 如果能在一分半之内点进去 那么就是一直点</li>\n</ol>\n<p>如果超过一分半 球没有点入就会进入 正常比赛模式 然后过了这一分半 就结束比赛</p>\n<blockquote>\n<p><a href=\"\">呼呼呼山</a>(<a href=\"http://code4fun.me\">http://code4fun.me</a>)<br>2019-05-01 09:26:21</p>\n</blockquote>\n"},{"title":"backup","url":"http://code4fun.me/1990/01/06/bakcup/","content":"<p>Date:    February 8, 2015 at 5:26:05 AM GMT+8<br>Weather:    Optional(“-10°C Mostly Clear”)<br>Location:    王府街王府温馨公寓14号楼, 北京市市辖区, 北京市, 中国</p>\n<p>见到了好久没见的同学们。大家还是很亲切。    Date:    February 9, 2015 at 10:37:01 AM GMT+8<br>Weather:    Optional(“2°C Mostly Sunny”)<br>Location:    No. 75 Bianxi Street, Xi’an, Shaanxi, China</p>\n<p>今天回西安了。好冷，在焦急的等待键盘中。    Date:    February 13, 2015 at 9:10:39 AM GMT+8<br>Weather:    Optional(“4°C Mostly Sunny”)<br>Location:    No. 19 Liu Highway, Tongchuan, Shaanxi, China</p>\n<p>情人节前夜，大众点评9.9 去看午夜场电影 happy。    Date:    February 13, 2015 at 5:03:01 PM GMT+8<br>Weather:    Optional(“14°C Mostly Sunny”)<br>Location:    No. 26-18 West 5th Road, Xi’an, Shaanxi, China</p>\n<p><img src=\"\" alt=\"\">(photos/421c03c867d83710e6abb3e63e03aae1.jpeg “”)</p>\n<p>哈哈    Date:    February 14, 2015 at 11:02:09 AM GMT+8<br>Weather:    Optional(“8°C Hazy”)<br>Location:    No. 11 Hongshizihui Alley, Xi’an, Shaanxi, China</p>\n<p>去学校取快递，地址写错了，我勒个去，在公交站找公交卡的功夫，路上碰到一个小偷，幸亏我反应迅速，在手机刚被掏走，还没装起来之际，果断夺过来了。哎，不该夺过来就了事的。    Date:    February 15, 2015 at 2:14:34 PM GMT+8</p>\n<p><img src=\"\" alt=\"\">(photos/2c0f5b263ad0e3157861c463a87bda9c.jpeg “”)</p>\n<p>坐着火车走了，没事记两句话还是好的，西安回去的路真是蛋疼，一路隧道。不记账不知道，这一记账真是吓人，几天就花了2000多。勤俭持家。开始进行app开发了，还是蛮有难度的，不过iOS的开发是比android的开发体验好太多了。目前还没有涉及到代码层，还是在简单的布局层，不过object-c的语法还是蛮奇怪的，可是目前的教程swift的还是少的多、只能先纠结一会了。     Date:    February 16, 2015 at 12:14:17 PM GMT+8<br>Weather:    Optional(“6°C Mist and Fog”)<br>Location:    383 Provincial Road, Cangzhou, Hebei, China</p>\n<p>初次知道九把刀，貌似是电影「那些年我们追过的女孩」，然后本来以为是个言情小说家，也就没有在意，后来在那个破旧的小图书馆乱翻的时候，偶然翻到了一本楼上或者楼下的房客，也记不清名字了，当时看得还是蛮震惊的，原来并不是想象中的言情小说家，而是一个变态小说家，一个喜欢偷窥的变态跃然纸上，然后结局却有将前面精心设计的各种机关算计、变成一个变态的臆想，虽然中间碎石神马的还是蛮恶心的，不过情节还是蛮不错的。<br>后来又在爪机上看完他的「杀手」系列，各个精心的小故事之间又包含着联系，挖下一个个的谜团然后就没有了下文，原来也是一个挖坑无数的人。<br>在后来，下了他的全集塞到了kindle里面，好在大部分都是短篇小说，闲着无聊的时候就随便打开一部看完，然后发现是个想象力蛮丰富的作家，充斥着各种怪力乱神以及类似「那些年」里的调侃，偶尔可以看得会心一笑。一些对自己的调侃例如说在小的时候神奇地买到一些鸡蛋，后来打开鸡蛋总是得到灵感，但也在另一方面有提到自己不放过任何一个可以可以码字的机会，甚至在做车的时候或者是开会的时候。<br>后来在无聊的时候为了打发时间，又看了的「都市恐怖症」以及「猎命师传奇」，也是一堆中短篇组成的相互之间紧密关联的系列，「都市恐怖症」讲的是由一个催眠师诱发了一个少年的奇遇，以及一对警察搭档的自相残杀的故事。而「猎命师传奇」则是一个很大的布局，三种职业，吸血鬼、猎人、猎命师，三中都有超乎正常人的体魄以及能力，猎命师具有可以捕捉更换命运的能力，可是自己却不能完全掌控自己的命运，由于祖师爷的诅咒，每一代都要自相残杀，保留一个后代。故事不仅发生在两岸三地还包括了我们一衣带水的邻居–日本，日本成了一个完全由吸血鬼控制的国家，地下的皇–徐福。就好像「龙族」里的日本一样，也是由混血龙族控制，有地下的影皇。看来日本流行的黑社会势力给大家都留下了很神秘的印象，估计就像好多西方人眼中的中国的感觉一样吧，神神秘秘。    Date:    February 24, 2015 at 1:38:17 PM GMT+8<br>Weather:    Optional(“7°C Hazy”)<br>Location:    383 Provincial Road, Cangzhou, Hebei, China</p>\n<p>Playing Arts 54 playing cards by 54 artists</p>\n<p><a href=\"http://www.producthunt.com/l/5a1450653c/1\" target=\"_blank\" rel=\"external\">http://www.producthunt.com/l/5a1450653c/1</a>    Date:    February 28, 2015 at 12:25:47 AM GMT+8</p>\n<p>火车感觉<br>让小孩子坐硬座夜火车，不管对于其他乘客还是自己都不是一个很好的体验，不知道小孩子可不可以坐飞机？不过如果必须带着小孩子长途奔袭的话还是尽量动车和卧铺的好、要是以后连高铁票都买不起就糗大了。    Date:    March 3, 2015 at 7:11:03 AM GMT+8<br>Weather:    Optional(“3°C Mostly Clear”)</p>\n<p>终于回学校啦，昨天把那个拖了很久的css的搞定，不知道为啥貌似突然没有了之前学习的冲动，就是想和老婆呆在一起，玩耍或者什么。<br>决定要去租房，虽然好像房子不太好租。不知道租房后的生活会咋样。<br>Date:    March 4, 2015 at 8:51:33 AM GMT+8<br>Weather:    Optional(“4°C Cloudy”)<br>Location:    Yinhe Road, Xi’an, Shaanxi, China</p>\n<p>今天打电话竟然关机。难道就真因为我说早上电话骚扰他。好的。真厉害。气死我了。太不靠谱了。    Date:    March 7, 2015 at 11:38:48 PM GMT+8<br>Weather:    Optional(“4°C Mist and Fog”)</p>\n<p>今天女生节 祝老婆节日快乐 虽然什么都没送。不过全班一起出去吃火锅也是个不错的体验。    Date:    March 9, 2015 at 11:40:29 PM GMT+8<br>Weather:    Optional(“7°C Partly Cloudy”)</p>\n<p>开学一周了 感觉什么都没有干<br>今天跑了一天腿疼痛的。明天还要去老校区买自行车 🚲 累死了要。<br>最近开始给那个英国的公司，做兼职，按小时计费，有点那个远程工作的模样。    Date:    March 11, 2015 at 9:48:59 AM GMT+8</p>\n<p>昨天去西安买自行车了，然后两人骑自行车回来 so happy。    Date:    March 18, 2015 at 7:01:00 PM GMT+8<br>Weather:    Optional(“11°C Mist and Fog”)</p>\n<p>今天下了几个盗版软件</p>\n<p>*drafts 4 </p>\n<p>*calendar 5</p>\n<p>*textexpander</p>\n<p>*Reeder</p>\n<p>*Fantastical</p>\n<p>*Ai search<br>Date:    March 18, 2015 at 11:47:53 PM GMT+8</p>\n<p>晚上打牌，打完牌又回宿舍和富帅聊了半天。光阴就这么过去了，人生啊。<br>不过今天程序的bug还是找到了，这点比较好。归根结底是还是不太熟悉Python的编程思维。或者说是数组乱用append，忘了循环之后要清零。<br>必须要开始强迫自己使用python的调试。！！    Date:    March 19, 2015 at 11:36:13 PM GMT+8<br>Weather:    Optional(“8°C Mist and Fog”)<br>Location:    草堂镇, 西安市, 陕西省, 中国</p>\n<p>今天上午干了一上午的活，看源代码。然后下午的时候，就开始给老婆准备买礼物，以及弄软件，一天就这么荒废过去了，晚上在淘宝找了个卖共享账号的，20块钱，不过想要的软件基本都在，值了。    Date:    March 21, 2015 at 11:48:44 PM GMT+8<br>Weather:    Optional(“14°C Mostly Clear”)</p>\n<p>昨天干了一天的活。奋斗到晚上两三点。也是蛮拼的。不过太多无用功了，还是官方文档有用吧。    Date:    March 24, 2015 at 12:47:46 AM GMT+8<br>Weather:    Optional(“8°C Mist and Fog”)<br>Location:    户县, 西安市, 陕西省, 中国</p>\n<p>今日折腾的很厉害。不详细表达了。注意以后万不可总以自己角度想问题，多问对方意见。    Date:    March 25, 2015 at 7:27:49 PM GMT+8<br>Weather:    Optional(“7°C Light Rain”)<br>Location:    草堂镇, 西安市, 陕西省, 中国</p>\n<p>今天去吃火锅。亲爱的和田美芹闹别扭。然后搞得很不开心。最后喝了不少酒。    Date:    March 27, 2015 at 12:06:10 AM GMT+8<br>Location:    草堂镇, 西安市, 陕西省, 中国</p>\n<p>租房的事情基本搞定了，保证金也要发了，最近一直在忙外包的事情，好累。教研室还有东西一点没弄呢，提不起兴趣怎么破？当初真该去CS啊。可是现在做的是数学啊。也不该如此啊。<br><strong>加哟一</strong><br>Date:    March 28, 2015 at 1:14:38 AM GMT+8<br>Weather:    Optional(“6°C Mist and Fog”)</p>\n<p>今天心情有点糟糕。总是觉得不太顺心，也许是有的时候太执拗了，希望按照想象中的样子进行，当实际情况与自己的想象完全背离的时候就会难受。觉得不被重视，不能理解自己。<br>人生啊。总是充满各种乱七八糟的琐事，生活中有太多人是无法理解的，乃至自己的老婆，或者说尤其是自己的老婆。关心则乱。    Date:    April 26, 2015 at 12:18:25 AM GMT+8</p>\n<p>从今天起增加阅读量    Date:    July 5, 2015 at 1:09:59 PM GMT+8</p>\n<h1 id=\"匆匆那年\"><a href=\"#匆匆那年\" class=\"headerlink\" title=\"匆匆那年\"></a>匆匆那年</h1><blockquote>\n<p>人生苦短，我用Python；世事无常，珍惜眼前人。</p>\n</blockquote>\n<p>曾经喜欢了一个女孩三年，后来又被另一个女孩喜欢了三年，而如今爱着另外一个女孩已经两年加了。<br>有的时候不得不感叹世事无常，昨天仿佛还在高中教室门口的长廊上看天看云，今天已经搬离了大学四年的宿舍，坐在返乡的火车上骚情。火车总是一个适合一个人思考的地方，看世界百态，酸甜苦辣。<br>每次坐火车总是会写点东西，在高节奏的当下，好久没有打开日记本记上几笔，亦或者是当下的生活太多欢愉。<br>今天在候车的时候突然想到前一段时间看到的新闻，说某人快递寄一个贵重物品，快递给寄丢了，只赔偿很少的钱，然后快递公司被强烈谴责。其实想想我也是对这些新闻媒体醉了，在这件事情上快递公司虽然弄丢东西有错，但是在没有保值的情况下赔很少的钱完全是合理的。快递的保值费用基本就是一个保险，如果你没有入这个保险却享受了这个的权益，那大家还有什么入保险的意义。就好像之前看的一个比较极端的例子，如果一个私有的消防队，每年向周围的民众收取一定的费用来作为在发生火灾之后进行抢救的费用，一户人家没有缴纳费用而发生了火灾，人民给这个消防队打了电话，于是消防队出动了，可是却没有灭火而只是停在旁边，只是防止火势蔓延到邻居那里，因为他的邻居缴纳了费用。无疑，这是发生在万恶的资本主义社会的一个会在道德上遭受谴责的故事，可是仔细想想这个故事中的消防队做错了吗？如果他们救火了会发生什么呢？提到的这两个例子应该是表达了一样的意思。<br>想到这其实是觉得本科这四年给带来的提高更主要的也许是思维上的吧。从毕设的时候就发现了，整个毕设几乎没有用到多少课本上的东西。基本都是重头开始学的，可是不管是学校提供的还是在学校这个平台上获得的  ，都是一种体验吧。这也许是读研的唯一目的吧，在继续静静地读几年书，提高一些思维能力，然后再步入社会这个大染缸，以此，才能更好地不要被社会磨光棱角吧。</p>\n<p>Date:    December 25, 2015 at 3:31:16 AM GMT+8<br>Weather:    Optional(“-3°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>我没给老婆说我还有这个。    Date:    February 5, 2016 at 11:02:04 AM GMT+8<br>Location:    383省道, 沧州市, 河北省, 中国</p>\n<p>寒假了。不要荒废 b    Date:    February 6, 2016 at 10:42:16 PM GMT+8</p>\n<p>不知道为什么每次回家都会吵架，他会觉得我冷落她了，语气不好，确实是这样的不知道为什么，也许回家之后总是有各种琐事、这就是不同家庭的原因吧。她回家了就没什么事情了，都是自己的时间，可是我不同啊，我还有各种乱七八糟的事情，根本没有多少闲下来的事件。    Date:    February 13, 2016 at 12:19:52 AM GMT+8</p>\n<p>就像我理解不了她家的争吵一样，她也无法理解我给他打电话的困难。</p>\n<p>仅仅是道歉却没有任何改变，屁用没有<a href=\"http://tapslash.com/m/giphy/jMN4ebSmbZdMA\" target=\"_blank\" rel=\"external\">http://tapslash.com/m/giphy/jMN4ebSmbZdMA</a>    Date:    February 13, 2016 at 12:42:35 AM GMT+8</p>\n<ul>\n<li><strong>今天是个特别的日子么？</strong><br>不是</li>\n<li><strong>今天最令人难忘的三件事情是什么？</strong></li>\n</ul>\n<ol>\n<li>没有</li>\n<li>老婆父母吵架了</li>\n<li>和老婆吵架了<br>这算什么蛋难忘</li>\n</ol>\n<ul>\n<li><strong>今天是否关心我的朋友？</strong></li>\n</ul>\n<p>关心了吧</p>\n<ul>\n<li><p><strong>今天读书了么？读书进度？</strong><br>没读书</p>\n</li>\n<li><p><strong>今天看了什么电影？</strong><br>看了个相声 量子力学与相对论在相声中的研究与应用。貌似是这个题目，挺搞笑的，另外引力波的发现在朋友圈火一把</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>今天锻炼身体了吗？</strong></p>\n<p>没</p>\n</li>\n<li><p><strong>今天花费多少钱</strong></p>\n<p> 没</p>\n</li>\n<li><strong>今天是否有帮助别人</strong></li>\n</ul>\n<p>没</p>\n<ul>\n<li><strong>我应该感谢什么？</strong></li>\n</ul>\n<ul>\n<li><strong>今天有什么感想？</strong></li>\n</ul>\n<p>人生无常啊</p>\n<ul>\n<li><strong>如何让明天变得更好？</strong></li>\n</ul>\n<pre><code>Date:    February 13, 2016 at 9:48:04 PM GMT+8\n</code></pre><p>情人节前夜，被拉黑了。</p>\n<p>女人心 海底针啊。本来打算早回去陪她，可是之前讨论情人节礼物的时候，她说了回去一起做拼图，一切都好，以为就没事了。结果，今天却。。。。</p>\n<p>来回的跑，确实太折腾了。</p>\n<p>只能和她说声对不起了。    Date:    May 24, 2016 at 12:30:17 AM GMT+8<br>Weather:    Optional(“14°C Mostly Clear”)<br>Location:    Dongda Road Chang’an, Xi’an, Shaanxi, China</p>\n<h1 id=\"无比芜杂的心绪\"><a href=\"#无比芜杂的心绪\" class=\"headerlink\" title=\"无比芜杂的心绪\"></a>无比芜杂的心绪</h1><p>现在的心情真的很复杂，一个书包引发的血案呀。早知今日，何必当初啊。<br>也许我就是个自私的人，所有事情首先考虑或者考虑最多的就是自己。不知道这种行为是如何来说。<br>我是太迁就她了，也许并不知道其实我的脾气是很暴躁的，烦躁的时候会很生气，可是现在被磨的真的更多的时候会觉得无奈而不是去生气，总是觉得互相顶撞只会愈演愈烈，这也是有时候沉默的原因吧，再生气的时候听到某些话的第一个反应就是反驳的话，可是两个人互相顶撞只会互相伤害，并不会使问题好转。    Date:    May 28, 2016 at 3:28:50 PM GMT+8<br>Weather:    Optional(“23°C Partly Cloudy”)<br>Location:    Xiyang Side Road Chang’an, Xi’an, Shaanxi, China</p>\n<h1 id=\"海上牧云记\"><a href=\"#海上牧云记\" class=\"headerlink\" title=\"海上牧云记\"></a>海上牧云记</h1><p>这两天又刷了一遍海上牧云记（主要是之前看的忘了，😳），因为电视剧已杀青，希望这部电视剧能活，给九州系列重新带回生机，当然盼猴子能填填坑。<br>读研期间真是各种乱七八糟的杂事，不知道工作后是不是还是这个样子？    Date:    June 8, 2016 at 8:14:47 AM GMT+8<br>Weather:    Optional(“21°C Mist and Fog”)<br>Location:    Dongda Road Chang’an, Xi’an, Shaanxi, China</p>\n<p><a href=\"\">爱丽丝梦游仙境2：镜中奇遇记 (2016)</a>(<a href=\"https://movie.douban.com/subject/21441132/\" target=\"_blank\" rel=\"external\">https://movie.douban.com/subject/21441132/</a>)<br>豆瓣评分：<em>6.8</em><br>导演：詹姆斯·博宾<br>主演：约翰尼·德普 / 米娅·华希科沃斯卡 / 海伦娜·伯翰·卡特 / 安妮·海瑟薇</p>\n<p>剧情简介：<em>爱丽丝（米娅·华希科沃斯卡 Mia Wasikowska 饰）为了拯救挚友疯帽子（约翰尼·德普 Johnny Depp 饰）而重返仙境，她与白皇后（安妮·海瑟薇 Anne Hathaway 饰）及一群老朋友一起，展开了一段璀璨华美、永生难忘的奇幻冒险。然而除了邪恶的红皇后之外，爱丽丝还要面对另一位劲敌——时间（萨莎·拜伦·科恩 Sacha Baron Cohen 饰），他是传说中无人能击败的角色！爱丽丝要如何才能扭转乾坤，拯救疯帽子和仙境世界？<br>影片改编自路易斯·卡罗尔广受好评的同名原作。</em><br>我的评分：★★★★<br>影评：逝去的青春    Date:    December 25, 2016 at 4:15:42 PM GMT+8<br>Weather:    Optional(“2°C Mist and Fog”)<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>改用 DayOne 记录<br>对于 Bear 和 Ulysses 记录，每天的日志，似乎总是不太合适，改成用 Day One吧，本来就是个日记软件。</p>\n<p>今天还是没有干什么事情，这算节日综合征吗，每次过节的时候都有些心绪不宁，想到之前看李笑来说他从来不过春节，而是需要休息的时候给自己放假，这种心态还真是需要学习。现在是每逢节假日，就算没事，也心理总是过不去，觉得安心不下去做事情。</p>\n<p>输入与输出：</p>\n<p>对于输出，例如目前的写博客，总是觉得不能静下心来，学得花费的时间过多，不如去看看书，学些知识，但是看<a href=\"\">技巧</a>(<a href=\"https://book.douban.com/subject/26874593/)以及[软技能]()(https://book.douban.com/subject/26835090/)都有提到要多输出，虽然也深刻体会到为师之后的知识更加巩固，这方面的心理可能需要多克服一下，确实，在写一些技术性质的东西的时候需要花费更多的时间、精力，但这也是一个让别人认识你的新途径。\" target=\"_blank\" rel=\"external\">https://book.douban.com/subject/26874593/)以及[软技能]()(https://book.douban.com/subject/26835090/)都有提到要多输出，虽然也深刻体会到为师之后的知识更加巩固，这方面的心理可能需要多克服一下，确实，在写一些技术性质的东西的时候需要花费更多的时间、精力，但这也是一个让别人认识你的新途径。</a></p>\n<p>一味的没有输出的输入作用并不是很大。    Date:    December 27, 2016 at 7:47:02 AM GMT+8<br>Weather:    Optional(“-4°C Clear”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>昨天忘记了，今早补上<br>白天在做项目的文档，修改数据结构画图等。发现相比与学术来，自己可能更适合做项目。做起项目来的时候，自己还是很快的，但一看文章就很容易走神，所以也无法产生自己的想法。</p>\n<p>晚上打了两把dota，然后去唱了歌，11点多回来之后把论文里面需要修改的图画完，在喝水的功夫里看了一会「西涯侠」，直到凌晨1点睡觉。    Date:    December 28, 2016 at 12:12:34 AM GMT+8<br>Weather:    Optional(“-6°C Partly Cloudy”)<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>荒唐<br>虽然昨天睡得并不早，早上还是准时的起来了，磨磨蹭蹭的到达教研室八点45多还好。</p>\n<p>昨天晚上画得图还有问题，今天白天就是画了几个图。没有别的事情。</p>\n<p>晚上打了好多把dota，然后把这周的「西涯侠」看完了，元旦要更夏洛克了，期待。    Date:    December 28, 2016 at 11:02:52 PM GMT+8<br>Weather:    Optional(“-4°C Hazy”)<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>总算在较早的时间想起了这件事情</p>\n<p>早上大概八点半到的教研室，主要是早上没有磨叽，给发哥看了昨天新作的图基本没有问题了，然后重新修改了海报，把新的图放了上去，把论文的图的格式调整好。</p>\n<p>十点左右去财务处拿帐，顺便取了快递，新买的手环到了，太久没戴手表了，觉得有点隔。然后去充磁，结果发现两个学生证上都有磁，就把火车票取了，应该不会再改签了。然后学校里面的国库的经费竟然没钱了，老师们都太能花了，然后等了半天，加上来回不行，大概11点到达教研室，一个小时就过去了，索性路上还可以听听播客打发时间，最近在听中国话剧编年史，发现还挺有意思的，之前没有注意过呢。听到了各种现在的电影、电视明星原来都演过话剧，以后有空可以去看一场话剧。</p>\n<p>到教研室晃悠了一会，11.30去食堂买了馒头回去吃饭，吃完饭睡了一觉，中午2.40左右到达教研室，给发哥看了一下之前总结的文档，果然之前没有做完的那部分被指出了很多毛病，囧，看来还是不好糊弄的。接下来的时间，就是感觉修补那部分的工作。</p>\n<p>下午5.30左右回来吃饭，吃完饭看了一部电影「勇士之门」，一部看到了开头就可以猜出结局的电影，果然豆瓣只有3.5分，突然想起来广电今天批评豆瓣和猫眼的评分导致国产电影票房太低，不禁表示呵呵。</p>\n<p>晚上八点准时去练舞，八点半多才开始，练到将近10点，然后又把下午剩下的一个图画完，回来，写日记。</p>\n<p>P.S. 今天潘老师找师兄师姐们讨论论文，从下午4点左右直到晚上离开教研室10.30，还没有结束。<br>P.P.S Day One的图标真难看，换一个    Date:    December 30, 2016 at 9:33:58 AM GMT+8<br>Weather:    Optional(“-5°C Mist and Fog”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>昨日晴，冷<br>果然，这个东西要日事日毕，拖到现在都忘了做了些什么。</p>\n<p>晚上教研室聚餐，直到11点，回教研室，路上师兄说他的签证下来了，可能又要出国读博了。</p>\n<p>发哥没有去，重新修改了开题报告，还有一些格式没有调整，打算去windows上调整。    Date:    December 31, 2016 at 9:22:12 AM GMT+8<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>昨天荒废<br>昨天一整天基本都荒废过去了，以后要给这样的日子加一个tag，方便后期查看。</p>\n<p>睡得比较晚，也就起晚了，然后上午9点多到了教研室，本以为人数已经很多了，结果算上我只有两个人。一上午就在刷网页中度过，并没有做什么该做的事情，原计划是要修改开题报告的格式的。中午去取了快递，回来的时候外卖已经到了。</p>\n<p>下午在家打扫卫生，把坏了的晾衣杆弄好，卫生打扫了一遍。闲着浏览了一会网页，直到五点去<em> 北餐 </em>吃了个饭。</p>\n<p>然后，吃过饭去教研室，先是打了一会坦克，然后开了把dota，刚拿了一血就去跳舞了，学了一下之前没学得，然后把舞蹈们都串起来了，跳得好累。</p>\n<p>跳完又打了一把dota，输了。打完dota，感觉整个人都不好了，累得要死。其后11.37左右去接老婆回来，然后晚上2点多看着小说睡着了。囧    Date:    January 1, 2017 at 12:09:36 AM GMT+8<br>Weather:    Optional(“1°C Mist and Fog”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>2017计划<br>上次写这种年度计划，还仅仅是个读书计划，还是2013年1月18日，在印象笔记里面，结果后来就不了了之了，整整一年都没有再管这个事情，完全抛之脑后，这次重新认真的指定一个计划。</p>\n<p><img src=\"\" alt=\"jpg\">(<a href=\"http://7xqmjb.com1.z0.glb.clouddn.com/20170102148328807738435.jpg\" target=\"_blank\" rel=\"external\">http://7xqmjb.com1.z0.glb.clouddn.com/20170102148328807738435.jpg</a>)</p>\n<h2 id=\"每月计划\"><a href=\"#每月计划\" class=\"headerlink\" title=\"每月计划\"></a>每月计划</h2><ul>\n<li>对当月进度进行盘点（重要！！）</li>\n<li>完成4篇博客文章（简书同步）</li>\n</ul>\n<h2 id=\"整体性计划\"><a href=\"#整体性计划\" class=\"headerlink\" title=\"整体性计划\"></a>整体性计划</h2><ul>\n<li>完成读书任务并至少为技术书籍每本撰写读书笔记</li>\n<li>在Github上收获100颗star</li>\n<li>完成两个iOS App（初步指定为一个微博，一个设计类App）</li>\n<li>阅读 Alamofire 的源代码，并总结笔记</li>\n<li>网站简历完成</li>\n<li>完善 Laravel 的设计模式</li>\n<li>看完 iOS 的那个公开课</li>\n</ul>\n<h2 id=\"待点亮技能点\"><a href=\"#待点亮技能点\" class=\"headerlink\" title=\"待点亮技能点\"></a>待点亮技能点</h2><ul>\n<li>Swift</li>\n<li>iOS Auto Layout</li>\n<li>微服务</li>\n<li>docker</li>\n<li>RESTful API</li>\n<li>GTD</li>\n</ul>\n<h2 id=\"读书清单\"><a href=\"#读书清单\" class=\"headerlink\" title=\"读书清单\"></a>读书清单</h2><ul>\n<li>软技能</li>\n<li>失控</li>\n<li>引爆点 <a href=\"\">一份读书笔记</a>(<a href=\"http://www.iiiyu.com/2015/01/31/read-the-tipping-point/\" target=\"_blank\" rel=\"external\">http://www.iiiyu.com/2015/01/31/read-the-tipping-point/</a>)</li>\n<li>把你的英语用起来。恶魔奶爸</li>\n<li>汤姆·索亚历险记</li>\n<li>牧羊少年奇幻之旅 英文版（已看过中文版）</li>\n<li>野心时代</li>\n<li>科技想要什么</li>\n<li>信息论 编码与密码学</li>\n<li>vim 实用技巧</li>\n<li>编码的奥秘代码大全</li>\n<li>企业应用架构</li>\n<li>RESTful Web APIs</li>\n<li>第一本docker书</li>\n<li>微服务设计</li>\n<li>啊哈! 算法</li>\n<li>程序员健康指南:get fit, fell better, and keep coding</li>\n<li>这本书叫什么:奇谲的逻辑谜题</li>\n<li>技术之瞳</li>\n<li>Beginning Laravel</li>\n<li>iOS 10 Swift Programming Cookbook</li>\n<li>objio 三本书</li>\n<li>bignerd 两本书</li>\n<li>奇石</li>\n</ul>\n<ul>\n<li><a href=\"\">x</a> GitHub 入门与实践</li>\n<li><a href=\"\"></a> 如何阅读一本书</li>\n</ul>\n<ul>\n<li>Pro Git</li>\n<li>UP &amp; GOING JS</li>\n<li>小强升职记</li>\n<li>奇石    Date:    January 1, 2017 at 11:28:45 PM GMT+8<br>  Location:    泰山路, 西安市, 陕西省, 中国</li>\n</ul>\n<p>疯狂的跨年两连发<br>一般都是跨年夜，结果是从16年12月31日到17年1月1日什么都没有做，整整两天，固有此题目。</p>\n<p>从31号上午看了看漫画，囧，然后下午做饭、吃饭、晚上出去参加学校的活动。然后1月1日凌晨0:16从馆里出来，去了网吧打dota。上午7.30从网吧出来，去吃早饭，吃完饭回来睡觉，睡到1点半，继续看了一会漫画，然后玩到晚上八点，睡了一觉到10点，洗个澡，看会儿视频，就又过去了一天。    Date:    January 3, 2017 at 7:41:48 AM GMT+8<br>Weather:    Optional(“-5°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>夏洛克更新了<br>期待很久的夏洛克第一集播出了，不过不是很喜欢。</p>\n<p>上午发哥说要开会，8.40多到达教研室，然后开始修改开题报告的格式和参考文献，等到11点多才开始给开会，一直开到1.30，汇报了一下之前的工作，然后接下来一个月要看深度学习，争取给搞好，出来一看手机，10个未接电话。赶紧回去吃饭。</p>\n<p>中午吃过饭，玩了一会pad，直到3.30出发去教研室，找了一些深度学习的资料开始看，看到5.30左右，找老婆去吃饭，等到6点多出发，吃完面7.35到达教研室，开始排练年会节目。晚上11点20回到家，看完夏洛克，又看了一集电竞纪元，难看，看了一会漫画，一点半睡觉。    Date:    January 3, 2017 at 11:57:24 PM GMT+8<br>Weather:    Optional(“-1°C Mist and Fog”)<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>元旦晚会，听报告，表演节目。<br>海报汇报才拿了个优秀奖，什么鬼？<br>跳舞很放松的在跳，心态调整的挺好。<br>上午看了一会docker，可惜电脑的硬盘太小了，失误大了。<br>喝酒，头疼，看看西涯侠。    Date:    January 5, 2017 at 8:07:38 AM GMT+8<br>Weather:    Optional(“-3°C Mist and Fog”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>年会结束第一天<br>年会那天熬到很晚才睡，等老婆做 PPT，大概2.30才睡觉，可想而知，早上有多困。</p>\n<p>上午九点到达教研室，整理了一下接下来要做的事情，和发哥确定了一下最终的结构形式，开始弄这个，下午1点多才吃了外卖。</p>\n<p>两点多给发哥把文章发过去，给提了很多意见，很明确地指出文档能力很弱，看来写博客的这件事情很必要。提高自己的表达能力。</p>\n<p>下午四点就从教研室离开，去吃了个饭，逛了一会，大概5点半回来，睡觉，一直睡到8点多起床。开始完成之前堆积的问题，一直干到12.30，终于完成了大部分的内容。    Date:    January 5, 2017 at 11:59:42 PM GMT+8<br>Weather:    Optional(“5°C Mist and Fog”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>赶在12点之前新建出来了文件<br>今天的雾霾简直是无法理喻了，让人一直想咳嗽，恐怖。</p>\n<p>早上起来去买了饺子皮和白菜，顺路把衣服给干洗了，回来之后做了一会，田美芹来了，准备包饺子，剁肉、切菜，中午一点多吃完饺子，收拾完，趴在桌子上睡了一觉。中间发哥来电话，没有接到。</p>\n<p>下午三点多，在屋子里看漫画看到快吃饭，和史博士他们晚上一起去外面吃了晚饭，然后回来开党的自我批评会议，被叫到上去发言了。</p>\n<p>开完会，九点多打了两把dota，12点到家。    Date:    January 6, 2017 at 1:24:38 AM GMT+8<br>Weather:    Optional(“4°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>Date:    January 7, 2017 at 11:56:46 AM GMT+8</p>\n<p>昨天早上起来，不想去教研室，帮老婆看了一下她的ppt和开题报告，结果还导致其最后没保存的部分不见了。😳，同样的，晚上我的白天改过的论文，被教研室改的覆盖了。<br>下午去教研室，画图，改文字，基本就这一版了。</p>\n<p>昨天和马博表达了不想继续做这个项目的想法。就算了。    Date:    January 8, 2017 at 3:09:46 PM GMT+8</p>\n<p>延安两日游    Date:    January 9, 2017 at 10:47:55 PM GMT+8<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>今日生日<br>延安回来第一天。<br>早早去了教研室，竟然一个人都没有，囧。准备补以前拉下的东西，有一些问题一直没有解决。</p>\n<p>中午外卖吃得太腻了，恶心。</p>\n<p>晚上，回来玩了一晚上，看看视频。    Date:    January 10, 2017 at 11:06:28 PM GMT+8<br>Weather:    Optional(“3°C Clear”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>今日头疼<br>上午去教研室干活，试了一些docker进行离线安装dl框架的方法，没有成功，网速是个硬伤。总是出现一些奇奇怪怪的问题。</p>\n<p>王老师给文章提了一些语法错误，修改完，下午把文章提交上去了，希望可以过。</p>\n<p>史博士的签证终于下来了，澳大利亚太不容易了。</p>\n<p>下午、晚上头疼，看了夏洛克的E2，水平明显比上一集高很多，看了一把09的dota视频，女王。</p>\n<p>顶着头疼，做了一个ticket，感觉最近学习劲头不够。想到了两个blog的题材。</p>\n<ul>\n<li>docker的安装配置</li>\n<li>tinymce的安装配置    Date:    January 11, 2017 at 11:20:19 PM GMT+8<br>  Location:    东大路, 西安市, 陕西省, 中国</li>\n</ul>\n<p>上午清bug<br>下午，晚上玩。    Date:    January 12, 2017 at 8:40:05 PM GMT+8</p>\n<p>上午在教研室整理了一下材料，中午12点从教研室出发，先去修了下手机，并没有去原来淘宝看得那家店（主要是没找到），随便找了个店换了屏幕，价钱还合理，180。<br>换完之后三点多，坐公交去火车站，火车站人并没有想象中的那么多，等了一会车就上车了，这个卧铺过路好窄。<br>突然发现忘带纸了，😳。看来是上不了厕所了，手机的电池问题挺严重的，估计也就半天就没电的状态。<br>把《GitHub入门》看完了，回去总结一下。<br>看来预计在车上写的两篇blog是没戏了。    Date:    January 17, 2017 at 12:00:47 AM GMT+8<br>Weather:    Optional(“-5°C Mist and Fog”)</p>\n<p>差点赶上刚刚好的时间<br>还是没有赶在12点之前建好，日期又不对了。<br>今天早上6点17起床，洗漱，6.30到楼下，正好看到一辆916路过，然后去吃肉夹馍、粉丝汤，大概6.45结束，等916一直等到7点五分，车上人还超多，站了很久才找到一个座位。<br>回来之后，把东西一放就去教研室了，大概8点半左右，去了开始尝试完成一些之前剩余的工作。十点多发哥开会，给大家布置了任务。任务还是很重。<br>中午在240打了两把dota，都输给电脑了。下午打了把dota，和人打的，又输了，还输得很难受。<br>下午，和wyg去买菜，在240吃火锅，吃完又打了两把dota，一输一赢。    Date:    January 18, 2017 at 12:18:10 AM GMT+8<br>Weather:    Optional(“-3°C Mist and Fog”)<br>Location:    Taishan Road, Xi’an, Shaanxi, China</p>\n<p>又过了12点了<br>今天早上睡过了，闹钟竟然没有响，还是没有听到呢，奇怪。<br>大概10点多到的教研室，人还是比较少。放假了的原因，开始准备尝试深度学习框架去做这个东西，然后一上午基本都是在来回的倒文件，不能上网真是太麻烦了。<br>中午1点从教研室出门，给老婆打了个电话，中午叫得外卖，懒得去食堂吃饭了，饭前、中、后把4集西涯侠看完了，大概3点多睡了一觉，3点半微信消息吵醒了，刚刚好时间，起床折腾收拾了一会，直到4点半到达教研室，继续上午的事情，发现竟然是keras的版本太低，囧。太蛋疼了，今天又下载好了新的一个docker镜像，明天再试一下。    Date:    January 18, 2017 at 10:45:56 PM GMT+8<br>Weather:    Optional(“-3°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>先建为敬<br>早上正常7.30起床，然后折腾了磨叽到将近8.30，往教研室走，半路上想起没带门卡，懒得回去拿，结果导致早上10.30多才进得屋门，幸好有240的门卡在。</p>\n<p>继续来回的倒东西，只能说很麻烦，总体上，最终弄得差不多了，发现原来do那个网速还很好，之前一直没有发现，阿里云那个主机貌似已经删了，所以下一个月可能就没有翻墙的东西了，或者就用do的代金券看一下是否值得再新建一个。</p>\n<p>offline与GFW真的是麻烦。</p>\n<p>晚上9个人打了一把dota，全肉阵营对全dps阵容，结果全肉获胜。</p>\n<p>听师兄们在讨论工作的问题，都觉得事业单位更好一些，稳定，害怕中年被辞退，可是少年郎需要考虑这么多吗，这不是大好的奋斗的年纪吗？不解！    Date:    January 19, 2017 at 7:18:40 PM GMT+8<br>Weather:    Optional(“1°C Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>软技能<br>坑爹的一天</p>\n<p>上午正常去教研室工作，杨老师开会，所以学生们去得很早。上午发哥提了这个以图片作为输入可能有问题的意见，我的想法是先跑通再说，下一步再考虑输入为序列的情况，经过各种苦逼的坑爹的docker尝试，终于找到了合适的docker 镜像，测试差不多可以跑通了，然后就是标定问题了，但是这个具体该如何标定也是个问题，怕标错，并且不同时刻的频谱好像频率差距有点大，最终是否会影响结果呢。</p>\n<p>下午，没有去教研室，留屋里收拾东西，晚上准备洗完澡去教研室，结果一直放水一直没水，😂😂。    Date:    January 21, 2017 at 8:47:40 AM GMT+8<br>Weather:    Optional(“-5°C Partly Cloudy”)</p>\n<p>昨日市区逛吃过    Date:    January 21, 2017 at 12:21:04 PM GMT+8</p>\n<p>踏上了归乡的火车<br>早上起床收拾东西，看了一会视频，就坐上地铁，到五路口下车，魏家买了两份凉皮，旁边工行取钱，就进站安检，一切顺利，进了站一查包发现少了一个，衣服不见了，看时间决定联系站内的人员，去找工作人员，说可以跑回去拿，就撒丫子往回跑，终于找回来了。</p>\n<p>感觉竞赛的场景比较适合小程序    Date:    February 8, 2017 at 10:33:51 PM GMT+8<br>Weather:    Optional(“-1°C Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>寒假回归，首次日记<br>虽然带了书和电脑回家，但是基本什么都没干，一个寒假就这么过去了，博客没写，因为没有特别的东西，所以日记也没有写，每天就是看看视频，玩一玩。</p>\n<p>初八从家出发，去见了一下jr，中午顺便和他本科同学一起吃了个饭，jr表示很迷茫，不知道下一步该怎么走。想想也是，谁不迷茫。</p>\n<p>到老婆家待了两天，返校那天发哥正来，就没去教研室。打扫了一天卫生，晚上打了两把dota。</p>\n<p>然后今天九点半左右到达教研室，开始干活，然后发现忘了之前的进度了，然后开始思考怎么恢复，以为是docker镜像的问题，又重新找了个镜像文件，下载下来，可是网速太慢了，从早下到晚都不行，最后终于试了一下IPv6 发现速度很快，总算下载下来了，可是虽然在服务器上测试镜像很好，为什么一到本地就不行了呢，发现竟然是因为文件夹下面有PIL的库，导致一直使用的是这个不全的库，估计之前好多的镜像都可以。😳，还好问题解决了。    Date:    February 9, 2017 at 10:28:58 PM GMT+8<br>Weather:    Optional(“-4°C Partly Cloudy”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>悲摧的等待<br>晚上去洗澡，从七点等到十点，往回走，荒废了一晚上。囧</p>\n<p>九点到教研室，开始了一天的工作。终于逐渐步入正轨，今天的结果也很好，明天理论分析一下结果。</p>\n<p>接下来要做的：</p>\n<ul>\n<li><a href=\"\"> </a> 开题报告修改</li>\n<li><a href=\"\"> </a> 项目的实践报告</li>\n<li><a href=\"\"> </a> Fusion 中文版文章撰写    Date:    February 10, 2017 at 11:32:18 PM GMT+8<br>  Weather:    Optional(“-1°C Partly Cloudy”)<br>  Location:    东大路, 西安市, 陕西省, 中国</li>\n</ul>\n<p>坑坑坑</p>\n<p>上午九点左右出发去教研室，路上正好遇到发哥，幸亏之前出了些结果，可以说一下。</p>\n<p>然后中午十点半和发哥去他那打扫卫生，一直到十二点半，然后回来吃饭，吃过饭睡了一觉，三点去教研室又遇见发哥，待到六点回来吃饭，下午出去逛，晚上打了三把dota。    Date:    February 11, 2017 at 4:30:26 PM GMT+8<br>Weather:    Optional(“10°C Sunny”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>手动调整了时间<br>早上九点半出门到达教研室，一上午没什么状态，就随便看看文章，折腾到吃饭。</p>\n<p>下午，玩了一下午浪人杀，晚上去教研室吃了元宵，浏览网页，一天就这么浪费过去了。    Date:    February 12, 2017 at 9:18:43 PM GMT+8<br>Weather:    Optional(“1°C Hazy”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>感冒的一天<br>今天感冒加重了，流鼻涕，老婆也感冒更严重，两人在家就窝了一天。</p>\n<p>上午迷迷糊糊地在睡觉，睡到下午三点多，开始干活，中间也干了很多有的没得。不过也算在工作吧。    Date:    February 13, 2017 at 11:28:11 PM GMT+8</p>\n<p>狼人杀之夜    Date:    February 14, 2017 at 9:57:31 PM GMT+8<br>Weather:    Optional(“4°C Hazy”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>情人节    Date:    February 15, 2017 at 10:42:54 PM GMT+8</p>\n<p>争取原谅的一天<br>由于昨日没有礼物，并且在老婆生气的时候我睡着了，所以一上午都在争取原谅，直到吃了午饭。<br>下午无聊看视频，晚上打dota。    Date:    February 16, 2017 at 10:32:23 PM GMT+8<br>Weather:    Optional(“14°C Partly Cloudy”)<br>Location:    Taishan Road, Xi’an, Shaanxi, China</p>\n<p>努力找工作的一天<br>花费一天时间，把简历重新充实了一下，用 HackMyResume 做了一份简历，然后投了几个公司，希望能有回应。最近要勤快的查看邮件的垃圾箱了，万一进了垃圾箱呢。<br>早上九点从家出门，中午的时候12点从教研室离开，中午三点到达教研室，晚上5.40从教研室离开，晚上七点去外面超市购物，九点回来，开始写文档。<br>写完看狼人杀视频    Date:    February 18, 2017 at 12:01:16 AM GMT+8<br>Weather:    Optional(“1°C Hazy”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>又过了时间了    Date:    February 19, 2017 at 11:10:25 PM GMT+8<br>Weather:    Optional(“7°C Hazy”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>文章中了，噢耶。<br>上午，下午干了一会活，下午吃过饭去了教研室，写了一会程序就回来，开了几把狼人杀，一直输，不过打完看了手机，发现文章中了，悬着的一颗心算落下来了，晚上去教研室狼人杀，表现太差，不开心。    Date:    February 20, 2017 at 9:58:07 PM GMT+8<br>Weather:    Optional(“5°C Cloudy”)<br>Location:    Taishan Road, Xi’an, Shaanxi, China</p>\n<p>凌晨没有睡着，发现内推了美团<br>凌晨两点多没有睡着，打算玩会电脑，结果发现收到了内推的消息，这么晚还不睡，囧。<br>上午改了一改开题报告，然后把之前的程序改好，顺便写到报告里面。<br>下午把报告给福兄看了，然后还让他看了一下开题报告，被问了很多无法回答的问题，对这个问题还是一直有些心绪。<br>晚上干了一会活，又把开题报告一改，准备明天的答辩。感觉时间一直不够用的。    Date:    February 22, 2017 at 6:16:12 AM GMT+8<br>Weather:    Optional(“0°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>补昨日<br>上午开题答辩，下午填了一些开题的表格，晚上去市区看帅帅毕业论文答辩。<br>回来没有带板栗，😠，今早去市区给买。    Date:    February 23, 2017 at 11:56:59 PM GMT+8<br>Weather:    Optional(“-1°C Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>南餐烤肉    Date:    February 26, 2017 at 7:58:22 PM GMT+8<br>Weather:    Optional(“8°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>周末娱乐两日，明天又要吃饭    Date:    February 27, 2017 at 11:00:30 PM GMT+8</p>\n<p>送师姐<br>今天下午师姐请吃饭，去农家乐，玩了一下午，    Date:    February 28, 2017 at 11:28:59 PM GMT+8<br>Weather:    Optional(“2°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>一熊面试<br>早上磨磨蹭蹭的九点到达教研室，昨天弄好了序列输入的问题，上午测试运行，发现维数总是错误，折腾了一上午，不行，中午吃饭路上想到了解决办法。</p>\n<p>下午，看到了，一熊科技的面试，回复邮件，约好了五点面试，发现还是和技术人员面试舒服，面试了40多分钟，等结果吧，感觉公司还是挺靠谱的。    Date:    March 2, 2017 at 11:03:29 PM GMT+8<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>会议好坑爹<br>晚上发现会议不在学校资助范围，略蛋疼。<br>今天学习时间略短，一熊二面，没有上次的感觉好，还是挺希望可以进的。    Date:    March 4, 2017 at 9:37:23 AM GMT+8<br>Weather:    Optional(“8°C Mostly Sunny”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>Date:    March 4, 2017 at 9:47:20 AM GMT+8<br>Weather:    Optional(“8°C Mostly Sunny”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>无眠之夜<br>基本上真正的无眠了，大概早上五点钟才睡觉，昨天上午因为时间问题，和老婆吵了一架，中午才勉强起来，去了教研室，整理了一下项目的训练样本什么的，然后跑上了神经网络的程序，四点多的时候去打了羽毛球，表现神勇。晚上七点开会，开完会约浪人杀，一直到晚上12点多，回来，大概1点开始做题，做到凌晨4点多，然后睡觉，这就醒了。    Date:    March 6, 2017 at 12:24:08 AM GMT+8</p>\n<p>又忘了写了<br>周日上午睡到十点多才醒，果然是周五熬夜，周六早起的锅。感觉心里悬悬的，估计明天就有一熊的结果了，不知道代码怎么样，leetcode那道题比较担心。明天就有结果了反正。</p>\n<p>下午去教研室把文档整理好，顺便学习了一下Clojure，如果真拿到offer，估计就要好好学Clojure了，作为一个比较专的语言，不知道以后前景如何？    Date:    March 6, 2017 at 11:45:18 PM GMT+8<br>Weather:    Optional(“3°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>实习offer到手<br>早上将近十点到达教研室，一直等一熊的结果，下午两点多收到消息，拿到了实习的offer，晚上开始学习Clojure，比之前学习lisp的时候轻松了很多。</p>\n<p>等发到offer看看具体内容吧    Date:    March 10, 2017 at 9:01:16 PM GMT+8</p>\n<p>打酱油的出差几天<br>周二突然得到通知，周三去出差，中午打车去了机场，路上挤得难受，上了飞机，小飞机坐着难受，下了飞机，打车去出差的目的地，四个人挤在后座，又被坑了一把。<br>晚上吃了饭，出去转了一圈，睡觉，早上七点起床，吃早饭，八点出发，快九点到单位。上午，看他们数据，到下午就开始打酱油，软件一直装不上，晚上回去重启了电脑才装上，玩了几把空当接龙，还被说了一下。<br>今天白天彻底打酱油，围着周围转了好几圈。下午匆匆忙忙赶来坐火车，没买上回去的机票。 哎，路上睡不着。玩会手机。    Date:    March 12, 2017 at 11:35:58 PM GMT+8<br>Weather:    Optional(“5°C Light Rain”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>上午时间在瞎逛<br>浏览了一上午网页，下午的时候都基本正常工作，晚上也没有做成什么事情。    Date:    March 13, 2017 at 11:10:59 PM GMT+8<br>Weather:    Optional(“3°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>研三的答辩都结束了<br>晚上和240的一起，吃饭，狼人杀。<br>上午九点半到达教研室，整理数据，画图。下午，开始做地图显示，把显示功能基本完成了，下一步要做的就是需要仔细查看一下。</p>\n<p>晚上狼人杀，老婆，两把被首验推出局。    Date:    March 15, 2017 at 11:25:56 PM GMT+8<br>Weather:    Optional(“4°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>时光在指尖流逝<br>一天的一事无成，心里好难受。<br>上午把简历投了几份，下午去练车，晚上打dota，呆坐着。<br>一天什么都没有干成，心里慌啊。感觉整个人都不好了。一年已经过去1/5了，计划还差很多。😡啊。<br>。。。。。。    Date:    March 16, 2017 at 11:50:59 PM GMT+8<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>谢师宴<br>今天谢师宴，早上又因为时间的问题吵了一架。<br>然后下午喝酒，狼人杀，晚上dota    Date:    March 17, 2017 at 11:49:26 PM GMT+8<br>Weather:    Optional(“5°C Mist and Fog”)<br>Location:    Lintong, Lintong, Shaanxi, China</p>\n<p>站坑    Date:    April 1, 2017 at 12:21:17 AM GMT+8<br>Weather:    Optional(“10°C Mostly Clear”)<br>Location:    泰山路, 西安市, 陕西省, 中国</p>\n<p>Date:    April 1, 2017 at 12:43:46 AM GMT+8<br>Weather:    Optional(“10°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>艰难的重拾<br>放下之后再重新拾起来真的有点难，好久没有写日记，突然重新写起来。<br>今天做了微软的笔试，一道题都没有做出来，😳。<br>过两天还有腾讯的笔试，一定要加油了。现在感觉算法真的问题很大。    Date:    April 1, 2017 at 11:22:57 AM GMT+8<br>Weather:    Optional(“18°C Mostly Sunny”)<br>Location:    东大汽车站(万家和购物广场西), 西安市, 陕西省, 中国</p>\n<p>今天心情：😄开心<br>\\<hr align=\"left\" color=\"red\" size=\"2\" width=\"100%\" noshade\\=\"\"><br>\\<table style=\"width:100%;\" cellpadding=\"2\" cellspacing=\"0\" align=\"center\" border=\"1\" bordercolor=\"#666666\" \\=\"\"><br>\\<tbody\\><br>\\<tr\\><br>\\<th style=\"text-align:center;vertical-align:middle;background-color:rgb(94,218,122);\" \\=\"\"><br>\\<strong\\>\\<span style=\"font-size:20px;\" \\=\"\">\\<span style=\"line-height:1.5;color:#333333;\" \\=\"\">\\\\<span style=\"line-height:1.5;color:#333333;\" \\=\"\">\\<nobr\\>标签\\</nobr\\>\\\\\\</span></span></span></strong\\><br>\\<br>\\</th><th style=\"text-align:center;background-color:rgb(94,218,122);\" \\=\"\"><br>\\<strong\\>\\<span style=\"font-size:20px;line-height:1.5;color:#333333;\" \\=\"\">内容\\\\</span></strong\\><br>\\<br>\\</th><th style=\"text-align:center;background-color:rgb(94,218,122);\" \\=\"\"><br>\\<strong\\>\\<span style=\"font-size:20px;line-height:1.5;color:#333333;\" \\=\"\">\\<nobr\\>开始时间\\</nobr\\>\\\\</span></strong\\><br>\\<br>\\</th></tr\\><br>\\<tr\\>\\<td style=\"text-align:center;vertical-align:middle;\" \\=\"\"><br>\\<span style=\"padding: 1px 6px;margin-left: 2px;border-radius: 10px;background-color: rgb(149,149,149);color: white;\" \\=\"\">\\<nobr\\>偷闲\\</nobr\\>\\\\\\<td style=\"text-align:center;vertical-align:middle;\" \\=\"\"><br>\\<span style=\"font-size:18px;line-height:1.5;\" \\=\"\">清明节\\<br>\\\\<td style=\"text-align:center;vertical-align:middle;\" \\=\"\"><br>\\<span style=\"font-size:18px;line-height:1.5;\" \\=\"\">\\<nobr\\>11:22:25\\</nobr\\>\\\\\\</span></td></span></td></span></td></tr\\></tbody\\></table></p>\n<p>\\<br>\\<span style=\"background-color:;\" \\=\"\"><br>\\<div style=\"text-align:left;\" \\=\"\"><br>\\<span style=\"line-height:1.5;\" \\=\"\">\\\\<span style=\"line-height:1.5;color:#333333;\" \\=\"\">\\<br>\\<br>\\    Date:    April 3, 2017 at 4:32:25 PM GMT+8<br>Weather:    Optional(“16°C Haze”)<br>Location:    西三环, 西安市, 陕西省, 中国</span></span></div></span></p>\n<p>恍恍惚惚清明已过<br>清明已经过去，参加了一个腾讯笔试，最近笔试的很蛋疼，啥都不灵，反倒是面试有的时候还可以，不过去大公司还都需要笔试，需要刷题以及学习C++，那就用C++刷题，重新找回手感。<br>如果去小公司，学习Clojure也是条出路，但是有盯盯、小密圈、企业微信，也没有大V推荐，这个太不好整了啊。    Date:    April 6, 2017 at 11:28:43 PM GMT+8<br>Weather:    Optional(“17°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>开始刷题<br>打算把节奏改成白天去教研室工作，晚上刷题，顺便学习一下Clojure，希望可以找到一个比较合适的实习，加油！    Date:    April 8, 2017 at 11:56:05 PM GMT+8<br>Weather:    Optional(“13°C Light Rain”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>微软笔试    Date:    April 16, 2017 at 12:35:25 PM GMT+8</p>\n<p>又一轮长鸽<br>又好久没有写日记了，一次面试回到解放前，之前弄的东西确实太杂了，每个东西都不深入，没有特别亮眼的东西，对于找工作突然开始迷茫，刷题也不行，只能走基础的东西。<br>不想走网站开发啊。<br>从自动化去BAT看来真是一条难走的路啊。    Date:    April 23, 2017 at 4:04:24 PM GMT+8</p>\n<p>上山第一天<br>在山上开始工作的第一天，电脑烂的要死，不知道什么时候就会出问题，重启，按这个进度两周都不一定能出来结果，忧伤啊。<br>具体验证正确率，    Date:    April 25, 2017 at 8:57:18 PM GMT+8</p>\n<p>加班一天，错过微众银行笔试<br>期望还有第二场吧，这次出差更加坚定了不去研究所的决心，虽然在学校的时候电脑不能上网，各种事情就弄得很蛋疼，但是至少还是win10 64位的机器啊，看着这边winxp 32，各种新的软件都不兼容就蛋疼，另一方面，就是这个协调也是麻烦，一个不复杂的事情，常常就要等好久才能用，就只能干等着，就像今天这个加班，白天等了一白天，啥事都没有，晚上两个小时加班。<br>Date:    April 27, 2017 at 9:08:59 PM GMT+8<br>Location:    武安镇, 襄阳市, 湖北省, 中国</p>\n<p>出差结束<br>出差终于要结束了，开心。另外今天收到微软的邮件通知，面试结果非常positive，要在5/5前出结果，希望可以顺利拿到offer，然后就是和发哥讨论去实习的事情。拿到offer就去说。</p>\n<p>微信信仰    Date:    May 9, 2017 at 9:53:07 PM GMT+8<br>Weather:    Optional(“19°C Mostly Clear”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>拖了又拖<br>下午到晚上又什么事情都没有干，还能有得到微软的offer，等的麻烦啊。<br>明天最后一天了。。。。😳    Date:    May 9, 2017 at 10:42:11 PM GMT+8</p>\n<p>Date:    June 10, 2017 at 7:33:56 AM GMT+8<br>Weather:    Optional(“18°C Mist and Fog”)<br>Location:    东大路, 西安市, 陕西省, 中国</p>\n<p>一个月未写了<br>一旦停下来再重新启动真的困难，    Date:    June 28, 2017 at 1:33:08 AM GMT+8</p>\n<p>飞机上闲着无聊<br>目前北京时间已经1.30am了，布拉格时间也已经下午七点半了。</p>\n<p>昨天的飞机晚点简直蛋疼，从下午6点晚到11点半，导致本来直飞的那班并没有赶上，只能从莫斯科这边转机。算是第二次踏上俄罗斯的大地了，哈哈哈。</p>\n<p>在飞机上把PPT和稿子都弄好了，幸亏笔记本电池撑得时间比较久。    Date:    June 28, 2017 at 1:40:26 AM GMT+8</p>\n<p>微软去实习记<br>拖了很久了，还是赶紧补上这一篇吧。</p>\n<p>忘了是什么情况下投了微软的实习生，反正最开始是没有报任何希望的，需要中英文简历，于是把中文简历直接在google 翻译里面一翻译就搞定了，然后投了上去，然后，就是通知参加笔试。</p>\n<p>第一次参加笔试，发现一道题都不会做，属于完全蒙蔽的状态，于是就没有提交。也因此，被答题系统认为未参加笔试，于是又给了另外一次机会，开心。</p>\n<p>第二次笔试，也许是因为笔试前一段时间又开始刷题了，逐渐找回了手感，最终得了0.8+0.8+0.6(貌似是具体记不清了)的样子，然后，很幸运的通过了笔试。</p>\n<p>笔试之后就是安排面试，结果正好那周去襄阳出差了，在出差的过程中，忙里抽闲，用pad看了一些题解，面试的时候，还恰好遇见重复的题目了。面试当天，请了一天假。结果，早上skype突然不能用了，导致后续的面试只能电话，不知道这个是否影响了面试的评价。第一个面试馆是一个程序媛，这也是面试感觉很不好的一个。说要模拟一个带最小元素的栈或者队列，已经记不清了。然后就蒙蔽了，主要是对于C++的类什么这一块真的不熟悉，然后就完全不会。后续是一个小哥，答题过程比较顺利。面试完，感觉特别饿就准备去吃饭，结果在路上就接到了另一个面试官的电话。又匆匆忙忙赶回宾馆，面试让写一个K-means算法，在表达并不知道具体流程之后，还给讲解了具体的流程，结果中间还是有个地方由于理解错了，导致结果有些问题，不过还好。</p>\n<p>三面结束，就是焦急的等待结果。苦于一个人了解不到情况，就建了个群，发到牛客网上，然后好多人就加进来了。这个过程真就是跌宕起伏了，先是发了个面试positive的邮件，结果过了一段时间就杳无音信了，到了需要通知的时间，又往回拖了一星期。中间，打过一次电话，hr说进入的概率有90%+。虽然有些同学已经收到offer了，但是有了这句话也着实轻松了一下，然后紧接着，拖得那一星期也到了，群里大部分人貌似已经有offer了。于是，有打了个电话，却说面试不理想，属于待定状态，等hc增加。感觉这时候，已经要把信仰耗尽了，讲道理，听到这个的时候内心还是挺失落的，感觉就是到手的鸭子又飞了的感觉，后来某一天又收到了offer。算是了了一桩心事。</p>\n<p>拿到offer这个过程，发现以前一些觉得很难的东西，其实也并不是很难，也就是一句话，不要给自己设限，Just Do IT.    Date:    June 28, 2017 at 2:02:08 PM GMT+2</p>\n<p>Date:    July 19, 2017 at 11:33:28 PM GMT+8<br>Location:    启月街, 苏州市, 江苏省, 中国</p>\n<p>来这边实习两周多了。<br>生活很惬意，965基本上，虽然下班还有各种事情要做，不过总比天天加班的好。</p>\n<p>虽然食堂饭不多，不过零食和各种条件很好👍。上班也很轻松。另外就是网好啊。</p>\n<p>最近网络环境真是越来越差啊，不会真的等到白名单到来的那一天吧，肉翻。to be or not to be。A big question。</p>\n<p>想想在二线城市生活也挺好的，不用去深圳挤城中村，不用去北京挤天通苑的地铁。<br>Date:    July 22, 2017 at 8:47:05 PM GMT+8</p>\n<p>资源的好与坏<br>今天突然想到的，大公司的一个好处也许就是资源吧。例如有些之前只能在科技媒体里听说的东西，可以真真正正的看到或者摸到，例如小娜的那个音箱。还有各种的资源，一系列API，小公司想都不敢想的东西，想做一个语义处理的东西，很简单，调一个接口在网页上随便操作几下，就得到了一个精度蛮不错的接口，或者说可以直接查询各种信息的分门别类的知识图谱，也许有些外网也是可以使用的，但从获取的便捷性以及消息的灵活性来说真的差挺多的。发现一个工具的bug，一封邮件，可能就有太平洋那边的一个员工帮你解决掉这个问题。</p>\n<p>当然坏处也很明显，那就是对于工具的依赖性。好多东西有自己内部的一套工具，例如版本管理工具，虽然感觉在有往git上迁移的迹象，并且微软最近几年的变化确实也蛮大的，开源、开放里起来。或者是build系统，以及C# 的背景，做久了也许真的会和社会上的技术有些脱节。</p>\n<p>PS：昨天听播客，谈到阿里像江湖，腾讯像大学，看来之前感觉的还不错。只是比较好奇百度像啥？？    Date:    January 6, 2018 at 10:54:18 AM GMT+8</p>\n<h1 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h1><p>昨天突然看到海上牧云记已经完结了，开始打算下载下来看一下最后两集，不过最终还是没有鼓足勇气去看。看了一下豆瓣的评价，最终还是决定放弃啦。</p>\n<p>等这部剧应该是等了有两年了吧，从记不清什么时候的杀青开始，后来传出来17年元旦开播，后来又拖到芒果台的暑期档，后来直到拖到17年底。开始看了几集，他们年轻时候的感觉还可以，虽然特别喜欢回忆杀，以及和原著有了很大的不同，但是剧情至少还可以，可是随着到了他们成人，妈蛋，完全崩坏成了一部言情剧。原著里几乎没什么戏份的各种女性角色，突然就开始不停的作。那我还不如去看小时代（虽然并没有看过）。然后，朔风何叶这个角色也是，一直靠女人，一直在中二。无力吐槽了。</p>\n<p>也许真的是原著党不适合看改变的电影，悟空传电影出来时就一直没有敢看，虽然也期待了很久，多次打算买票去看，不过最终还是忍住了，直到一次出差在飞机上看了一大半，然后发现猴子再也不是以前那个猴子了。</p>\n<p>最近忙于毕设，本来内容差不多了，又硬生生的加了一章，希望早日把程序调好。一想，感觉马上就就毕业了，再一想还有挺多事情没有做。两个项目的东西需要做，最近还攒了挺多论文的，最近看计算机视觉方面的论文感觉还挺有意思的，比起之前看雷达目标跟踪要好得多。可是感觉确实有些理论方面不够扎实，应用还好一些，但是到理论层面还是有一些差距的。    Date:    January 6, 2018 at 11:33:45 AM GMT+8</p>\n<h1 id=\"新的一年\"><a href=\"#新的一年\" class=\"headerlink\" title=\"新的一年\"></a>新的一年</h1><p>2018年就这么过来了，都不是很敢打开2017年的计划，因为和预期差了太多，这一年里做了些啥？</p>\n<p>书没有看够，博客没有写够，该学的东西也没有学好。想起，最近看得周鸿祎的自传，他多次创业中间失败的原因一直有一个很重要的点，那就是不专注。感觉自己也在这方面有很大的毛病，啥都想做一些，也就导致了啥的不能专注下来的情况。<br>Date:    February 7, 2018 at 10:26:52 AM GMT+8</p>\n"},{"title":"Achieve","url":"http://code4fun.me/Achieve/index.html","content":"<p>&lt;?php<br>/<em><br>Template Name: archive\n</em>/<br>?&gt;</p>\n"},{"title":"about","url":"http://code4fun.me/about/index.html","content":""},{"title":"category","url":"http://code4fun.me/category/index.html","content":""},{"title":"link","url":"http://code4fun.me/link/index.html","content":""},{"title":"project","url":"http://code4fun.me/project/index.html","content":""},{"title":"关于","url":"http://code4fun.me/sample-page/index.html","content":"<p><img src=\"http://code4fun.me/wp-content/uploads/2015/01/test2.png\" alt=\"test2\"></p>\n<p><pre class=\"lang:python decode:true\">#!/usr/bin/env python</pre></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"coding=utf-8\"></a>coding=utf-8</h1><h1 id=\"Author-huhuhushan\"><a href=\"#Author-huhuhushan\" class=\"headerlink\" title=\"Author = huhuhushan\"></a>Author = huhuhushan</h1><p>class Me(Person):<br>    ‘’’Introduce myself’’’<br>    def <strong>init</strong>(self):<br>        self.name = ‘huhuhushan’<br>        self.goals = ‘To Be A Better Man!’</p>\n<pre><code>def doing_now(self):\n    study(&apos;python&apos;)\n    aim(&apos;security&apos;)\n    like(&apos;read&apos;)\n\ndef tell_me(self):\n    print(&apos;读书太少，想得太多！&apos;)&lt;/pre&gt;\n</code></pre><p>&nbsp;</p>\n"},{"title":"search","url":"http://code4fun.me/search/index.html","content":""},{"title":"tag","url":"http://code4fun.me/tag/index.html","content":""},{"title":"<% tp.file.title %>","url":"http://code4fun.me/template/template.html","content":""}]